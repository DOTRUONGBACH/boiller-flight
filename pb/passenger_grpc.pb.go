// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: passenger.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PassengerServiceRPCClient is the client API for PassengerServiceRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassengerServiceRPCClient interface {
	GetPassengerByCitizenId(ctx context.Context, in *GetPassengerByCitizenIdRequest, opts ...grpc.CallOption) (*Passenger, error)
	CreatePassenger(ctx context.Context, in *CreatePassengerRequest, opts ...grpc.CallOption) (*Passenger, error)
	UpdatePassengerById(ctx context.Context, in *UpdatePassengerByIdRequest, opts ...grpc.CallOption) (*Passenger, error)
	DeletePassenger(ctx context.Context, in *DeletePassengerRequest, opts ...grpc.CallOption) (*DeletePassengerResponse, error)
}

type passengerServiceRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewPassengerServiceRPCClient(cc grpc.ClientConnInterface) PassengerServiceRPCClient {
	return &passengerServiceRPCClient{cc}
}

func (c *passengerServiceRPCClient) GetPassengerByCitizenId(ctx context.Context, in *GetPassengerByCitizenIdRequest, opts ...grpc.CallOption) (*Passenger, error) {
	out := new(Passenger)
	err := c.cc.Invoke(ctx, "/training.PassengerServiceRPC/GetPassengerByCitizenId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passengerServiceRPCClient) CreatePassenger(ctx context.Context, in *CreatePassengerRequest, opts ...grpc.CallOption) (*Passenger, error) {
	out := new(Passenger)
	err := c.cc.Invoke(ctx, "/training.PassengerServiceRPC/CreatePassenger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passengerServiceRPCClient) UpdatePassengerById(ctx context.Context, in *UpdatePassengerByIdRequest, opts ...grpc.CallOption) (*Passenger, error) {
	out := new(Passenger)
	err := c.cc.Invoke(ctx, "/training.PassengerServiceRPC/UpdatePassengerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passengerServiceRPCClient) DeletePassenger(ctx context.Context, in *DeletePassengerRequest, opts ...grpc.CallOption) (*DeletePassengerResponse, error) {
	out := new(DeletePassengerResponse)
	err := c.cc.Invoke(ctx, "/training.PassengerServiceRPC/DeletePassenger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassengerServiceRPCServer is the server API for PassengerServiceRPC service.
// All implementations must embed UnimplementedPassengerServiceRPCServer
// for forward compatibility
type PassengerServiceRPCServer interface {
	GetPassengerByCitizenId(context.Context, *GetPassengerByCitizenIdRequest) (*Passenger, error)
	CreatePassenger(context.Context, *CreatePassengerRequest) (*Passenger, error)
	UpdatePassengerById(context.Context, *UpdatePassengerByIdRequest) (*Passenger, error)
	DeletePassenger(context.Context, *DeletePassengerRequest) (*DeletePassengerResponse, error)
	mustEmbedUnimplementedPassengerServiceRPCServer()
}

// UnimplementedPassengerServiceRPCServer must be embedded to have forward compatible implementations.
type UnimplementedPassengerServiceRPCServer struct {
}

func (UnimplementedPassengerServiceRPCServer) GetPassengerByCitizenId(context.Context, *GetPassengerByCitizenIdRequest) (*Passenger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassengerByCitizenId not implemented")
}
func (UnimplementedPassengerServiceRPCServer) CreatePassenger(context.Context, *CreatePassengerRequest) (*Passenger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePassenger not implemented")
}
func (UnimplementedPassengerServiceRPCServer) UpdatePassengerById(context.Context, *UpdatePassengerByIdRequest) (*Passenger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassengerById not implemented")
}
func (UnimplementedPassengerServiceRPCServer) DeletePassenger(context.Context, *DeletePassengerRequest) (*DeletePassengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePassenger not implemented")
}
func (UnimplementedPassengerServiceRPCServer) mustEmbedUnimplementedPassengerServiceRPCServer() {}

// UnsafePassengerServiceRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassengerServiceRPCServer will
// result in compilation errors.
type UnsafePassengerServiceRPCServer interface {
	mustEmbedUnimplementedPassengerServiceRPCServer()
}

func RegisterPassengerServiceRPCServer(s grpc.ServiceRegistrar, srv PassengerServiceRPCServer) {
	s.RegisterService(&PassengerServiceRPC_ServiceDesc, srv)
}

func _PassengerServiceRPC_GetPassengerByCitizenId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPassengerByCitizenIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassengerServiceRPCServer).GetPassengerByCitizenId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.PassengerServiceRPC/GetPassengerByCitizenId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassengerServiceRPCServer).GetPassengerByCitizenId(ctx, req.(*GetPassengerByCitizenIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassengerServiceRPC_CreatePassenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePassengerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassengerServiceRPCServer).CreatePassenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.PassengerServiceRPC/CreatePassenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassengerServiceRPCServer).CreatePassenger(ctx, req.(*CreatePassengerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassengerServiceRPC_UpdatePassengerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePassengerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassengerServiceRPCServer).UpdatePassengerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.PassengerServiceRPC/UpdatePassengerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassengerServiceRPCServer).UpdatePassengerById(ctx, req.(*UpdatePassengerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassengerServiceRPC_DeletePassenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePassengerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassengerServiceRPCServer).DeletePassenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.PassengerServiceRPC/DeletePassenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassengerServiceRPCServer).DeletePassenger(ctx, req.(*DeletePassengerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PassengerServiceRPC_ServiceDesc is the grpc.ServiceDesc for PassengerServiceRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PassengerServiceRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "training.PassengerServiceRPC",
	HandlerType: (*PassengerServiceRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPassengerByCitizenId",
			Handler:    _PassengerServiceRPC_GetPassengerByCitizenId_Handler,
		},
		{
			MethodName: "CreatePassenger",
			Handler:    _PassengerServiceRPC_CreatePassenger_Handler,
		},
		{
			MethodName: "UpdatePassengerById",
			Handler:    _PassengerServiceRPC_UpdatePassengerById_Handler,
		},
		{
			MethodName: "DeletePassenger",
			Handler:    _PassengerServiceRPC_DeletePassenger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "passenger.proto",
}
