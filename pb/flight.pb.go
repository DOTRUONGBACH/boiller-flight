// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: flight.proto

package pb

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Flight_Status int32

const (
	Flight_Scheduled Flight_Status = 0
	Flight_Delayed   Flight_Status = 1
	Flight_Departed  Flight_Status = 2
	Flight_Arrived   Flight_Status = 3
	Flight_Canceled  Flight_Status = 4
	Flight_Full      Flight_Status = 5
)

// Enum value maps for Flight_Status.
var (
	Flight_Status_name = map[int32]string{
		0: "Scheduled",
		1: "Delayed",
		2: "Departed",
		3: "Arrived",
		4: "Canceled",
		5: "Full",
	}
	Flight_Status_value = map[string]int32{
		"Scheduled": 0,
		"Delayed":   1,
		"Departed":  2,
		"Arrived":   3,
		"Canceled":  4,
		"Full":      5,
	}
)

func (x Flight_Status) Enum() *Flight_Status {
	p := new(Flight_Status)
	*p = x
	return p
}

func (x Flight_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Flight_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_flight_proto_enumTypes[0].Descriptor()
}

func (Flight_Status) Type() protoreflect.EnumType {
	return &file_flight_proto_enumTypes[0]
}

func (x Flight_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Flight_Status.Descriptor instead.
func (Flight_Status) EnumDescriptor() ([]byte, []int) {
	return file_flight_proto_rawDescGZIP(), []int{0, 0}
}

type FlightInput_Status int32

const (
	FlightInput_Scheduled FlightInput_Status = 0
	FlightInput_Delayed   FlightInput_Status = 1
	FlightInput_Departed  FlightInput_Status = 2
	FlightInput_Arrived   FlightInput_Status = 3
	FlightInput_Canceled  FlightInput_Status = 4
	FlightInput_Full      FlightInput_Status = 5
)

// Enum value maps for FlightInput_Status.
var (
	FlightInput_Status_name = map[int32]string{
		0: "Scheduled",
		1: "Delayed",
		2: "Departed",
		3: "Arrived",
		4: "Canceled",
		5: "Full",
	}
	FlightInput_Status_value = map[string]int32{
		"Scheduled": 0,
		"Delayed":   1,
		"Departed":  2,
		"Arrived":   3,
		"Canceled":  4,
		"Full":      5,
	}
)

func (x FlightInput_Status) Enum() *FlightInput_Status {
	p := new(FlightInput_Status)
	*p = x
	return p
}

func (x FlightInput_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlightInput_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_flight_proto_enumTypes[1].Descriptor()
}

func (FlightInput_Status) Type() protoreflect.EnumType {
	return &file_flight_proto_enumTypes[1]
}

func (x FlightInput_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlightInput_Status.Descriptor instead.
func (FlightInput_Status) EnumDescriptor() ([]byte, []int) {
	return file_flight_proto_rawDescGZIP(), []int{1, 0}
}

type UpdateFlightStatusRequest_Status int32

const (
	UpdateFlightStatusRequest_Scheduled UpdateFlightStatusRequest_Status = 0
	UpdateFlightStatusRequest_Delayed   UpdateFlightStatusRequest_Status = 1
	UpdateFlightStatusRequest_Departed  UpdateFlightStatusRequest_Status = 2
	UpdateFlightStatusRequest_Arrived   UpdateFlightStatusRequest_Status = 3
	UpdateFlightStatusRequest_Canceled  UpdateFlightStatusRequest_Status = 4
	UpdateFlightStatusRequest_Full      UpdateFlightStatusRequest_Status = 5
)

// Enum value maps for UpdateFlightStatusRequest_Status.
var (
	UpdateFlightStatusRequest_Status_name = map[int32]string{
		0: "Scheduled",
		1: "Delayed",
		2: "Departed",
		3: "Arrived",
		4: "Canceled",
		5: "Full",
	}
	UpdateFlightStatusRequest_Status_value = map[string]int32{
		"Scheduled": 0,
		"Delayed":   1,
		"Departed":  2,
		"Arrived":   3,
		"Canceled":  4,
		"Full":      5,
	}
)

func (x UpdateFlightStatusRequest_Status) Enum() *UpdateFlightStatusRequest_Status {
	p := new(UpdateFlightStatusRequest_Status)
	*p = x
	return p
}

func (x UpdateFlightStatusRequest_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateFlightStatusRequest_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_flight_proto_enumTypes[2].Descriptor()
}

func (UpdateFlightStatusRequest_Status) Type() protoreflect.EnumType {
	return &file_flight_proto_enumTypes[2]
}

func (x UpdateFlightStatusRequest_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateFlightStatusRequest_Status.Descriptor instead.
func (UpdateFlightStatusRequest_Status) EnumDescriptor() ([]byte, []int) {
	return file_flight_proto_rawDescGZIP(), []int{7, 0}
}

type Flight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FlightCode            string               `protobuf:"bytes,2,opt,name=flight_code,json=flightCode,proto3" json:"flight_code,omitempty"`
	From                  string               `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To                    string               `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	DepartureDate         *timestamp.Timestamp `protobuf:"bytes,5,opt,name=departure_date,json=departureDate,proto3" json:"departure_date,omitempty"`
	DepartureTime         *timestamp.Timestamp `protobuf:"bytes,6,opt,name=departure_time,json=departureTime,proto3" json:"departure_time,omitempty"`
	Duration              int32                `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	Capacity              int32                `protobuf:"varint,8,opt,name=capacity,proto3" json:"capacity,omitempty"`
	EcomomyAvailableSeat  int32                `protobuf:"varint,9,opt,name=ecomomy_available_seat,json=ecomomyAvailableSeat,proto3" json:"ecomomy_available_seat,omitempty"`
	BusinessAvailableSeat int32                `protobuf:"varint,10,opt,name=business_available_seat,json=businessAvailableSeat,proto3" json:"business_available_seat,omitempty"`
	Status                Flight_Status        `protobuf:"varint,11,opt,name=status,proto3,enum=training.Flight_Status" json:"status,omitempty"`
	CreatedAt             *timestamp.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt             *timestamp.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Flight) Reset() {
	*x = Flight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flight_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flight) ProtoMessage() {}

func (x *Flight) ProtoReflect() protoreflect.Message {
	mi := &file_flight_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flight.ProtoReflect.Descriptor instead.
func (*Flight) Descriptor() ([]byte, []int) {
	return file_flight_proto_rawDescGZIP(), []int{0}
}

func (x *Flight) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Flight) GetFlightCode() string {
	if x != nil {
		return x.FlightCode
	}
	return ""
}

func (x *Flight) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Flight) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Flight) GetDepartureDate() *timestamp.Timestamp {
	if x != nil {
		return x.DepartureDate
	}
	return nil
}

func (x *Flight) GetDepartureTime() *timestamp.Timestamp {
	if x != nil {
		return x.DepartureTime
	}
	return nil
}

func (x *Flight) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Flight) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Flight) GetEcomomyAvailableSeat() int32 {
	if x != nil {
		return x.EcomomyAvailableSeat
	}
	return 0
}

func (x *Flight) GetBusinessAvailableSeat() int32 {
	if x != nil {
		return x.BusinessAvailableSeat
	}
	return 0
}

func (x *Flight) GetStatus() Flight_Status {
	if x != nil {
		return x.Status
	}
	return Flight_Scheduled
}

func (x *Flight) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Flight) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type FlightInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightCode            string               `protobuf:"bytes,1,opt,name=flight_code,json=flightCode,proto3" json:"flight_code,omitempty"`
	From                  string               `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To                    string               `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	DepartureDate         *timestamp.Timestamp `protobuf:"bytes,4,opt,name=departure_date,json=departureDate,proto3" json:"departure_date,omitempty"`
	DepartureTime         *timestamp.Timestamp `protobuf:"bytes,5,opt,name=departure_time,json=departureTime,proto3" json:"departure_time,omitempty"`
	Duration              int32                `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	Capacity              int32                `protobuf:"varint,7,opt,name=capacity,proto3" json:"capacity,omitempty"`
	EcomomyAvailableSeat  int32                `protobuf:"varint,8,opt,name=ecomomy_available_seat,json=ecomomyAvailableSeat,proto3" json:"ecomomy_available_seat,omitempty"`
	BusinessAvailableSeat int32                `protobuf:"varint,9,opt,name=business_available_seat,json=businessAvailableSeat,proto3" json:"business_available_seat,omitempty"`
	Status                FlightInput_Status   `protobuf:"varint,10,opt,name=status,proto3,enum=training.FlightInput_Status" json:"status,omitempty"`
}

func (x *FlightInput) Reset() {
	*x = FlightInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flight_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightInput) ProtoMessage() {}

func (x *FlightInput) ProtoReflect() protoreflect.Message {
	mi := &file_flight_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightInput.ProtoReflect.Descriptor instead.
func (*FlightInput) Descriptor() ([]byte, []int) {
	return file_flight_proto_rawDescGZIP(), []int{1}
}

func (x *FlightInput) GetFlightCode() string {
	if x != nil {
		return x.FlightCode
	}
	return ""
}

func (x *FlightInput) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *FlightInput) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *FlightInput) GetDepartureDate() *timestamp.Timestamp {
	if x != nil {
		return x.DepartureDate
	}
	return nil
}

func (x *FlightInput) GetDepartureTime() *timestamp.Timestamp {
	if x != nil {
		return x.DepartureTime
	}
	return nil
}

func (x *FlightInput) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *FlightInput) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *FlightInput) GetEcomomyAvailableSeat() int32 {
	if x != nil {
		return x.EcomomyAvailableSeat
	}
	return 0
}

func (x *FlightInput) GetBusinessAvailableSeat() int32 {
	if x != nil {
		return x.BusinessAvailableSeat
	}
	return 0
}

func (x *FlightInput) GetStatus() FlightInput_Status {
	if x != nil {
		return x.Status
	}
	return FlightInput_Scheduled
}

type GetFlightByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetFlightByIdRequest) Reset() {
	*x = GetFlightByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flight_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlightByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlightByIdRequest) ProtoMessage() {}

func (x *GetFlightByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flight_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlightByIdRequest.ProtoReflect.Descriptor instead.
func (*GetFlightByIdRequest) Descriptor() ([]byte, []int) {
	return file_flight_proto_rawDescGZIP(), []int{2}
}

func (x *GetFlightByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetFlightByFlightCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightCode string `protobuf:"bytes,1,opt,name=flight_code,json=flightCode,proto3" json:"flight_code,omitempty"`
}

func (x *GetFlightByFlightCodeRequest) Reset() {
	*x = GetFlightByFlightCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flight_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlightByFlightCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlightByFlightCodeRequest) ProtoMessage() {}

func (x *GetFlightByFlightCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flight_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlightByFlightCodeRequest.ProtoReflect.Descriptor instead.
func (*GetFlightByFlightCodeRequest) Descriptor() ([]byte, []int) {
	return file_flight_proto_rawDescGZIP(), []int{3}
}

func (x *GetFlightByFlightCodeRequest) GetFlightCode() string {
	if x != nil {
		return x.FlightCode
	}
	return ""
}

type CreateFlightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightInput *FlightInput `protobuf:"bytes,1,opt,name=flightInput,proto3" json:"flightInput,omitempty"`
}

func (x *CreateFlightRequest) Reset() {
	*x = CreateFlightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flight_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlightRequest) ProtoMessage() {}

func (x *CreateFlightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flight_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlightRequest.ProtoReflect.Descriptor instead.
func (*CreateFlightRequest) Descriptor() ([]byte, []int) {
	return file_flight_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFlightRequest) GetFlightInput() *FlightInput {
	if x != nil {
		return x.FlightInput
	}
	return nil
}

type UpdateFlightByFlightCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightInput *FlightInput `protobuf:"bytes,1,opt,name=flightInput,proto3" json:"flightInput,omitempty"`
}

func (x *UpdateFlightByFlightCodeRequest) Reset() {
	*x = UpdateFlightByFlightCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flight_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlightByFlightCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlightByFlightCodeRequest) ProtoMessage() {}

func (x *UpdateFlightByFlightCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flight_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlightByFlightCodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateFlightByFlightCodeRequest) Descriptor() ([]byte, []int) {
	return file_flight_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateFlightByFlightCodeRequest) GetFlightInput() *FlightInput {
	if x != nil {
		return x.FlightInput
	}
	return nil
}

type UpdateFlightAvailableSeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightCode            string `protobuf:"bytes,1,opt,name=flight_code,json=flightCode,proto3" json:"flight_code,omitempty"`
	EcomomyAvailableSeat  int32  `protobuf:"varint,2,opt,name=ecomomy_available_seat,json=ecomomyAvailableSeat,proto3" json:"ecomomy_available_seat,omitempty"`
	BusinessAvailableSeat int32  `protobuf:"varint,3,opt,name=business_available_seat,json=businessAvailableSeat,proto3" json:"business_available_seat,omitempty"`
}

func (x *UpdateFlightAvailableSeatRequest) Reset() {
	*x = UpdateFlightAvailableSeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flight_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlightAvailableSeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlightAvailableSeatRequest) ProtoMessage() {}

func (x *UpdateFlightAvailableSeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flight_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlightAvailableSeatRequest.ProtoReflect.Descriptor instead.
func (*UpdateFlightAvailableSeatRequest) Descriptor() ([]byte, []int) {
	return file_flight_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateFlightAvailableSeatRequest) GetFlightCode() string {
	if x != nil {
		return x.FlightCode
	}
	return ""
}

func (x *UpdateFlightAvailableSeatRequest) GetEcomomyAvailableSeat() int32 {
	if x != nil {
		return x.EcomomyAvailableSeat
	}
	return 0
}

func (x *UpdateFlightAvailableSeatRequest) GetBusinessAvailableSeat() int32 {
	if x != nil {
		return x.BusinessAvailableSeat
	}
	return 0
}

type UpdateFlightStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status UpdateFlightStatusRequest_Status `protobuf:"varint,2,opt,name=status,proto3,enum=training.UpdateFlightStatusRequest_Status" json:"status,omitempty"`
}

func (x *UpdateFlightStatusRequest) Reset() {
	*x = UpdateFlightStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flight_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlightStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlightStatusRequest) ProtoMessage() {}

func (x *UpdateFlightStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flight_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlightStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateFlightStatusRequest) Descriptor() ([]byte, []int) {
	return file_flight_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateFlightStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateFlightStatusRequest) GetStatus() UpdateFlightStatusRequest_Status {
	if x != nil {
		return x.Status
	}
	return UpdateFlightStatusRequest_Scheduled
}

type DeleteFlightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteFlightRequest) Reset() {
	*x = DeleteFlightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flight_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlightRequest) ProtoMessage() {}

func (x *DeleteFlightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flight_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlightRequest.ProtoReflect.Descriptor instead.
func (*DeleteFlightRequest) Descriptor() ([]byte, []int) {
	return file_flight_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteFlightRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteFlightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDeleted bool `protobuf:"varint,1,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
}

func (x *DeleteFlightResponse) Reset() {
	*x = DeleteFlightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flight_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlightResponse) ProtoMessage() {}

func (x *DeleteFlightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flight_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlightResponse.ProtoReflect.Descriptor instead.
func (*DeleteFlightResponse) Descriptor() ([]byte, []int) {
	return file_flight_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteFlightResponse) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

type FindFlightByDateRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstDate  *timestamp.Timestamp `protobuf:"bytes,1,opt,name=first_date,json=firstDate,proto3" json:"first_date,omitempty"`
	SecondDate *timestamp.Timestamp `protobuf:"bytes,2,opt,name=second_date,json=secondDate,proto3" json:"second_date,omitempty"`
}

func (x *FindFlightByDateRangeRequest) Reset() {
	*x = FindFlightByDateRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flight_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFlightByDateRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFlightByDateRangeRequest) ProtoMessage() {}

func (x *FindFlightByDateRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flight_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFlightByDateRangeRequest.ProtoReflect.Descriptor instead.
func (*FindFlightByDateRangeRequest) Descriptor() ([]byte, []int) {
	return file_flight_proto_rawDescGZIP(), []int{10}
}

func (x *FindFlightByDateRangeRequest) GetFirstDate() *timestamp.Timestamp {
	if x != nil {
		return x.FirstDate
	}
	return nil
}

func (x *FindFlightByDateRangeRequest) GetSecondDate() *timestamp.Timestamp {
	if x != nil {
		return x.SecondDate
	}
	return nil
}

type Flights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flights []*Flight `protobuf:"bytes,1,rep,name=flights,proto3" json:"flights,omitempty"`
}

func (x *Flights) Reset() {
	*x = Flights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flight_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flights) ProtoMessage() {}

func (x *Flights) ProtoReflect() protoreflect.Message {
	mi := &file_flight_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flights.ProtoReflect.Descriptor instead.
func (*Flights) Descriptor() ([]byte, []int) {
	return file_flight_proto_rawDescGZIP(), []int{11}
}

func (x *Flights) GetFlights() []*Flight {
	if x != nil {
		return x.Flights
	}
	return nil
}

var File_flight_proto protoreflect.FileDescriptor

var file_flight_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x05, 0x0a, 0x06, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0e,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x63, 0x6f, 0x6d, 0x6f,
	0x6d, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x65, 0x63, 0x6f, 0x6d, 0x6f, 0x6d, 0x79,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x74, 0x12, 0x36, 0x0a,
	0x17, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x61, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x57, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x46,
	0x75, 0x6c, 0x6c, 0x10, 0x05, 0x22, 0x8d, 0x04, 0x0a, 0x0b, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a,
	0x0e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x63, 0x6f, 0x6d,
	0x6f, 0x6d, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x65, 0x63, 0x6f, 0x6d, 0x6f, 0x6d,
	0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x74, 0x12, 0x36,
	0x0a, 0x17, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x61, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x57, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x46,
	0x75, 0x6c, 0x6c, 0x10, 0x05, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x79, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4e,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x5a,
	0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x79,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0b, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x20, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x65, 0x63, 0x6f, 0x6d, 0x6f, 0x6d, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x65, 0x63, 0x6f, 0x6d, 0x6f, 0x6d, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x61, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x74, 0x22, 0xc8,
	0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x57, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x05, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x35, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x22, 0x35, 0x0a, 0x07, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x07,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x32, 0x87, 0x05, 0x0a, 0x10, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x50, 0x43, 0x12, 0x41, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x51, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x79, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x79, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x57, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x42, 0x79, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x29, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x79, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x53, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x61, 0x74, 0x12, 0x2a, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x10, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x4b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4d,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x15, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_flight_proto_rawDescOnce sync.Once
	file_flight_proto_rawDescData = file_flight_proto_rawDesc
)

func file_flight_proto_rawDescGZIP() []byte {
	file_flight_proto_rawDescOnce.Do(func() {
		file_flight_proto_rawDescData = protoimpl.X.CompressGZIP(file_flight_proto_rawDescData)
	})
	return file_flight_proto_rawDescData
}

var file_flight_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_flight_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_flight_proto_goTypes = []interface{}{
	(Flight_Status)(0),                       // 0: training.Flight.Status
	(FlightInput_Status)(0),                  // 1: training.FlightInput.Status
	(UpdateFlightStatusRequest_Status)(0),    // 2: training.UpdateFlightStatusRequest.Status
	(*Flight)(nil),                           // 3: training.Flight
	(*FlightInput)(nil),                      // 4: training.FlightInput
	(*GetFlightByIdRequest)(nil),             // 5: training.GetFlightByIdRequest
	(*GetFlightByFlightCodeRequest)(nil),     // 6: training.GetFlightByFlightCodeRequest
	(*CreateFlightRequest)(nil),              // 7: training.CreateFlightRequest
	(*UpdateFlightByFlightCodeRequest)(nil),  // 8: training.UpdateFlightByFlightCodeRequest
	(*UpdateFlightAvailableSeatRequest)(nil), // 9: training.UpdateFlightAvailableSeatRequest
	(*UpdateFlightStatusRequest)(nil),        // 10: training.UpdateFlightStatusRequest
	(*DeleteFlightRequest)(nil),              // 11: training.DeleteFlightRequest
	(*DeleteFlightResponse)(nil),             // 12: training.DeleteFlightResponse
	(*FindFlightByDateRangeRequest)(nil),     // 13: training.FindFlightByDateRangeRequest
	(*Flights)(nil),                          // 14: training.Flights
	(*timestamp.Timestamp)(nil),              // 15: google.protobuf.Timestamp
}
var file_flight_proto_depIdxs = []int32{
	15, // 0: training.Flight.departure_date:type_name -> google.protobuf.Timestamp
	15, // 1: training.Flight.departure_time:type_name -> google.protobuf.Timestamp
	0,  // 2: training.Flight.status:type_name -> training.Flight.Status
	15, // 3: training.Flight.created_at:type_name -> google.protobuf.Timestamp
	15, // 4: training.Flight.updated_at:type_name -> google.protobuf.Timestamp
	15, // 5: training.FlightInput.departure_date:type_name -> google.protobuf.Timestamp
	15, // 6: training.FlightInput.departure_time:type_name -> google.protobuf.Timestamp
	1,  // 7: training.FlightInput.status:type_name -> training.FlightInput.Status
	4,  // 8: training.CreateFlightRequest.flightInput:type_name -> training.FlightInput
	4,  // 9: training.UpdateFlightByFlightCodeRequest.flightInput:type_name -> training.FlightInput
	2,  // 10: training.UpdateFlightStatusRequest.status:type_name -> training.UpdateFlightStatusRequest.Status
	15, // 11: training.FindFlightByDateRangeRequest.first_date:type_name -> google.protobuf.Timestamp
	15, // 12: training.FindFlightByDateRangeRequest.second_date:type_name -> google.protobuf.Timestamp
	3,  // 13: training.Flights.flights:type_name -> training.Flight
	5,  // 14: training.FlightServiceRPC.GetFlightById:input_type -> training.GetFlightByIdRequest
	6,  // 15: training.FlightServiceRPC.GetFlightByFlightCode:input_type -> training.GetFlightByFlightCodeRequest
	7,  // 16: training.FlightServiceRPC.CreateFlight:input_type -> training.CreateFlightRequest
	8,  // 17: training.FlightServiceRPC.UpdateFlightByFlightCode:input_type -> training.UpdateFlightByFlightCodeRequest
	9,  // 18: training.FlightServiceRPC.UpdateAvailableSeat:input_type -> training.UpdateFlightAvailableSeatRequest
	10, // 19: training.FlightServiceRPC.UpdateFlightStatus:input_type -> training.UpdateFlightStatusRequest
	11, // 20: training.FlightServiceRPC.DeleteFlight:input_type -> training.DeleteFlightRequest
	13, // 21: training.FlightServiceRPC.FindFlightByDateRange:input_type -> training.FindFlightByDateRangeRequest
	3,  // 22: training.FlightServiceRPC.GetFlightById:output_type -> training.Flight
	3,  // 23: training.FlightServiceRPC.GetFlightByFlightCode:output_type -> training.Flight
	3,  // 24: training.FlightServiceRPC.CreateFlight:output_type -> training.Flight
	3,  // 25: training.FlightServiceRPC.UpdateFlightByFlightCode:output_type -> training.Flight
	3,  // 26: training.FlightServiceRPC.UpdateAvailableSeat:output_type -> training.Flight
	3,  // 27: training.FlightServiceRPC.UpdateFlightStatus:output_type -> training.Flight
	12, // 28: training.FlightServiceRPC.DeleteFlight:output_type -> training.DeleteFlightResponse
	14, // 29: training.FlightServiceRPC.FindFlightByDateRange:output_type -> training.Flights
	22, // [22:30] is the sub-list for method output_type
	14, // [14:22] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_flight_proto_init() }
func file_flight_proto_init() {
	if File_flight_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flight_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flight_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flight_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlightByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flight_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlightByFlightCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flight_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flight_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlightByFlightCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flight_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlightAvailableSeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flight_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlightStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flight_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flight_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flight_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFlightByDateRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flight_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flight_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flight_proto_goTypes,
		DependencyIndexes: file_flight_proto_depIdxs,
		EnumInfos:         file_flight_proto_enumTypes,
		MessageInfos:      file_flight_proto_msgTypes,
	}.Build()
	File_flight_proto = out.File
	file_flight_proto_rawDesc = nil
	file_flight_proto_goTypes = nil
	file_flight_proto_depIdxs = nil
}
