// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: account.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceRPCClient is the client API for AccountServiceRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceRPCClient interface {
	GetAccountByID(ctx context.Context, in *GetAccountByIdRequest, opts ...grpc.CallOption) (*Account, error)
	GetAccountByEmail(ctx context.Context, in *GetAccountByEmailRequest, opts ...grpc.CallOption) (*Account, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	UpdateAccountStatus(ctx context.Context, in *UpdateAccountStatusRequest, opts ...grpc.CallOption) (*Account, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	AccountResetPassword(ctx context.Context, in *AccountResetPasswordRequest, opts ...grpc.CallOption) (*AccountResetPasswordResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type accountServiceRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceRPCClient(cc grpc.ClientConnInterface) AccountServiceRPCClient {
	return &accountServiceRPCClient{cc}
}

func (c *accountServiceRPCClient) GetAccountByID(ctx context.Context, in *GetAccountByIdRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/training.AccountServiceRPC/GetAccountByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceRPCClient) GetAccountByEmail(ctx context.Context, in *GetAccountByEmailRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/training.AccountServiceRPC/GetAccountByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceRPCClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/training.AccountServiceRPC/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceRPCClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/training.AccountServiceRPC/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceRPCClient) UpdateAccountStatus(ctx context.Context, in *UpdateAccountStatusRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/training.AccountServiceRPC/UpdateAccountStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceRPCClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, "/training.AccountServiceRPC/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceRPCClient) AccountResetPassword(ctx context.Context, in *AccountResetPasswordRequest, opts ...grpc.CallOption) (*AccountResetPasswordResponse, error) {
	out := new(AccountResetPasswordResponse)
	err := c.cc.Invoke(ctx, "/training.AccountServiceRPC/AccountResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceRPCClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/training.AccountServiceRPC/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceRPCServer is the server API for AccountServiceRPC service.
// All implementations must embed UnimplementedAccountServiceRPCServer
// for forward compatibility
type AccountServiceRPCServer interface {
	GetAccountByID(context.Context, *GetAccountByIdRequest) (*Account, error)
	GetAccountByEmail(context.Context, *GetAccountByEmailRequest) (*Account, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*Account, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*Account, error)
	UpdateAccountStatus(context.Context, *UpdateAccountStatusRequest) (*Account, error)
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	AccountResetPassword(context.Context, *AccountResetPasswordRequest) (*AccountResetPasswordResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedAccountServiceRPCServer()
}

// UnimplementedAccountServiceRPCServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceRPCServer struct {
}

func (UnimplementedAccountServiceRPCServer) GetAccountByID(context.Context, *GetAccountByIdRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByID not implemented")
}
func (UnimplementedAccountServiceRPCServer) GetAccountByEmail(context.Context, *GetAccountByEmailRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByEmail not implemented")
}
func (UnimplementedAccountServiceRPCServer) CreateAccount(context.Context, *CreateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountServiceRPCServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedAccountServiceRPCServer) UpdateAccountStatus(context.Context, *UpdateAccountStatusRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountStatus not implemented")
}
func (UnimplementedAccountServiceRPCServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedAccountServiceRPCServer) AccountResetPassword(context.Context, *AccountResetPasswordRequest) (*AccountResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetPassword not implemented")
}
func (UnimplementedAccountServiceRPCServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAccountServiceRPCServer) mustEmbedUnimplementedAccountServiceRPCServer() {}

// UnsafeAccountServiceRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceRPCServer will
// result in compilation errors.
type UnsafeAccountServiceRPCServer interface {
	mustEmbedUnimplementedAccountServiceRPCServer()
}

func RegisterAccountServiceRPCServer(s grpc.ServiceRegistrar, srv AccountServiceRPCServer) {
	s.RegisterService(&AccountServiceRPC_ServiceDesc, srv)
}

func _AccountServiceRPC_GetAccountByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceRPCServer).GetAccountByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.AccountServiceRPC/GetAccountByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceRPCServer).GetAccountByID(ctx, req.(*GetAccountByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServiceRPC_GetAccountByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceRPCServer).GetAccountByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.AccountServiceRPC/GetAccountByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceRPCServer).GetAccountByEmail(ctx, req.(*GetAccountByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServiceRPC_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceRPCServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.AccountServiceRPC/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceRPCServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServiceRPC_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceRPCServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.AccountServiceRPC/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceRPCServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServiceRPC_UpdateAccountStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceRPCServer).UpdateAccountStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.AccountServiceRPC/UpdateAccountStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceRPCServer).UpdateAccountStatus(ctx, req.(*UpdateAccountStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServiceRPC_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceRPCServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.AccountServiceRPC/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceRPCServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServiceRPC_AccountResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceRPCServer).AccountResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.AccountServiceRPC/AccountResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceRPCServer).AccountResetPassword(ctx, req.(*AccountResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServiceRPC_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceRPCServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.AccountServiceRPC/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceRPCServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountServiceRPC_ServiceDesc is the grpc.ServiceDesc for AccountServiceRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountServiceRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "training.AccountServiceRPC",
	HandlerType: (*AccountServiceRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountByID",
			Handler:    _AccountServiceRPC_GetAccountByID_Handler,
		},
		{
			MethodName: "GetAccountByEmail",
			Handler:    _AccountServiceRPC_GetAccountByEmail_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AccountServiceRPC_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountServiceRPC_UpdateAccount_Handler,
		},
		{
			MethodName: "UpdateAccountStatus",
			Handler:    _AccountServiceRPC_UpdateAccountStatus_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _AccountServiceRPC_DeleteAccount_Handler,
		},
		{
			MethodName: "AccountResetPassword",
			Handler:    _AccountServiceRPC_AccountResetPassword_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AccountServiceRPC_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
