// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: ticketOwner.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicketOwnerServiceRPCClient is the client API for TicketOwnerServiceRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketOwnerServiceRPCClient interface {
	GetTicketOwnerById(ctx context.Context, in *GetTicketOwnerByIdRequest, opts ...grpc.CallOption) (*TicketOwner, error)
	CreateTicketOwner(ctx context.Context, in *CreateTicketOwnerRequest, opts ...grpc.CallOption) (*TicketOwner, error)
	UpdateTicketOwnerById(ctx context.Context, in *UpdateTicketOwnerByIdRequest, opts ...grpc.CallOption) (*TicketOwner, error)
	DeleteTicketOwner(ctx context.Context, in *DeleteTicketOwnerRequest, opts ...grpc.CallOption) (*DeleteTicketOwnerResponse, error)
}

type ticketOwnerServiceRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketOwnerServiceRPCClient(cc grpc.ClientConnInterface) TicketOwnerServiceRPCClient {
	return &ticketOwnerServiceRPCClient{cc}
}

func (c *ticketOwnerServiceRPCClient) GetTicketOwnerById(ctx context.Context, in *GetTicketOwnerByIdRequest, opts ...grpc.CallOption) (*TicketOwner, error) {
	out := new(TicketOwner)
	err := c.cc.Invoke(ctx, "/training.TicketOwnerServiceRPC/GetTicketOwnerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketOwnerServiceRPCClient) CreateTicketOwner(ctx context.Context, in *CreateTicketOwnerRequest, opts ...grpc.CallOption) (*TicketOwner, error) {
	out := new(TicketOwner)
	err := c.cc.Invoke(ctx, "/training.TicketOwnerServiceRPC/CreateTicketOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketOwnerServiceRPCClient) UpdateTicketOwnerById(ctx context.Context, in *UpdateTicketOwnerByIdRequest, opts ...grpc.CallOption) (*TicketOwner, error) {
	out := new(TicketOwner)
	err := c.cc.Invoke(ctx, "/training.TicketOwnerServiceRPC/UpdateTicketOwnerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketOwnerServiceRPCClient) DeleteTicketOwner(ctx context.Context, in *DeleteTicketOwnerRequest, opts ...grpc.CallOption) (*DeleteTicketOwnerResponse, error) {
	out := new(DeleteTicketOwnerResponse)
	err := c.cc.Invoke(ctx, "/training.TicketOwnerServiceRPC/DeleteTicketOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketOwnerServiceRPCServer is the server API for TicketOwnerServiceRPC service.
// All implementations must embed UnimplementedTicketOwnerServiceRPCServer
// for forward compatibility
type TicketOwnerServiceRPCServer interface {
	GetTicketOwnerById(context.Context, *GetTicketOwnerByIdRequest) (*TicketOwner, error)
	CreateTicketOwner(context.Context, *CreateTicketOwnerRequest) (*TicketOwner, error)
	UpdateTicketOwnerById(context.Context, *UpdateTicketOwnerByIdRequest) (*TicketOwner, error)
	DeleteTicketOwner(context.Context, *DeleteTicketOwnerRequest) (*DeleteTicketOwnerResponse, error)
	mustEmbedUnimplementedTicketOwnerServiceRPCServer()
}

// UnimplementedTicketOwnerServiceRPCServer must be embedded to have forward compatible implementations.
type UnimplementedTicketOwnerServiceRPCServer struct {
}

func (UnimplementedTicketOwnerServiceRPCServer) GetTicketOwnerById(context.Context, *GetTicketOwnerByIdRequest) (*TicketOwner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketOwnerById not implemented")
}
func (UnimplementedTicketOwnerServiceRPCServer) CreateTicketOwner(context.Context, *CreateTicketOwnerRequest) (*TicketOwner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicketOwner not implemented")
}
func (UnimplementedTicketOwnerServiceRPCServer) UpdateTicketOwnerById(context.Context, *UpdateTicketOwnerByIdRequest) (*TicketOwner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicketOwnerById not implemented")
}
func (UnimplementedTicketOwnerServiceRPCServer) DeleteTicketOwner(context.Context, *DeleteTicketOwnerRequest) (*DeleteTicketOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicketOwner not implemented")
}
func (UnimplementedTicketOwnerServiceRPCServer) mustEmbedUnimplementedTicketOwnerServiceRPCServer() {}

// UnsafeTicketOwnerServiceRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketOwnerServiceRPCServer will
// result in compilation errors.
type UnsafeTicketOwnerServiceRPCServer interface {
	mustEmbedUnimplementedTicketOwnerServiceRPCServer()
}

func RegisterTicketOwnerServiceRPCServer(s grpc.ServiceRegistrar, srv TicketOwnerServiceRPCServer) {
	s.RegisterService(&TicketOwnerServiceRPC_ServiceDesc, srv)
}

func _TicketOwnerServiceRPC_GetTicketOwnerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketOwnerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketOwnerServiceRPCServer).GetTicketOwnerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.TicketOwnerServiceRPC/GetTicketOwnerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketOwnerServiceRPCServer).GetTicketOwnerById(ctx, req.(*GetTicketOwnerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketOwnerServiceRPC_CreateTicketOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketOwnerServiceRPCServer).CreateTicketOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.TicketOwnerServiceRPC/CreateTicketOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketOwnerServiceRPCServer).CreateTicketOwner(ctx, req.(*CreateTicketOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketOwnerServiceRPC_UpdateTicketOwnerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTicketOwnerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketOwnerServiceRPCServer).UpdateTicketOwnerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.TicketOwnerServiceRPC/UpdateTicketOwnerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketOwnerServiceRPCServer).UpdateTicketOwnerById(ctx, req.(*UpdateTicketOwnerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketOwnerServiceRPC_DeleteTicketOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketOwnerServiceRPCServer).DeleteTicketOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.TicketOwnerServiceRPC/DeleteTicketOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketOwnerServiceRPCServer).DeleteTicketOwner(ctx, req.(*DeleteTicketOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketOwnerServiceRPC_ServiceDesc is the grpc.ServiceDesc for TicketOwnerServiceRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketOwnerServiceRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "training.TicketOwnerServiceRPC",
	HandlerType: (*TicketOwnerServiceRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTicketOwnerById",
			Handler:    _TicketOwnerServiceRPC_GetTicketOwnerById_Handler,
		},
		{
			MethodName: "CreateTicketOwner",
			Handler:    _TicketOwnerServiceRPC_CreateTicketOwner_Handler,
		},
		{
			MethodName: "UpdateTicketOwnerById",
			Handler:    _TicketOwnerServiceRPC_UpdateTicketOwnerById_Handler,
		},
		{
			MethodName: "DeleteTicketOwner",
			Handler:    _TicketOwnerServiceRPC_DeleteTicketOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticketOwner.proto",
}
