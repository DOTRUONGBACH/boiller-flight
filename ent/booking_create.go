// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mock_project/ent/booking"
	"mock_project/ent/customer"
	"mock_project/ent/flight"
	"mock_project/ent/passenger"
	"mock_project/ent/ticket"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BookingCreate is the builder for creating a Booking entity.
type BookingCreate struct {
	config
	mutation *BookingMutation
	hooks    []Hook
}

// SetFlightID sets the "flight_id" field.
func (bc *BookingCreate) SetFlightID(u uuid.UUID) *BookingCreate {
	bc.mutation.SetFlightID(u)
	return bc
}

// SetCustomerID sets the "customer_id" field.
func (bc *BookingCreate) SetCustomerID(u uuid.UUID) *BookingCreate {
	bc.mutation.SetCustomerID(u)
	return bc
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (bc *BookingCreate) SetNillableCustomerID(u *uuid.UUID) *BookingCreate {
	if u != nil {
		bc.SetCustomerID(*u)
	}
	return bc
}

// SetPassengerID sets the "passenger_id" field.
func (bc *BookingCreate) SetPassengerID(u uuid.UUID) *BookingCreate {
	bc.mutation.SetPassengerID(u)
	return bc
}

// SetNillablePassengerID sets the "passenger_id" field if the given value is not nil.
func (bc *BookingCreate) SetNillablePassengerID(u *uuid.UUID) *BookingCreate {
	if u != nil {
		bc.SetPassengerID(*u)
	}
	return bc
}

// SetEconomyTickets sets the "economy_tickets" field.
func (bc *BookingCreate) SetEconomyTickets(i int) *BookingCreate {
	bc.mutation.SetEconomyTickets(i)
	return bc
}

// SetNillableEconomyTickets sets the "economy_tickets" field if the given value is not nil.
func (bc *BookingCreate) SetNillableEconomyTickets(i *int) *BookingCreate {
	if i != nil {
		bc.SetEconomyTickets(*i)
	}
	return bc
}

// SetBusinessTickets sets the "business_tickets" field.
func (bc *BookingCreate) SetBusinessTickets(i int) *BookingCreate {
	bc.mutation.SetBusinessTickets(i)
	return bc
}

// SetNillableBusinessTickets sets the "business_tickets" field if the given value is not nil.
func (bc *BookingCreate) SetNillableBusinessTickets(i *int) *BookingCreate {
	if i != nil {
		bc.SetBusinessTickets(*i)
	}
	return bc
}

// SetStatus sets the "status" field.
func (bc *BookingCreate) SetStatus(b booking.Status) *BookingCreate {
	bc.mutation.SetStatus(b)
	return bc
}

// SetType sets the "type" field.
func (bc *BookingCreate) SetType(b booking.Type) *BookingCreate {
	bc.mutation.SetType(b)
	return bc
}

// SetCreatedAt sets the "created_at" field.
func (bc *BookingCreate) SetCreatedAt(t time.Time) *BookingCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BookingCreate) SetNillableCreatedAt(t *time.Time) *BookingCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BookingCreate) SetUpdatedAt(t time.Time) *BookingCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BookingCreate) SetNillableUpdatedAt(t *time.Time) *BookingCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BookingCreate) SetID(u uuid.UUID) *BookingCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BookingCreate) SetNillableID(u *uuid.UUID) *BookingCreate {
	if u != nil {
		bc.SetID(*u)
	}
	return bc
}

// SetBookingFlightID sets the "booking_flight" edge to the Flight entity by ID.
func (bc *BookingCreate) SetBookingFlightID(id uuid.UUID) *BookingCreate {
	bc.mutation.SetBookingFlightID(id)
	return bc
}

// SetBookingFlight sets the "booking_flight" edge to the Flight entity.
func (bc *BookingCreate) SetBookingFlight(f *Flight) *BookingCreate {
	return bc.SetBookingFlightID(f.ID)
}

// SetCustomerBookingTicketsID sets the "customer_booking_tickets" edge to the Customer entity by ID.
func (bc *BookingCreate) SetCustomerBookingTicketsID(id uuid.UUID) *BookingCreate {
	bc.mutation.SetCustomerBookingTicketsID(id)
	return bc
}

// SetNillableCustomerBookingTicketsID sets the "customer_booking_tickets" edge to the Customer entity by ID if the given value is not nil.
func (bc *BookingCreate) SetNillableCustomerBookingTicketsID(id *uuid.UUID) *BookingCreate {
	if id != nil {
		bc = bc.SetCustomerBookingTicketsID(*id)
	}
	return bc
}

// SetCustomerBookingTickets sets the "customer_booking_tickets" edge to the Customer entity.
func (bc *BookingCreate) SetCustomerBookingTickets(c *Customer) *BookingCreate {
	return bc.SetCustomerBookingTicketsID(c.ID)
}

// SetPassengerBookingTicketsID sets the "passenger_booking_tickets" edge to the Passenger entity by ID.
func (bc *BookingCreate) SetPassengerBookingTicketsID(id uuid.UUID) *BookingCreate {
	bc.mutation.SetPassengerBookingTicketsID(id)
	return bc
}

// SetNillablePassengerBookingTicketsID sets the "passenger_booking_tickets" edge to the Passenger entity by ID if the given value is not nil.
func (bc *BookingCreate) SetNillablePassengerBookingTicketsID(id *uuid.UUID) *BookingCreate {
	if id != nil {
		bc = bc.SetPassengerBookingTicketsID(*id)
	}
	return bc
}

// SetPassengerBookingTickets sets the "passenger_booking_tickets" edge to the Passenger entity.
func (bc *BookingCreate) SetPassengerBookingTickets(p *Passenger) *BookingCreate {
	return bc.SetPassengerBookingTicketsID(p.ID)
}

// AddBookingTicketIDs adds the "booking_tickets" edge to the Ticket entity by IDs.
func (bc *BookingCreate) AddBookingTicketIDs(ids ...uuid.UUID) *BookingCreate {
	bc.mutation.AddBookingTicketIDs(ids...)
	return bc
}

// AddBookingTickets adds the "booking_tickets" edges to the Ticket entity.
func (bc *BookingCreate) AddBookingTickets(t ...*Ticket) *BookingCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bc.AddBookingTicketIDs(ids...)
}

// Mutation returns the BookingMutation object of the builder.
func (bc *BookingCreate) Mutation() *BookingMutation {
	return bc.mutation
}

// Save creates the Booking in the database.
func (bc *BookingCreate) Save(ctx context.Context) (*Booking, error) {
	var (
		err  error
		node *Booking
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Booking)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BookingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BookingCreate) SaveX(ctx context.Context) *Booking {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BookingCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BookingCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BookingCreate) defaults() {
	if _, ok := bc.mutation.EconomyTickets(); !ok {
		v := booking.DefaultEconomyTickets
		bc.mutation.SetEconomyTickets(v)
	}
	if _, ok := bc.mutation.BusinessTickets(); !ok {
		v := booking.DefaultBusinessTickets
		bc.mutation.SetBusinessTickets(v)
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := booking.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := booking.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := booking.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BookingCreate) check() error {
	if _, ok := bc.mutation.FlightID(); !ok {
		return &ValidationError{Name: "flight_id", err: errors.New(`ent: missing required field "Booking.flight_id"`)}
	}
	if _, ok := bc.mutation.EconomyTickets(); !ok {
		return &ValidationError{Name: "economy_tickets", err: errors.New(`ent: missing required field "Booking.economy_tickets"`)}
	}
	if v, ok := bc.mutation.EconomyTickets(); ok {
		if err := booking.EconomyTicketsValidator(v); err != nil {
			return &ValidationError{Name: "economy_tickets", err: fmt.Errorf(`ent: validator failed for field "Booking.economy_tickets": %w`, err)}
		}
	}
	if _, ok := bc.mutation.BusinessTickets(); !ok {
		return &ValidationError{Name: "business_tickets", err: errors.New(`ent: missing required field "Booking.business_tickets"`)}
	}
	if v, ok := bc.mutation.BusinessTickets(); ok {
		if err := booking.BusinessTicketsValidator(v); err != nil {
			return &ValidationError{Name: "business_tickets", err: fmt.Errorf(`ent: validator failed for field "Booking.business_tickets": %w`, err)}
		}
	}
	if _, ok := bc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Booking.status"`)}
	}
	if v, ok := bc.mutation.Status(); ok {
		if err := booking.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Booking.status": %w`, err)}
		}
	}
	if _, ok := bc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Booking.type"`)}
	}
	if v, ok := bc.mutation.GetType(); ok {
		if err := booking.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Booking.type": %w`, err)}
		}
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Booking.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Booking.updated_at"`)}
	}
	if _, ok := bc.mutation.BookingFlightID(); !ok {
		return &ValidationError{Name: "booking_flight", err: errors.New(`ent: missing required edge "Booking.booking_flight"`)}
	}
	return nil
}

func (bc *BookingCreate) sqlSave(ctx context.Context) (*Booking, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (bc *BookingCreate) createSpec() (*Booking, *sqlgraph.CreateSpec) {
	var (
		_node = &Booking{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: booking.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: booking.FieldID,
			},
		}
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.EconomyTickets(); ok {
		_spec.SetField(booking.FieldEconomyTickets, field.TypeInt, value)
		_node.EconomyTickets = value
	}
	if value, ok := bc.mutation.BusinessTickets(); ok {
		_spec.SetField(booking.FieldBusinessTickets, field.TypeInt, value)
		_node.BusinessTickets = value
	}
	if value, ok := bc.mutation.Status(); ok {
		_spec.SetField(booking.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := bc.mutation.GetType(); ok {
		_spec.SetField(booking.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(booking.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(booking.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bc.mutation.BookingFlightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.BookingFlightTable,
			Columns: []string{booking.BookingFlightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FlightID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.CustomerBookingTicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.CustomerBookingTicketsTable,
			Columns: []string{booking.CustomerBookingTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.PassengerBookingTicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.PassengerBookingTicketsTable,
			Columns: []string{booking.PassengerBookingTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: passenger.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PassengerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.BookingTicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   booking.BookingTicketsTable,
			Columns: []string{booking.BookingTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BookingCreateBulk is the builder for creating many Booking entities in bulk.
type BookingCreateBulk struct {
	config
	builders []*BookingCreate
}

// Save creates the Booking entities in the database.
func (bcb *BookingCreateBulk) Save(ctx context.Context) ([]*Booking, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Booking, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BookingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BookingCreateBulk) SaveX(ctx context.Context) []*Booking {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BookingCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BookingCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
