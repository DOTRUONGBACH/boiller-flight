// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mock_project/ent/customer"
	"mock_project/ent/passenger"
	"mock_project/ent/ticket"
	"mock_project/ent/ticketowner"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TicketOwnerCreate is the builder for creating a TicketOwner entity.
type TicketOwnerCreate struct {
	config
	mutation *TicketOwnerMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (toc *TicketOwnerCreate) SetCreatedAt(t time.Time) *TicketOwnerCreate {
	toc.mutation.SetCreatedAt(t)
	return toc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (toc *TicketOwnerCreate) SetNillableCreatedAt(t *time.Time) *TicketOwnerCreate {
	if t != nil {
		toc.SetCreatedAt(*t)
	}
	return toc
}

// SetUpdatedAt sets the "updated_at" field.
func (toc *TicketOwnerCreate) SetUpdatedAt(t time.Time) *TicketOwnerCreate {
	toc.mutation.SetUpdatedAt(t)
	return toc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (toc *TicketOwnerCreate) SetNillableUpdatedAt(t *time.Time) *TicketOwnerCreate {
	if t != nil {
		toc.SetUpdatedAt(*t)
	}
	return toc
}

// SetID sets the "id" field.
func (toc *TicketOwnerCreate) SetID(u uuid.UUID) *TicketOwnerCreate {
	toc.mutation.SetID(u)
	return toc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (toc *TicketOwnerCreate) SetNillableID(u *uuid.UUID) *TicketOwnerCreate {
	if u != nil {
		toc.SetID(*u)
	}
	return toc
}

// SetTicketID sets the "ticket" edge to the Ticket entity by ID.
func (toc *TicketOwnerCreate) SetTicketID(id uuid.UUID) *TicketOwnerCreate {
	toc.mutation.SetTicketID(id)
	return toc
}

// SetNillableTicketID sets the "ticket" edge to the Ticket entity by ID if the given value is not nil.
func (toc *TicketOwnerCreate) SetNillableTicketID(id *uuid.UUID) *TicketOwnerCreate {
	if id != nil {
		toc = toc.SetTicketID(*id)
	}
	return toc
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (toc *TicketOwnerCreate) SetTicket(t *Ticket) *TicketOwnerCreate {
	return toc.SetTicketID(t.ID)
}

// SetCustomerOwnerID sets the "customer_owner" edge to the Customer entity by ID.
func (toc *TicketOwnerCreate) SetCustomerOwnerID(id uuid.UUID) *TicketOwnerCreate {
	toc.mutation.SetCustomerOwnerID(id)
	return toc
}

// SetNillableCustomerOwnerID sets the "customer_owner" edge to the Customer entity by ID if the given value is not nil.
func (toc *TicketOwnerCreate) SetNillableCustomerOwnerID(id *uuid.UUID) *TicketOwnerCreate {
	if id != nil {
		toc = toc.SetCustomerOwnerID(*id)
	}
	return toc
}

// SetCustomerOwner sets the "customer_owner" edge to the Customer entity.
func (toc *TicketOwnerCreate) SetCustomerOwner(c *Customer) *TicketOwnerCreate {
	return toc.SetCustomerOwnerID(c.ID)
}

// SetPassengerOwnerID sets the "passenger_owner" edge to the Passenger entity by ID.
func (toc *TicketOwnerCreate) SetPassengerOwnerID(id uuid.UUID) *TicketOwnerCreate {
	toc.mutation.SetPassengerOwnerID(id)
	return toc
}

// SetNillablePassengerOwnerID sets the "passenger_owner" edge to the Passenger entity by ID if the given value is not nil.
func (toc *TicketOwnerCreate) SetNillablePassengerOwnerID(id *uuid.UUID) *TicketOwnerCreate {
	if id != nil {
		toc = toc.SetPassengerOwnerID(*id)
	}
	return toc
}

// SetPassengerOwner sets the "passenger_owner" edge to the Passenger entity.
func (toc *TicketOwnerCreate) SetPassengerOwner(p *Passenger) *TicketOwnerCreate {
	return toc.SetPassengerOwnerID(p.ID)
}

// Mutation returns the TicketOwnerMutation object of the builder.
func (toc *TicketOwnerCreate) Mutation() *TicketOwnerMutation {
	return toc.mutation
}

// Save creates the TicketOwner in the database.
func (toc *TicketOwnerCreate) Save(ctx context.Context) (*TicketOwner, error) {
	var (
		err  error
		node *TicketOwner
	)
	toc.defaults()
	if len(toc.hooks) == 0 {
		if err = toc.check(); err != nil {
			return nil, err
		}
		node, err = toc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TicketOwnerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = toc.check(); err != nil {
				return nil, err
			}
			toc.mutation = mutation
			if node, err = toc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(toc.hooks) - 1; i >= 0; i-- {
			if toc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = toc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, toc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TicketOwner)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TicketOwnerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (toc *TicketOwnerCreate) SaveX(ctx context.Context) *TicketOwner {
	v, err := toc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (toc *TicketOwnerCreate) Exec(ctx context.Context) error {
	_, err := toc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (toc *TicketOwnerCreate) ExecX(ctx context.Context) {
	if err := toc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (toc *TicketOwnerCreate) defaults() {
	if _, ok := toc.mutation.CreatedAt(); !ok {
		v := ticketowner.DefaultCreatedAt()
		toc.mutation.SetCreatedAt(v)
	}
	if _, ok := toc.mutation.UpdatedAt(); !ok {
		v := ticketowner.DefaultUpdatedAt()
		toc.mutation.SetUpdatedAt(v)
	}
	if _, ok := toc.mutation.ID(); !ok {
		v := ticketowner.DefaultID()
		toc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (toc *TicketOwnerCreate) check() error {
	if _, ok := toc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TicketOwner.created_at"`)}
	}
	if _, ok := toc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TicketOwner.updated_at"`)}
	}
	return nil
}

func (toc *TicketOwnerCreate) sqlSave(ctx context.Context) (*TicketOwner, error) {
	_node, _spec := toc.createSpec()
	if err := sqlgraph.CreateNode(ctx, toc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (toc *TicketOwnerCreate) createSpec() (*TicketOwner, *sqlgraph.CreateSpec) {
	var (
		_node = &TicketOwner{config: toc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ticketowner.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: ticketowner.FieldID,
			},
		}
	)
	if id, ok := toc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := toc.mutation.CreatedAt(); ok {
		_spec.SetField(ticketowner.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := toc.mutation.UpdatedAt(); ok {
		_spec.SetField(ticketowner.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := toc.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ticketowner.TicketTable,
			Columns: []string{ticketowner.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := toc.mutation.CustomerOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ticketowner.CustomerOwnerTable,
			Columns: []string{ticketowner.CustomerOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.customer_ticket = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := toc.mutation.PassengerOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ticketowner.PassengerOwnerTable,
			Columns: []string{ticketowner.PassengerOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: passenger.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.passenger_ticket = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TicketOwnerCreateBulk is the builder for creating many TicketOwner entities in bulk.
type TicketOwnerCreateBulk struct {
	config
	builders []*TicketOwnerCreate
}

// Save creates the TicketOwner entities in the database.
func (tocb *TicketOwnerCreateBulk) Save(ctx context.Context) ([]*TicketOwner, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tocb.builders))
	nodes := make([]*TicketOwner, len(tocb.builders))
	mutators := make([]Mutator, len(tocb.builders))
	for i := range tocb.builders {
		func(i int, root context.Context) {
			builder := tocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TicketOwnerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tocb *TicketOwnerCreateBulk) SaveX(ctx context.Context) []*TicketOwner {
	v, err := tocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tocb *TicketOwnerCreateBulk) Exec(ctx context.Context) error {
	_, err := tocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tocb *TicketOwnerCreateBulk) ExecX(ctx context.Context) {
	if err := tocb.Exec(ctx); err != nil {
		panic(err)
	}
}
