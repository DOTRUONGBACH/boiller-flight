// Code generated by ent, DO NOT EDIT.

package ent

import (
	"mock_project/ent/account"
	"mock_project/ent/booking"
	"mock_project/ent/customer"
	"mock_project/ent/flight"
	"mock_project/ent/passenger"
	"mock_project/ent/schema"
	"mock_project/ent/ticket"
	"mock_project/ent/ticketowner"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	accountFields := schema.Account{}.Fields()
	_ = accountFields
	// accountDescCreatedAt is the schema descriptor for created_at field.
	accountDescCreatedAt := accountFields[5].Descriptor()
	// account.DefaultCreatedAt holds the default value on creation for the created_at field.
	account.DefaultCreatedAt = accountDescCreatedAt.Default.(func() time.Time)
	// accountDescUpdatedAt is the schema descriptor for updated_at field.
	accountDescUpdatedAt := accountFields[6].Descriptor()
	// account.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	account.DefaultUpdatedAt = accountDescUpdatedAt.Default.(func() time.Time)
	// account.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	account.UpdateDefaultUpdatedAt = accountDescUpdatedAt.UpdateDefault.(func() time.Time)
	// accountDescID is the schema descriptor for id field.
	accountDescID := accountFields[0].Descriptor()
	// account.DefaultID holds the default value on creation for the id field.
	account.DefaultID = accountDescID.Default.(func() uuid.UUID)
	bookingFields := schema.Booking{}.Fields()
	_ = bookingFields
	// bookingDescEconomyTickets is the schema descriptor for economy_tickets field.
	bookingDescEconomyTickets := bookingFields[4].Descriptor()
	// booking.DefaultEconomyTickets holds the default value on creation for the economy_tickets field.
	booking.DefaultEconomyTickets = bookingDescEconomyTickets.Default.(int)
	// booking.EconomyTicketsValidator is a validator for the "economy_tickets" field. It is called by the builders before save.
	booking.EconomyTicketsValidator = bookingDescEconomyTickets.Validators[0].(func(int) error)
	// bookingDescBusinessTickets is the schema descriptor for business_tickets field.
	bookingDescBusinessTickets := bookingFields[5].Descriptor()
	// booking.DefaultBusinessTickets holds the default value on creation for the business_tickets field.
	booking.DefaultBusinessTickets = bookingDescBusinessTickets.Default.(int)
	// booking.BusinessTicketsValidator is a validator for the "business_tickets" field. It is called by the builders before save.
	booking.BusinessTicketsValidator = bookingDescBusinessTickets.Validators[0].(func(int) error)
	// bookingDescCreatedAt is the schema descriptor for created_at field.
	bookingDescCreatedAt := bookingFields[8].Descriptor()
	// booking.DefaultCreatedAt holds the default value on creation for the created_at field.
	booking.DefaultCreatedAt = bookingDescCreatedAt.Default.(func() time.Time)
	// bookingDescUpdatedAt is the schema descriptor for updated_at field.
	bookingDescUpdatedAt := bookingFields[9].Descriptor()
	// booking.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	booking.DefaultUpdatedAt = bookingDescUpdatedAt.Default.(func() time.Time)
	// booking.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	booking.UpdateDefaultUpdatedAt = bookingDescUpdatedAt.UpdateDefault.(func() time.Time)
	// bookingDescID is the schema descriptor for id field.
	bookingDescID := bookingFields[0].Descriptor()
	// booking.DefaultID holds the default value on creation for the id field.
	booking.DefaultID = bookingDescID.Default.(func() uuid.UUID)
	customerFields := schema.Customer{}.Fields()
	_ = customerFields
	// customerDescName is the schema descriptor for name field.
	customerDescName := customerFields[1].Descriptor()
	// customer.NameValidator is a validator for the "name" field. It is called by the builders before save.
	customer.NameValidator = customerDescName.Validators[0].(func(string) error)
	// customerDescCitizenID is the schema descriptor for citizen_id field.
	customerDescCitizenID := customerFields[2].Descriptor()
	// customer.CitizenIDValidator is a validator for the "citizen_id" field. It is called by the builders before save.
	customer.CitizenIDValidator = func() func(string) error {
		validators := customerDescCitizenID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(citizen_id string) error {
			for _, fn := range fns {
				if err := fn(citizen_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// customerDescPhone is the schema descriptor for phone field.
	customerDescPhone := customerFields[3].Descriptor()
	// customer.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	customer.PhoneValidator = customerDescPhone.Validators[0].(func(string) error)
	// customerDescCreatedAt is the schema descriptor for created_at field.
	customerDescCreatedAt := customerFields[7].Descriptor()
	// customer.DefaultCreatedAt holds the default value on creation for the created_at field.
	customer.DefaultCreatedAt = customerDescCreatedAt.Default.(func() time.Time)
	// customerDescUpdatedAt is the schema descriptor for updated_at field.
	customerDescUpdatedAt := customerFields[8].Descriptor()
	// customer.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	customer.DefaultUpdatedAt = customerDescUpdatedAt.Default.(func() time.Time)
	// customer.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	customer.UpdateDefaultUpdatedAt = customerDescUpdatedAt.UpdateDefault.(func() time.Time)
	// customerDescID is the schema descriptor for id field.
	customerDescID := customerFields[0].Descriptor()
	// customer.DefaultID holds the default value on creation for the id field.
	customer.DefaultID = customerDescID.Default.(func() uuid.UUID)
	flightFields := schema.Flight{}.Fields()
	_ = flightFields
	// flightDescFlightCode is the schema descriptor for flight_code field.
	flightDescFlightCode := flightFields[1].Descriptor()
	// flight.FlightCodeValidator is a validator for the "flight_code" field. It is called by the builders before save.
	flight.FlightCodeValidator = flightDescFlightCode.Validators[0].(func(string) error)
	// flightDescFrom is the schema descriptor for from field.
	flightDescFrom := flightFields[2].Descriptor()
	// flight.FromValidator is a validator for the "from" field. It is called by the builders before save.
	flight.FromValidator = flightDescFrom.Validators[0].(func(string) error)
	// flightDescTo is the schema descriptor for to field.
	flightDescTo := flightFields[3].Descriptor()
	// flight.ToValidator is a validator for the "to" field. It is called by the builders before save.
	flight.ToValidator = flightDescTo.Validators[0].(func(string) error)
	// flightDescDuration is the schema descriptor for duration field.
	flightDescDuration := flightFields[6].Descriptor()
	// flight.DurationValidator is a validator for the "duration" field. It is called by the builders before save.
	flight.DurationValidator = flightDescDuration.Validators[0].(func(int) error)
	// flightDescCapacity is the schema descriptor for capacity field.
	flightDescCapacity := flightFields[7].Descriptor()
	// flight.CapacityValidator is a validator for the "capacity" field. It is called by the builders before save.
	flight.CapacityValidator = flightDescCapacity.Validators[0].(func(int) error)
	// flightDescEconomyAvailableSeat is the schema descriptor for economy_available_seat field.
	flightDescEconomyAvailableSeat := flightFields[8].Descriptor()
	// flight.EconomyAvailableSeatValidator is a validator for the "economy_available_seat" field. It is called by the builders before save.
	flight.EconomyAvailableSeatValidator = flightDescEconomyAvailableSeat.Validators[0].(func(int) error)
	// flightDescBusinessAvailableSeat is the schema descriptor for business_available_seat field.
	flightDescBusinessAvailableSeat := flightFields[9].Descriptor()
	// flight.BusinessAvailableSeatValidator is a validator for the "business_available_seat" field. It is called by the builders before save.
	flight.BusinessAvailableSeatValidator = flightDescBusinessAvailableSeat.Validators[0].(func(int) error)
	// flightDescCreatedAt is the schema descriptor for created_at field.
	flightDescCreatedAt := flightFields[11].Descriptor()
	// flight.DefaultCreatedAt holds the default value on creation for the created_at field.
	flight.DefaultCreatedAt = flightDescCreatedAt.Default.(func() time.Time)
	// flightDescUpdatedAt is the schema descriptor for updated_at field.
	flightDescUpdatedAt := flightFields[12].Descriptor()
	// flight.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	flight.DefaultUpdatedAt = flightDescUpdatedAt.Default.(func() time.Time)
	// flight.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	flight.UpdateDefaultUpdatedAt = flightDescUpdatedAt.UpdateDefault.(func() time.Time)
	// flightDescID is the schema descriptor for id field.
	flightDescID := flightFields[0].Descriptor()
	// flight.DefaultID holds the default value on creation for the id field.
	flight.DefaultID = flightDescID.Default.(func() uuid.UUID)
	passengerFields := schema.Passenger{}.Fields()
	_ = passengerFields
	// passengerDescName is the schema descriptor for name field.
	passengerDescName := passengerFields[1].Descriptor()
	// passenger.NameValidator is a validator for the "name" field. It is called by the builders before save.
	passenger.NameValidator = passengerDescName.Validators[0].(func(string) error)
	// passengerDescCitizenID is the schema descriptor for citizen_id field.
	passengerDescCitizenID := passengerFields[2].Descriptor()
	// passenger.CitizenIDValidator is a validator for the "citizen_id" field. It is called by the builders before save.
	passenger.CitizenIDValidator = func() func(string) error {
		validators := passengerDescCitizenID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(citizen_id string) error {
			for _, fn := range fns {
				if err := fn(citizen_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// passengerDescPhone is the schema descriptor for phone field.
	passengerDescPhone := passengerFields[4].Descriptor()
	// passenger.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	passenger.PhoneValidator = passengerDescPhone.Validators[0].(func(string) error)
	// passengerDescCreatedAt is the schema descriptor for created_at field.
	passengerDescCreatedAt := passengerFields[8].Descriptor()
	// passenger.DefaultCreatedAt holds the default value on creation for the created_at field.
	passenger.DefaultCreatedAt = passengerDescCreatedAt.Default.(func() time.Time)
	// passengerDescUpdatedAt is the schema descriptor for updated_at field.
	passengerDescUpdatedAt := passengerFields[9].Descriptor()
	// passenger.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	passenger.DefaultUpdatedAt = passengerDescUpdatedAt.Default.(func() time.Time)
	// passenger.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	passenger.UpdateDefaultUpdatedAt = passengerDescUpdatedAt.UpdateDefault.(func() time.Time)
	// passengerDescID is the schema descriptor for id field.
	passengerDescID := passengerFields[0].Descriptor()
	// passenger.DefaultID holds the default value on creation for the id field.
	passenger.DefaultID = passengerDescID.Default.(func() uuid.UUID)
	ticketFields := schema.Ticket{}.Fields()
	_ = ticketFields
	// ticketDescCreatedAt is the schema descriptor for created_at field.
	ticketDescCreatedAt := ticketFields[5].Descriptor()
	// ticket.DefaultCreatedAt holds the default value on creation for the created_at field.
	ticket.DefaultCreatedAt = ticketDescCreatedAt.Default.(func() time.Time)
	// ticketDescUpdatedAt is the schema descriptor for updated_at field.
	ticketDescUpdatedAt := ticketFields[6].Descriptor()
	// ticket.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	ticket.DefaultUpdatedAt = ticketDescUpdatedAt.Default.(func() time.Time)
	// ticket.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	ticket.UpdateDefaultUpdatedAt = ticketDescUpdatedAt.UpdateDefault.(func() time.Time)
	// ticketDescID is the schema descriptor for id field.
	ticketDescID := ticketFields[0].Descriptor()
	// ticket.DefaultID holds the default value on creation for the id field.
	ticket.DefaultID = ticketDescID.Default.(func() uuid.UUID)
	ticketownerFields := schema.TicketOwner{}.Fields()
	_ = ticketownerFields
	// ticketownerDescCreatedAt is the schema descriptor for created_at field.
	ticketownerDescCreatedAt := ticketownerFields[1].Descriptor()
	// ticketowner.DefaultCreatedAt holds the default value on creation for the created_at field.
	ticketowner.DefaultCreatedAt = ticketownerDescCreatedAt.Default.(func() time.Time)
	// ticketownerDescUpdatedAt is the schema descriptor for updated_at field.
	ticketownerDescUpdatedAt := ticketownerFields[2].Descriptor()
	// ticketowner.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	ticketowner.DefaultUpdatedAt = ticketownerDescUpdatedAt.Default.(func() time.Time)
	// ticketowner.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	ticketowner.UpdateDefaultUpdatedAt = ticketownerDescUpdatedAt.UpdateDefault.(func() time.Time)
	// ticketownerDescID is the schema descriptor for id field.
	ticketownerDescID := ticketownerFields[0].Descriptor()
	// ticketowner.DefaultID holds the default value on creation for the id field.
	ticketowner.DefaultID = ticketownerDescID.Default.(func() uuid.UUID)
}
