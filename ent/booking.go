// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mock_project/ent/booking"
	"mock_project/ent/customer"
	"mock_project/ent/flight"
	"mock_project/ent/passenger"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Booking is the model entity for the Booking schema.
type Booking struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// FlightID holds the value of the "flight_id" field.
	FlightID uuid.UUID `json:"flight_id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID uuid.UUID `json:"customer_id,omitempty"`
	// PassengerID holds the value of the "passenger_id" field.
	PassengerID uuid.UUID `json:"passenger_id,omitempty"`
	// EconomyTickets holds the value of the "economy_tickets" field.
	EconomyTickets int `json:"economy_tickets,omitempty"`
	// BusinessTickets holds the value of the "business_tickets" field.
	BusinessTickets int `json:"business_tickets,omitempty"`
	// Status holds the value of the "status" field.
	Status booking.Status `json:"status,omitempty"`
	// Type holds the value of the "type" field.
	Type booking.Type `json:"type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookingQuery when eager-loading is set.
	Edges BookingEdges `json:"edges"`
}

// BookingEdges holds the relations/edges for other nodes in the graph.
type BookingEdges struct {
	// BookingFlight holds the value of the booking_flight edge.
	BookingFlight *Flight `json:"booking_flight,omitempty"`
	// CustomerBookingTickets holds the value of the customer_booking_tickets edge.
	CustomerBookingTickets *Customer `json:"customer_booking_tickets,omitempty"`
	// PassengerBookingTickets holds the value of the passenger_booking_tickets edge.
	PassengerBookingTickets *Passenger `json:"passenger_booking_tickets,omitempty"`
	// BookingTickets holds the value of the booking_tickets edge.
	BookingTickets []*Ticket `json:"booking_tickets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedBookingTickets map[string][]*Ticket
}

// BookingFlightOrErr returns the BookingFlight value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookingEdges) BookingFlightOrErr() (*Flight, error) {
	if e.loadedTypes[0] {
		if e.BookingFlight == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: flight.Label}
		}
		return e.BookingFlight, nil
	}
	return nil, &NotLoadedError{edge: "booking_flight"}
}

// CustomerBookingTicketsOrErr returns the CustomerBookingTickets value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookingEdges) CustomerBookingTicketsOrErr() (*Customer, error) {
	if e.loadedTypes[1] {
		if e.CustomerBookingTickets == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.CustomerBookingTickets, nil
	}
	return nil, &NotLoadedError{edge: "customer_booking_tickets"}
}

// PassengerBookingTicketsOrErr returns the PassengerBookingTickets value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookingEdges) PassengerBookingTicketsOrErr() (*Passenger, error) {
	if e.loadedTypes[2] {
		if e.PassengerBookingTickets == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: passenger.Label}
		}
		return e.PassengerBookingTickets, nil
	}
	return nil, &NotLoadedError{edge: "passenger_booking_tickets"}
}

// BookingTicketsOrErr returns the BookingTickets value or an error if the edge
// was not loaded in eager-loading.
func (e BookingEdges) BookingTicketsOrErr() ([]*Ticket, error) {
	if e.loadedTypes[3] {
		return e.BookingTickets, nil
	}
	return nil, &NotLoadedError{edge: "booking_tickets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Booking) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case booking.FieldEconomyTickets, booking.FieldBusinessTickets:
			values[i] = new(sql.NullInt64)
		case booking.FieldStatus, booking.FieldType:
			values[i] = new(sql.NullString)
		case booking.FieldCreatedAt, booking.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case booking.FieldID, booking.FieldFlightID, booking.FieldCustomerID, booking.FieldPassengerID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Booking", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Booking fields.
func (b *Booking) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case booking.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case booking.FieldFlightID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field flight_id", values[i])
			} else if value != nil {
				b.FlightID = *value
			}
		case booking.FieldCustomerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value != nil {
				b.CustomerID = *value
			}
		case booking.FieldPassengerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field passenger_id", values[i])
			} else if value != nil {
				b.PassengerID = *value
			}
		case booking.FieldEconomyTickets:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field economy_tickets", values[i])
			} else if value.Valid {
				b.EconomyTickets = int(value.Int64)
			}
		case booking.FieldBusinessTickets:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field business_tickets", values[i])
			} else if value.Valid {
				b.BusinessTickets = int(value.Int64)
			}
		case booking.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				b.Status = booking.Status(value.String)
			}
		case booking.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				b.Type = booking.Type(value.String)
			}
		case booking.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case booking.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryBookingFlight queries the "booking_flight" edge of the Booking entity.
func (b *Booking) QueryBookingFlight() *FlightQuery {
	return (&BookingClient{config: b.config}).QueryBookingFlight(b)
}

// QueryCustomerBookingTickets queries the "customer_booking_tickets" edge of the Booking entity.
func (b *Booking) QueryCustomerBookingTickets() *CustomerQuery {
	return (&BookingClient{config: b.config}).QueryCustomerBookingTickets(b)
}

// QueryPassengerBookingTickets queries the "passenger_booking_tickets" edge of the Booking entity.
func (b *Booking) QueryPassengerBookingTickets() *PassengerQuery {
	return (&BookingClient{config: b.config}).QueryPassengerBookingTickets(b)
}

// QueryBookingTickets queries the "booking_tickets" edge of the Booking entity.
func (b *Booking) QueryBookingTickets() *TicketQuery {
	return (&BookingClient{config: b.config}).QueryBookingTickets(b)
}

// Update returns a builder for updating this Booking.
// Note that you need to call Booking.Unwrap() before calling this method if this Booking
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Booking) Update() *BookingUpdateOne {
	return (&BookingClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Booking entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Booking) Unwrap() *Booking {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Booking is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Booking) String() string {
	var builder strings.Builder
	builder.WriteString("Booking(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("flight_id=")
	builder.WriteString(fmt.Sprintf("%v", b.FlightID))
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(fmt.Sprintf("%v", b.CustomerID))
	builder.WriteString(", ")
	builder.WriteString("passenger_id=")
	builder.WriteString(fmt.Sprintf("%v", b.PassengerID))
	builder.WriteString(", ")
	builder.WriteString("economy_tickets=")
	builder.WriteString(fmt.Sprintf("%v", b.EconomyTickets))
	builder.WriteString(", ")
	builder.WriteString("business_tickets=")
	builder.WriteString(fmt.Sprintf("%v", b.BusinessTickets))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", b.Status))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", b.Type))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedBookingTickets returns the BookingTickets named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Booking) NamedBookingTickets(name string) ([]*Ticket, error) {
	if b.Edges.namedBookingTickets == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedBookingTickets[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Booking) appendNamedBookingTickets(name string, edges ...*Ticket) {
	if b.Edges.namedBookingTickets == nil {
		b.Edges.namedBookingTickets = make(map[string][]*Ticket)
	}
	if len(edges) == 0 {
		b.Edges.namedBookingTickets[name] = []*Ticket{}
	} else {
		b.Edges.namedBookingTickets[name] = append(b.Edges.namedBookingTickets[name], edges...)
	}
}

// Bookings is a parsable slice of Booking.
type Bookings []*Booking

func (b Bookings) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
