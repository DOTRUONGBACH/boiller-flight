// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mock_project/ent/booking"
	"mock_project/ent/flight"
	"mock_project/ent/predicate"
	"mock_project/ent/ticket"
	"mock_project/ent/ticketowner"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TicketUpdate is the builder for updating Ticket entities.
type TicketUpdate struct {
	config
	hooks    []Hook
	mutation *TicketMutation
}

// Where appends a list predicates to the TicketUpdate builder.
func (tu *TicketUpdate) Where(ps ...predicate.Ticket) *TicketUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetClass sets the "class" field.
func (tu *TicketUpdate) SetClass(t ticket.Class) *TicketUpdate {
	tu.mutation.SetClass(t)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TicketUpdate) SetStatus(t ticket.Status) *TicketUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetFlightID sets the "flight_id" field.
func (tu *TicketUpdate) SetFlightID(u uuid.UUID) *TicketUpdate {
	tu.mutation.SetFlightID(u)
	return tu
}

// SetBookingID sets the "booking_id" field.
func (tu *TicketUpdate) SetBookingID(u uuid.UUID) *TicketUpdate {
	tu.mutation.SetBookingID(u)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TicketUpdate) SetUpdatedAt(t time.Time) *TicketUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetFlightOwnerID sets the "flight_owner" edge to the Flight entity by ID.
func (tu *TicketUpdate) SetFlightOwnerID(id uuid.UUID) *TicketUpdate {
	tu.mutation.SetFlightOwnerID(id)
	return tu
}

// SetFlightOwner sets the "flight_owner" edge to the Flight entity.
func (tu *TicketUpdate) SetFlightOwner(f *Flight) *TicketUpdate {
	return tu.SetFlightOwnerID(f.ID)
}

// SetBookingOwnerID sets the "booking_owner" edge to the Booking entity by ID.
func (tu *TicketUpdate) SetBookingOwnerID(id uuid.UUID) *TicketUpdate {
	tu.mutation.SetBookingOwnerID(id)
	return tu
}

// SetBookingOwner sets the "booking_owner" edge to the Booking entity.
func (tu *TicketUpdate) SetBookingOwner(b *Booking) *TicketUpdate {
	return tu.SetBookingOwnerID(b.ID)
}

// SetTicketOwnerID sets the "ticket_owner" edge to the TicketOwner entity by ID.
func (tu *TicketUpdate) SetTicketOwnerID(id uuid.UUID) *TicketUpdate {
	tu.mutation.SetTicketOwnerID(id)
	return tu
}

// SetNillableTicketOwnerID sets the "ticket_owner" edge to the TicketOwner entity by ID if the given value is not nil.
func (tu *TicketUpdate) SetNillableTicketOwnerID(id *uuid.UUID) *TicketUpdate {
	if id != nil {
		tu = tu.SetTicketOwnerID(*id)
	}
	return tu
}

// SetTicketOwner sets the "ticket_owner" edge to the TicketOwner entity.
func (tu *TicketUpdate) SetTicketOwner(t *TicketOwner) *TicketUpdate {
	return tu.SetTicketOwnerID(t.ID)
}

// Mutation returns the TicketMutation object of the builder.
func (tu *TicketUpdate) Mutation() *TicketMutation {
	return tu.mutation
}

// ClearFlightOwner clears the "flight_owner" edge to the Flight entity.
func (tu *TicketUpdate) ClearFlightOwner() *TicketUpdate {
	tu.mutation.ClearFlightOwner()
	return tu
}

// ClearBookingOwner clears the "booking_owner" edge to the Booking entity.
func (tu *TicketUpdate) ClearBookingOwner() *TicketUpdate {
	tu.mutation.ClearBookingOwner()
	return tu
}

// ClearTicketOwner clears the "ticket_owner" edge to the TicketOwner entity.
func (tu *TicketUpdate) ClearTicketOwner() *TicketUpdate {
	tu.mutation.ClearTicketOwner()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TicketUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tu.defaults()
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TicketMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TicketUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TicketUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TicketUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TicketUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := ticket.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TicketUpdate) check() error {
	if v, ok := tu.mutation.Class(); ok {
		if err := ticket.ClassValidator(v); err != nil {
			return &ValidationError{Name: "class", err: fmt.Errorf(`ent: validator failed for field "Ticket.class": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := ticket.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Ticket.status": %w`, err)}
		}
	}
	if _, ok := tu.mutation.FlightOwnerID(); tu.mutation.FlightOwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Ticket.flight_owner"`)
	}
	if _, ok := tu.mutation.BookingOwnerID(); tu.mutation.BookingOwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Ticket.booking_owner"`)
	}
	return nil
}

func (tu *TicketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ticket.Table,
			Columns: ticket.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: ticket.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Class(); ok {
		_spec.SetField(ticket.FieldClass, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(ticket.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(ticket.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.FlightOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.FlightOwnerTable,
			Columns: []string{ticket.FlightOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FlightOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.FlightOwnerTable,
			Columns: []string{ticket.FlightOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.BookingOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.BookingOwnerTable,
			Columns: []string{ticket.BookingOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: booking.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.BookingOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.BookingOwnerTable,
			Columns: []string{ticket.BookingOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TicketOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ticket.TicketOwnerTable,
			Columns: []string{ticket.TicketOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticketowner.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TicketOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ticket.TicketOwnerTable,
			Columns: []string{ticket.TicketOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticketowner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TicketUpdateOne is the builder for updating a single Ticket entity.
type TicketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TicketMutation
}

// SetClass sets the "class" field.
func (tuo *TicketUpdateOne) SetClass(t ticket.Class) *TicketUpdateOne {
	tuo.mutation.SetClass(t)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TicketUpdateOne) SetStatus(t ticket.Status) *TicketUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetFlightID sets the "flight_id" field.
func (tuo *TicketUpdateOne) SetFlightID(u uuid.UUID) *TicketUpdateOne {
	tuo.mutation.SetFlightID(u)
	return tuo
}

// SetBookingID sets the "booking_id" field.
func (tuo *TicketUpdateOne) SetBookingID(u uuid.UUID) *TicketUpdateOne {
	tuo.mutation.SetBookingID(u)
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TicketUpdateOne) SetUpdatedAt(t time.Time) *TicketUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetFlightOwnerID sets the "flight_owner" edge to the Flight entity by ID.
func (tuo *TicketUpdateOne) SetFlightOwnerID(id uuid.UUID) *TicketUpdateOne {
	tuo.mutation.SetFlightOwnerID(id)
	return tuo
}

// SetFlightOwner sets the "flight_owner" edge to the Flight entity.
func (tuo *TicketUpdateOne) SetFlightOwner(f *Flight) *TicketUpdateOne {
	return tuo.SetFlightOwnerID(f.ID)
}

// SetBookingOwnerID sets the "booking_owner" edge to the Booking entity by ID.
func (tuo *TicketUpdateOne) SetBookingOwnerID(id uuid.UUID) *TicketUpdateOne {
	tuo.mutation.SetBookingOwnerID(id)
	return tuo
}

// SetBookingOwner sets the "booking_owner" edge to the Booking entity.
func (tuo *TicketUpdateOne) SetBookingOwner(b *Booking) *TicketUpdateOne {
	return tuo.SetBookingOwnerID(b.ID)
}

// SetTicketOwnerID sets the "ticket_owner" edge to the TicketOwner entity by ID.
func (tuo *TicketUpdateOne) SetTicketOwnerID(id uuid.UUID) *TicketUpdateOne {
	tuo.mutation.SetTicketOwnerID(id)
	return tuo
}

// SetNillableTicketOwnerID sets the "ticket_owner" edge to the TicketOwner entity by ID if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableTicketOwnerID(id *uuid.UUID) *TicketUpdateOne {
	if id != nil {
		tuo = tuo.SetTicketOwnerID(*id)
	}
	return tuo
}

// SetTicketOwner sets the "ticket_owner" edge to the TicketOwner entity.
func (tuo *TicketUpdateOne) SetTicketOwner(t *TicketOwner) *TicketUpdateOne {
	return tuo.SetTicketOwnerID(t.ID)
}

// Mutation returns the TicketMutation object of the builder.
func (tuo *TicketUpdateOne) Mutation() *TicketMutation {
	return tuo.mutation
}

// ClearFlightOwner clears the "flight_owner" edge to the Flight entity.
func (tuo *TicketUpdateOne) ClearFlightOwner() *TicketUpdateOne {
	tuo.mutation.ClearFlightOwner()
	return tuo
}

// ClearBookingOwner clears the "booking_owner" edge to the Booking entity.
func (tuo *TicketUpdateOne) ClearBookingOwner() *TicketUpdateOne {
	tuo.mutation.ClearBookingOwner()
	return tuo
}

// ClearTicketOwner clears the "ticket_owner" edge to the TicketOwner entity.
func (tuo *TicketUpdateOne) ClearTicketOwner() *TicketUpdateOne {
	tuo.mutation.ClearTicketOwner()
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TicketUpdateOne) Select(field string, fields ...string) *TicketUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Ticket entity.
func (tuo *TicketUpdateOne) Save(ctx context.Context) (*Ticket, error) {
	var (
		err  error
		node *Ticket
	)
	tuo.defaults()
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TicketMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Ticket)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TicketMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TicketUpdateOne) SaveX(ctx context.Context) *Ticket {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TicketUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TicketUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TicketUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := ticket.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TicketUpdateOne) check() error {
	if v, ok := tuo.mutation.Class(); ok {
		if err := ticket.ClassValidator(v); err != nil {
			return &ValidationError{Name: "class", err: fmt.Errorf(`ent: validator failed for field "Ticket.class": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := ticket.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Ticket.status": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.FlightOwnerID(); tuo.mutation.FlightOwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Ticket.flight_owner"`)
	}
	if _, ok := tuo.mutation.BookingOwnerID(); tuo.mutation.BookingOwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Ticket.booking_owner"`)
	}
	return nil
}

func (tuo *TicketUpdateOne) sqlSave(ctx context.Context) (_node *Ticket, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ticket.Table,
			Columns: ticket.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: ticket.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ticket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ticket.FieldID)
		for _, f := range fields {
			if !ticket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ticket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Class(); ok {
		_spec.SetField(ticket.FieldClass, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(ticket.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(ticket.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.FlightOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.FlightOwnerTable,
			Columns: []string{ticket.FlightOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FlightOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.FlightOwnerTable,
			Columns: []string{ticket.FlightOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.BookingOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.BookingOwnerTable,
			Columns: []string{ticket.BookingOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: booking.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.BookingOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.BookingOwnerTable,
			Columns: []string{ticket.BookingOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TicketOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ticket.TicketOwnerTable,
			Columns: []string{ticket.TicketOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticketowner.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TicketOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ticket.TicketOwnerTable,
			Columns: []string{ticket.TicketOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticketowner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ticket{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
