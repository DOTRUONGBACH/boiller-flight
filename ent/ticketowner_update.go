// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mock_project/ent/customer"
	"mock_project/ent/passenger"
	"mock_project/ent/predicate"
	"mock_project/ent/ticket"
	"mock_project/ent/ticketowner"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TicketOwnerUpdate is the builder for updating TicketOwner entities.
type TicketOwnerUpdate struct {
	config
	hooks    []Hook
	mutation *TicketOwnerMutation
}

// Where appends a list predicates to the TicketOwnerUpdate builder.
func (tou *TicketOwnerUpdate) Where(ps ...predicate.TicketOwner) *TicketOwnerUpdate {
	tou.mutation.Where(ps...)
	return tou
}

// SetUpdatedAt sets the "updated_at" field.
func (tou *TicketOwnerUpdate) SetUpdatedAt(t time.Time) *TicketOwnerUpdate {
	tou.mutation.SetUpdatedAt(t)
	return tou
}

// SetTicketID sets the "ticket" edge to the Ticket entity by ID.
func (tou *TicketOwnerUpdate) SetTicketID(id uuid.UUID) *TicketOwnerUpdate {
	tou.mutation.SetTicketID(id)
	return tou
}

// SetNillableTicketID sets the "ticket" edge to the Ticket entity by ID if the given value is not nil.
func (tou *TicketOwnerUpdate) SetNillableTicketID(id *uuid.UUID) *TicketOwnerUpdate {
	if id != nil {
		tou = tou.SetTicketID(*id)
	}
	return tou
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (tou *TicketOwnerUpdate) SetTicket(t *Ticket) *TicketOwnerUpdate {
	return tou.SetTicketID(t.ID)
}

// SetCustomerOwnerID sets the "customer_owner" edge to the Customer entity by ID.
func (tou *TicketOwnerUpdate) SetCustomerOwnerID(id uuid.UUID) *TicketOwnerUpdate {
	tou.mutation.SetCustomerOwnerID(id)
	return tou
}

// SetNillableCustomerOwnerID sets the "customer_owner" edge to the Customer entity by ID if the given value is not nil.
func (tou *TicketOwnerUpdate) SetNillableCustomerOwnerID(id *uuid.UUID) *TicketOwnerUpdate {
	if id != nil {
		tou = tou.SetCustomerOwnerID(*id)
	}
	return tou
}

// SetCustomerOwner sets the "customer_owner" edge to the Customer entity.
func (tou *TicketOwnerUpdate) SetCustomerOwner(c *Customer) *TicketOwnerUpdate {
	return tou.SetCustomerOwnerID(c.ID)
}

// SetPassengerOwnerID sets the "passenger_owner" edge to the Passenger entity by ID.
func (tou *TicketOwnerUpdate) SetPassengerOwnerID(id uuid.UUID) *TicketOwnerUpdate {
	tou.mutation.SetPassengerOwnerID(id)
	return tou
}

// SetNillablePassengerOwnerID sets the "passenger_owner" edge to the Passenger entity by ID if the given value is not nil.
func (tou *TicketOwnerUpdate) SetNillablePassengerOwnerID(id *uuid.UUID) *TicketOwnerUpdate {
	if id != nil {
		tou = tou.SetPassengerOwnerID(*id)
	}
	return tou
}

// SetPassengerOwner sets the "passenger_owner" edge to the Passenger entity.
func (tou *TicketOwnerUpdate) SetPassengerOwner(p *Passenger) *TicketOwnerUpdate {
	return tou.SetPassengerOwnerID(p.ID)
}

// Mutation returns the TicketOwnerMutation object of the builder.
func (tou *TicketOwnerUpdate) Mutation() *TicketOwnerMutation {
	return tou.mutation
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (tou *TicketOwnerUpdate) ClearTicket() *TicketOwnerUpdate {
	tou.mutation.ClearTicket()
	return tou
}

// ClearCustomerOwner clears the "customer_owner" edge to the Customer entity.
func (tou *TicketOwnerUpdate) ClearCustomerOwner() *TicketOwnerUpdate {
	tou.mutation.ClearCustomerOwner()
	return tou
}

// ClearPassengerOwner clears the "passenger_owner" edge to the Passenger entity.
func (tou *TicketOwnerUpdate) ClearPassengerOwner() *TicketOwnerUpdate {
	tou.mutation.ClearPassengerOwner()
	return tou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tou *TicketOwnerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tou.defaults()
	if len(tou.hooks) == 0 {
		affected, err = tou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TicketOwnerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tou.mutation = mutation
			affected, err = tou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tou.hooks) - 1; i >= 0; i-- {
			if tou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tou *TicketOwnerUpdate) SaveX(ctx context.Context) int {
	affected, err := tou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tou *TicketOwnerUpdate) Exec(ctx context.Context) error {
	_, err := tou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tou *TicketOwnerUpdate) ExecX(ctx context.Context) {
	if err := tou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tou *TicketOwnerUpdate) defaults() {
	if _, ok := tou.mutation.UpdatedAt(); !ok {
		v := ticketowner.UpdateDefaultUpdatedAt()
		tou.mutation.SetUpdatedAt(v)
	}
}

func (tou *TicketOwnerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ticketowner.Table,
			Columns: ticketowner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: ticketowner.FieldID,
			},
		},
	}
	if ps := tou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tou.mutation.UpdatedAt(); ok {
		_spec.SetField(ticketowner.FieldUpdatedAt, field.TypeTime, value)
	}
	if tou.mutation.TicketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ticketowner.TicketTable,
			Columns: []string{ticketowner.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tou.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ticketowner.TicketTable,
			Columns: []string{ticketowner.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tou.mutation.CustomerOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ticketowner.CustomerOwnerTable,
			Columns: []string{ticketowner.CustomerOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tou.mutation.CustomerOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ticketowner.CustomerOwnerTable,
			Columns: []string{ticketowner.CustomerOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tou.mutation.PassengerOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ticketowner.PassengerOwnerTable,
			Columns: []string{ticketowner.PassengerOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: passenger.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tou.mutation.PassengerOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ticketowner.PassengerOwnerTable,
			Columns: []string{ticketowner.PassengerOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: passenger.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticketowner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TicketOwnerUpdateOne is the builder for updating a single TicketOwner entity.
type TicketOwnerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TicketOwnerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (touo *TicketOwnerUpdateOne) SetUpdatedAt(t time.Time) *TicketOwnerUpdateOne {
	touo.mutation.SetUpdatedAt(t)
	return touo
}

// SetTicketID sets the "ticket" edge to the Ticket entity by ID.
func (touo *TicketOwnerUpdateOne) SetTicketID(id uuid.UUID) *TicketOwnerUpdateOne {
	touo.mutation.SetTicketID(id)
	return touo
}

// SetNillableTicketID sets the "ticket" edge to the Ticket entity by ID if the given value is not nil.
func (touo *TicketOwnerUpdateOne) SetNillableTicketID(id *uuid.UUID) *TicketOwnerUpdateOne {
	if id != nil {
		touo = touo.SetTicketID(*id)
	}
	return touo
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (touo *TicketOwnerUpdateOne) SetTicket(t *Ticket) *TicketOwnerUpdateOne {
	return touo.SetTicketID(t.ID)
}

// SetCustomerOwnerID sets the "customer_owner" edge to the Customer entity by ID.
func (touo *TicketOwnerUpdateOne) SetCustomerOwnerID(id uuid.UUID) *TicketOwnerUpdateOne {
	touo.mutation.SetCustomerOwnerID(id)
	return touo
}

// SetNillableCustomerOwnerID sets the "customer_owner" edge to the Customer entity by ID if the given value is not nil.
func (touo *TicketOwnerUpdateOne) SetNillableCustomerOwnerID(id *uuid.UUID) *TicketOwnerUpdateOne {
	if id != nil {
		touo = touo.SetCustomerOwnerID(*id)
	}
	return touo
}

// SetCustomerOwner sets the "customer_owner" edge to the Customer entity.
func (touo *TicketOwnerUpdateOne) SetCustomerOwner(c *Customer) *TicketOwnerUpdateOne {
	return touo.SetCustomerOwnerID(c.ID)
}

// SetPassengerOwnerID sets the "passenger_owner" edge to the Passenger entity by ID.
func (touo *TicketOwnerUpdateOne) SetPassengerOwnerID(id uuid.UUID) *TicketOwnerUpdateOne {
	touo.mutation.SetPassengerOwnerID(id)
	return touo
}

// SetNillablePassengerOwnerID sets the "passenger_owner" edge to the Passenger entity by ID if the given value is not nil.
func (touo *TicketOwnerUpdateOne) SetNillablePassengerOwnerID(id *uuid.UUID) *TicketOwnerUpdateOne {
	if id != nil {
		touo = touo.SetPassengerOwnerID(*id)
	}
	return touo
}

// SetPassengerOwner sets the "passenger_owner" edge to the Passenger entity.
func (touo *TicketOwnerUpdateOne) SetPassengerOwner(p *Passenger) *TicketOwnerUpdateOne {
	return touo.SetPassengerOwnerID(p.ID)
}

// Mutation returns the TicketOwnerMutation object of the builder.
func (touo *TicketOwnerUpdateOne) Mutation() *TicketOwnerMutation {
	return touo.mutation
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (touo *TicketOwnerUpdateOne) ClearTicket() *TicketOwnerUpdateOne {
	touo.mutation.ClearTicket()
	return touo
}

// ClearCustomerOwner clears the "customer_owner" edge to the Customer entity.
func (touo *TicketOwnerUpdateOne) ClearCustomerOwner() *TicketOwnerUpdateOne {
	touo.mutation.ClearCustomerOwner()
	return touo
}

// ClearPassengerOwner clears the "passenger_owner" edge to the Passenger entity.
func (touo *TicketOwnerUpdateOne) ClearPassengerOwner() *TicketOwnerUpdateOne {
	touo.mutation.ClearPassengerOwner()
	return touo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (touo *TicketOwnerUpdateOne) Select(field string, fields ...string) *TicketOwnerUpdateOne {
	touo.fields = append([]string{field}, fields...)
	return touo
}

// Save executes the query and returns the updated TicketOwner entity.
func (touo *TicketOwnerUpdateOne) Save(ctx context.Context) (*TicketOwner, error) {
	var (
		err  error
		node *TicketOwner
	)
	touo.defaults()
	if len(touo.hooks) == 0 {
		node, err = touo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TicketOwnerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			touo.mutation = mutation
			node, err = touo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(touo.hooks) - 1; i >= 0; i-- {
			if touo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = touo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, touo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TicketOwner)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TicketOwnerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (touo *TicketOwnerUpdateOne) SaveX(ctx context.Context) *TicketOwner {
	node, err := touo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (touo *TicketOwnerUpdateOne) Exec(ctx context.Context) error {
	_, err := touo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (touo *TicketOwnerUpdateOne) ExecX(ctx context.Context) {
	if err := touo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (touo *TicketOwnerUpdateOne) defaults() {
	if _, ok := touo.mutation.UpdatedAt(); !ok {
		v := ticketowner.UpdateDefaultUpdatedAt()
		touo.mutation.SetUpdatedAt(v)
	}
}

func (touo *TicketOwnerUpdateOne) sqlSave(ctx context.Context) (_node *TicketOwner, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ticketowner.Table,
			Columns: ticketowner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: ticketowner.FieldID,
			},
		},
	}
	id, ok := touo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TicketOwner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := touo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ticketowner.FieldID)
		for _, f := range fields {
			if !ticketowner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ticketowner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := touo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := touo.mutation.UpdatedAt(); ok {
		_spec.SetField(ticketowner.FieldUpdatedAt, field.TypeTime, value)
	}
	if touo.mutation.TicketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ticketowner.TicketTable,
			Columns: []string{ticketowner.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := touo.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ticketowner.TicketTable,
			Columns: []string{ticketowner.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if touo.mutation.CustomerOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ticketowner.CustomerOwnerTable,
			Columns: []string{ticketowner.CustomerOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := touo.mutation.CustomerOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ticketowner.CustomerOwnerTable,
			Columns: []string{ticketowner.CustomerOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if touo.mutation.PassengerOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ticketowner.PassengerOwnerTable,
			Columns: []string{ticketowner.PassengerOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: passenger.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := touo.mutation.PassengerOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ticketowner.PassengerOwnerTable,
			Columns: []string{ticketowner.PassengerOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: passenger.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TicketOwner{config: touo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, touo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticketowner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
