// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mock_project/ent/passenger"
	"mock_project/ent/ticketowner"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Passenger is the model entity for the Passenger schema.
type Passenger struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CitizenID holds the value of the "citizen_id" field.
	CitizenID string `json:"citizen_id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender passenger.Gender `json:"gender,omitempty"`
	// DateOfBirth holds the value of the "date_of_birth" field.
	DateOfBirth time.Time `json:"date_of_birth,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PassengerQuery when eager-loading is set.
	Edges PassengerEdges `json:"edges"`
}

// PassengerEdges holds the relations/edges for other nodes in the graph.
type PassengerEdges struct {
	// Ticket holds the value of the ticket edge.
	Ticket *TicketOwner `json:"ticket,omitempty"`
	// Bookings holds the value of the bookings edge.
	Bookings []*Booking `json:"bookings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedBookings map[string][]*Booking
}

// TicketOrErr returns the Ticket value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PassengerEdges) TicketOrErr() (*TicketOwner, error) {
	if e.loadedTypes[0] {
		if e.Ticket == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: ticketowner.Label}
		}
		return e.Ticket, nil
	}
	return nil, &NotLoadedError{edge: "ticket"}
}

// BookingsOrErr returns the Bookings value or an error if the edge
// was not loaded in eager-loading.
func (e PassengerEdges) BookingsOrErr() ([]*Booking, error) {
	if e.loadedTypes[1] {
		return e.Bookings, nil
	}
	return nil, &NotLoadedError{edge: "bookings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Passenger) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case passenger.FieldName, passenger.FieldCitizenID, passenger.FieldEmail, passenger.FieldPhone, passenger.FieldAddress, passenger.FieldGender:
			values[i] = new(sql.NullString)
		case passenger.FieldDateOfBirth, passenger.FieldCreatedAt, passenger.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case passenger.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Passenger", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Passenger fields.
func (pa *Passenger) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case passenger.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pa.ID = *value
			}
		case passenger.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pa.Name = value.String
			}
		case passenger.FieldCitizenID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field citizen_id", values[i])
			} else if value.Valid {
				pa.CitizenID = value.String
			}
		case passenger.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				pa.Email = value.String
			}
		case passenger.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				pa.Phone = value.String
			}
		case passenger.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				pa.Address = value.String
			}
		case passenger.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				pa.Gender = passenger.Gender(value.String)
			}
		case passenger.FieldDateOfBirth:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_of_birth", values[i])
			} else if value.Valid {
				pa.DateOfBirth = value.Time
			}
		case passenger.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case passenger.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryTicket queries the "ticket" edge of the Passenger entity.
func (pa *Passenger) QueryTicket() *TicketOwnerQuery {
	return (&PassengerClient{config: pa.config}).QueryTicket(pa)
}

// QueryBookings queries the "bookings" edge of the Passenger entity.
func (pa *Passenger) QueryBookings() *BookingQuery {
	return (&PassengerClient{config: pa.config}).QueryBookings(pa)
}

// Update returns a builder for updating this Passenger.
// Note that you need to call Passenger.Unwrap() before calling this method if this Passenger
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Passenger) Update() *PassengerUpdateOne {
	return (&PassengerClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the Passenger entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Passenger) Unwrap() *Passenger {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Passenger is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Passenger) String() string {
	var builder strings.Builder
	builder.WriteString("Passenger(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("name=")
	builder.WriteString(pa.Name)
	builder.WriteString(", ")
	builder.WriteString("citizen_id=")
	builder.WriteString(pa.CitizenID)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(pa.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(pa.Phone)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(pa.Address)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", pa.Gender))
	builder.WriteString(", ")
	builder.WriteString("date_of_birth=")
	builder.WriteString(pa.DateOfBirth.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedBookings returns the Bookings named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Passenger) NamedBookings(name string) ([]*Booking, error) {
	if pa.Edges.namedBookings == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedBookings[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Passenger) appendNamedBookings(name string, edges ...*Booking) {
	if pa.Edges.namedBookings == nil {
		pa.Edges.namedBookings = make(map[string][]*Booking)
	}
	if len(edges) == 0 {
		pa.Edges.namedBookings[name] = []*Booking{}
	} else {
		pa.Edges.namedBookings[name] = append(pa.Edges.namedBookings[name], edges...)
	}
}

// Passengers is a parsable slice of Passenger.
type Passengers []*Passenger

func (pa Passengers) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
