// Code generated by ent, DO NOT EDIT.

package ticket

import (
	"mock_project/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// FlightID applies equality check predicate on the "flight_id" field. It's identical to FlightIDEQ.
func FlightID(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlightID), v))
	})
}

// BookingID applies equality check predicate on the "booking_id" field. It's identical to BookingIDEQ.
func BookingID(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBookingID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ClassEQ applies the EQ predicate on the "class" field.
func ClassEQ(v Class) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClass), v))
	})
}

// ClassNEQ applies the NEQ predicate on the "class" field.
func ClassNEQ(v Class) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClass), v))
	})
}

// ClassIn applies the In predicate on the "class" field.
func ClassIn(vs ...Class) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldClass), v...))
	})
}

// ClassNotIn applies the NotIn predicate on the "class" field.
func ClassNotIn(vs ...Class) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldClass), v...))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// FlightIDEQ applies the EQ predicate on the "flight_id" field.
func FlightIDEQ(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlightID), v))
	})
}

// FlightIDNEQ applies the NEQ predicate on the "flight_id" field.
func FlightIDNEQ(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFlightID), v))
	})
}

// FlightIDIn applies the In predicate on the "flight_id" field.
func FlightIDIn(vs ...uuid.UUID) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFlightID), v...))
	})
}

// FlightIDNotIn applies the NotIn predicate on the "flight_id" field.
func FlightIDNotIn(vs ...uuid.UUID) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFlightID), v...))
	})
}

// BookingIDEQ applies the EQ predicate on the "booking_id" field.
func BookingIDEQ(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBookingID), v))
	})
}

// BookingIDNEQ applies the NEQ predicate on the "booking_id" field.
func BookingIDNEQ(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBookingID), v))
	})
}

// BookingIDIn applies the In predicate on the "booking_id" field.
func BookingIDIn(vs ...uuid.UUID) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBookingID), v...))
	})
}

// BookingIDNotIn applies the NotIn predicate on the "booking_id" field.
func BookingIDNotIn(vs ...uuid.UUID) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBookingID), v...))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasFlightOwner applies the HasEdge predicate on the "flight_owner" edge.
func HasFlightOwner() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FlightOwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FlightOwnerTable, FlightOwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFlightOwnerWith applies the HasEdge predicate on the "flight_owner" edge with a given conditions (other predicates).
func HasFlightOwnerWith(preds ...predicate.Flight) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FlightOwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FlightOwnerTable, FlightOwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBookingOwner applies the HasEdge predicate on the "booking_owner" edge.
func HasBookingOwner() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BookingOwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BookingOwnerTable, BookingOwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBookingOwnerWith applies the HasEdge predicate on the "booking_owner" edge with a given conditions (other predicates).
func HasBookingOwnerWith(preds ...predicate.Booking) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BookingOwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BookingOwnerTable, BookingOwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTicketOwner applies the HasEdge predicate on the "ticket_owner" edge.
func HasTicketOwner() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TicketOwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TicketOwnerTable, TicketOwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTicketOwnerWith applies the HasEdge predicate on the "ticket_owner" edge with a given conditions (other predicates).
func HasTicketOwnerWith(preds ...predicate.TicketOwner) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TicketOwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TicketOwnerTable, TicketOwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		p(s.Not())
	})
}
