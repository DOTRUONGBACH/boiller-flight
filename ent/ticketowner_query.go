// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"mock_project/ent/customer"
	"mock_project/ent/passenger"
	"mock_project/ent/predicate"
	"mock_project/ent/ticket"
	"mock_project/ent/ticketowner"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TicketOwnerQuery is the builder for querying TicketOwner entities.
type TicketOwnerQuery struct {
	config
	limit              *int
	offset             *int
	unique             *bool
	order              []OrderFunc
	fields             []string
	predicates         []predicate.TicketOwner
	withTicket         *TicketQuery
	withCustomerOwner  *CustomerQuery
	withPassengerOwner *PassengerQuery
	withFKs            bool
	modifiers          []func(*sql.Selector)
	loadTotal          []func(context.Context, []*TicketOwner) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TicketOwnerQuery builder.
func (toq *TicketOwnerQuery) Where(ps ...predicate.TicketOwner) *TicketOwnerQuery {
	toq.predicates = append(toq.predicates, ps...)
	return toq
}

// Limit adds a limit step to the query.
func (toq *TicketOwnerQuery) Limit(limit int) *TicketOwnerQuery {
	toq.limit = &limit
	return toq
}

// Offset adds an offset step to the query.
func (toq *TicketOwnerQuery) Offset(offset int) *TicketOwnerQuery {
	toq.offset = &offset
	return toq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (toq *TicketOwnerQuery) Unique(unique bool) *TicketOwnerQuery {
	toq.unique = &unique
	return toq
}

// Order adds an order step to the query.
func (toq *TicketOwnerQuery) Order(o ...OrderFunc) *TicketOwnerQuery {
	toq.order = append(toq.order, o...)
	return toq
}

// QueryTicket chains the current query on the "ticket" edge.
func (toq *TicketOwnerQuery) QueryTicket() *TicketQuery {
	query := &TicketQuery{config: toq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := toq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := toq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ticketowner.Table, ticketowner.FieldID, selector),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ticketowner.TicketTable, ticketowner.TicketColumn),
		)
		fromU = sqlgraph.SetNeighbors(toq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCustomerOwner chains the current query on the "customer_owner" edge.
func (toq *TicketOwnerQuery) QueryCustomerOwner() *CustomerQuery {
	query := &CustomerQuery{config: toq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := toq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := toq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ticketowner.Table, ticketowner.FieldID, selector),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ticketowner.CustomerOwnerTable, ticketowner.CustomerOwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(toq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPassengerOwner chains the current query on the "passenger_owner" edge.
func (toq *TicketOwnerQuery) QueryPassengerOwner() *PassengerQuery {
	query := &PassengerQuery{config: toq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := toq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := toq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ticketowner.Table, ticketowner.FieldID, selector),
			sqlgraph.To(passenger.Table, passenger.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ticketowner.PassengerOwnerTable, ticketowner.PassengerOwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(toq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TicketOwner entity from the query.
// Returns a *NotFoundError when no TicketOwner was found.
func (toq *TicketOwnerQuery) First(ctx context.Context) (*TicketOwner, error) {
	nodes, err := toq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ticketowner.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (toq *TicketOwnerQuery) FirstX(ctx context.Context) *TicketOwner {
	node, err := toq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TicketOwner ID from the query.
// Returns a *NotFoundError when no TicketOwner ID was found.
func (toq *TicketOwnerQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = toq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{ticketowner.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (toq *TicketOwnerQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := toq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TicketOwner entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TicketOwner entity is found.
// Returns a *NotFoundError when no TicketOwner entities are found.
func (toq *TicketOwnerQuery) Only(ctx context.Context) (*TicketOwner, error) {
	nodes, err := toq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ticketowner.Label}
	default:
		return nil, &NotSingularError{ticketowner.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (toq *TicketOwnerQuery) OnlyX(ctx context.Context) *TicketOwner {
	node, err := toq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TicketOwner ID in the query.
// Returns a *NotSingularError when more than one TicketOwner ID is found.
// Returns a *NotFoundError when no entities are found.
func (toq *TicketOwnerQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = toq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{ticketowner.Label}
	default:
		err = &NotSingularError{ticketowner.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (toq *TicketOwnerQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := toq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TicketOwners.
func (toq *TicketOwnerQuery) All(ctx context.Context) ([]*TicketOwner, error) {
	if err := toq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return toq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (toq *TicketOwnerQuery) AllX(ctx context.Context) []*TicketOwner {
	nodes, err := toq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TicketOwner IDs.
func (toq *TicketOwnerQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := toq.Select(ticketowner.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (toq *TicketOwnerQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := toq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (toq *TicketOwnerQuery) Count(ctx context.Context) (int, error) {
	if err := toq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return toq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (toq *TicketOwnerQuery) CountX(ctx context.Context) int {
	count, err := toq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (toq *TicketOwnerQuery) Exist(ctx context.Context) (bool, error) {
	if err := toq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return toq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (toq *TicketOwnerQuery) ExistX(ctx context.Context) bool {
	exist, err := toq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TicketOwnerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (toq *TicketOwnerQuery) Clone() *TicketOwnerQuery {
	if toq == nil {
		return nil
	}
	return &TicketOwnerQuery{
		config:             toq.config,
		limit:              toq.limit,
		offset:             toq.offset,
		order:              append([]OrderFunc{}, toq.order...),
		predicates:         append([]predicate.TicketOwner{}, toq.predicates...),
		withTicket:         toq.withTicket.Clone(),
		withCustomerOwner:  toq.withCustomerOwner.Clone(),
		withPassengerOwner: toq.withPassengerOwner.Clone(),
		// clone intermediate query.
		sql:    toq.sql.Clone(),
		path:   toq.path,
		unique: toq.unique,
	}
}

// WithTicket tells the query-builder to eager-load the nodes that are connected to
// the "ticket" edge. The optional arguments are used to configure the query builder of the edge.
func (toq *TicketOwnerQuery) WithTicket(opts ...func(*TicketQuery)) *TicketOwnerQuery {
	query := &TicketQuery{config: toq.config}
	for _, opt := range opts {
		opt(query)
	}
	toq.withTicket = query
	return toq
}

// WithCustomerOwner tells the query-builder to eager-load the nodes that are connected to
// the "customer_owner" edge. The optional arguments are used to configure the query builder of the edge.
func (toq *TicketOwnerQuery) WithCustomerOwner(opts ...func(*CustomerQuery)) *TicketOwnerQuery {
	query := &CustomerQuery{config: toq.config}
	for _, opt := range opts {
		opt(query)
	}
	toq.withCustomerOwner = query
	return toq
}

// WithPassengerOwner tells the query-builder to eager-load the nodes that are connected to
// the "passenger_owner" edge. The optional arguments are used to configure the query builder of the edge.
func (toq *TicketOwnerQuery) WithPassengerOwner(opts ...func(*PassengerQuery)) *TicketOwnerQuery {
	query := &PassengerQuery{config: toq.config}
	for _, opt := range opts {
		opt(query)
	}
	toq.withPassengerOwner = query
	return toq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TicketOwner.Query().
//		GroupBy(ticketowner.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (toq *TicketOwnerQuery) GroupBy(field string, fields ...string) *TicketOwnerGroupBy {
	grbuild := &TicketOwnerGroupBy{config: toq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := toq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return toq.sqlQuery(ctx), nil
	}
	grbuild.label = ticketowner.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.TicketOwner.Query().
//		Select(ticketowner.FieldCreatedAt).
//		Scan(ctx, &v)
func (toq *TicketOwnerQuery) Select(fields ...string) *TicketOwnerSelect {
	toq.fields = append(toq.fields, fields...)
	selbuild := &TicketOwnerSelect{TicketOwnerQuery: toq}
	selbuild.label = ticketowner.Label
	selbuild.flds, selbuild.scan = &toq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a TicketOwnerSelect configured with the given aggregations.
func (toq *TicketOwnerQuery) Aggregate(fns ...AggregateFunc) *TicketOwnerSelect {
	return toq.Select().Aggregate(fns...)
}

func (toq *TicketOwnerQuery) prepareQuery(ctx context.Context) error {
	for _, f := range toq.fields {
		if !ticketowner.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if toq.path != nil {
		prev, err := toq.path(ctx)
		if err != nil {
			return err
		}
		toq.sql = prev
	}
	return nil
}

func (toq *TicketOwnerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TicketOwner, error) {
	var (
		nodes       = []*TicketOwner{}
		withFKs     = toq.withFKs
		_spec       = toq.querySpec()
		loadedTypes = [3]bool{
			toq.withTicket != nil,
			toq.withCustomerOwner != nil,
			toq.withPassengerOwner != nil,
		}
	)
	if toq.withCustomerOwner != nil || toq.withPassengerOwner != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, ticketowner.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TicketOwner).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TicketOwner{config: toq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(toq.modifiers) > 0 {
		_spec.Modifiers = toq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, toq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := toq.withTicket; query != nil {
		if err := toq.loadTicket(ctx, query, nodes, nil,
			func(n *TicketOwner, e *Ticket) { n.Edges.Ticket = e }); err != nil {
			return nil, err
		}
	}
	if query := toq.withCustomerOwner; query != nil {
		if err := toq.loadCustomerOwner(ctx, query, nodes, nil,
			func(n *TicketOwner, e *Customer) { n.Edges.CustomerOwner = e }); err != nil {
			return nil, err
		}
	}
	if query := toq.withPassengerOwner; query != nil {
		if err := toq.loadPassengerOwner(ctx, query, nodes, nil,
			func(n *TicketOwner, e *Passenger) { n.Edges.PassengerOwner = e }); err != nil {
			return nil, err
		}
	}
	for i := range toq.loadTotal {
		if err := toq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (toq *TicketOwnerQuery) loadTicket(ctx context.Context, query *TicketQuery, nodes []*TicketOwner, init func(*TicketOwner), assign func(*TicketOwner, *Ticket)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*TicketOwner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.InValues(ticketowner.TicketColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ticket_owner_ticket
		if fk == nil {
			return fmt.Errorf(`foreign-key "ticket_owner_ticket" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ticket_owner_ticket" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (toq *TicketOwnerQuery) loadCustomerOwner(ctx context.Context, query *CustomerQuery, nodes []*TicketOwner, init func(*TicketOwner), assign func(*TicketOwner, *Customer)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TicketOwner)
	for i := range nodes {
		if nodes[i].customer_ticket == nil {
			continue
		}
		fk := *nodes[i].customer_ticket
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(customer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "customer_ticket" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (toq *TicketOwnerQuery) loadPassengerOwner(ctx context.Context, query *PassengerQuery, nodes []*TicketOwner, init func(*TicketOwner), assign func(*TicketOwner, *Passenger)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TicketOwner)
	for i := range nodes {
		if nodes[i].passenger_ticket == nil {
			continue
		}
		fk := *nodes[i].passenger_ticket
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(passenger.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "passenger_ticket" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (toq *TicketOwnerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := toq.querySpec()
	if len(toq.modifiers) > 0 {
		_spec.Modifiers = toq.modifiers
	}
	_spec.Node.Columns = toq.fields
	if len(toq.fields) > 0 {
		_spec.Unique = toq.unique != nil && *toq.unique
	}
	return sqlgraph.CountNodes(ctx, toq.driver, _spec)
}

func (toq *TicketOwnerQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := toq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (toq *TicketOwnerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ticketowner.Table,
			Columns: ticketowner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: ticketowner.FieldID,
			},
		},
		From:   toq.sql,
		Unique: true,
	}
	if unique := toq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := toq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ticketowner.FieldID)
		for i := range fields {
			if fields[i] != ticketowner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := toq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := toq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := toq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := toq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (toq *TicketOwnerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(toq.driver.Dialect())
	t1 := builder.Table(ticketowner.Table)
	columns := toq.fields
	if len(columns) == 0 {
		columns = ticketowner.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if toq.sql != nil {
		selector = toq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if toq.unique != nil && *toq.unique {
		selector.Distinct()
	}
	for _, p := range toq.predicates {
		p(selector)
	}
	for _, p := range toq.order {
		p(selector)
	}
	if offset := toq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := toq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TicketOwnerGroupBy is the group-by builder for TicketOwner entities.
type TicketOwnerGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (togb *TicketOwnerGroupBy) Aggregate(fns ...AggregateFunc) *TicketOwnerGroupBy {
	togb.fns = append(togb.fns, fns...)
	return togb
}

// Scan applies the group-by query and scans the result into the given value.
func (togb *TicketOwnerGroupBy) Scan(ctx context.Context, v any) error {
	query, err := togb.path(ctx)
	if err != nil {
		return err
	}
	togb.sql = query
	return togb.sqlScan(ctx, v)
}

func (togb *TicketOwnerGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range togb.fields {
		if !ticketowner.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := togb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := togb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (togb *TicketOwnerGroupBy) sqlQuery() *sql.Selector {
	selector := togb.sql.Select()
	aggregation := make([]string, 0, len(togb.fns))
	for _, fn := range togb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(togb.fields)+len(togb.fns))
		for _, f := range togb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(togb.fields...)...)
}

// TicketOwnerSelect is the builder for selecting fields of TicketOwner entities.
type TicketOwnerSelect struct {
	*TicketOwnerQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tos *TicketOwnerSelect) Aggregate(fns ...AggregateFunc) *TicketOwnerSelect {
	tos.fns = append(tos.fns, fns...)
	return tos
}

// Scan applies the selector query and scans the result into the given value.
func (tos *TicketOwnerSelect) Scan(ctx context.Context, v any) error {
	if err := tos.prepareQuery(ctx); err != nil {
		return err
	}
	tos.sql = tos.TicketOwnerQuery.sqlQuery(ctx)
	return tos.sqlScan(ctx, v)
}

func (tos *TicketOwnerSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(tos.fns))
	for _, fn := range tos.fns {
		aggregation = append(aggregation, fn(tos.sql))
	}
	switch n := len(*tos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		tos.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		tos.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := tos.sql.Query()
	if err := tos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
