// Code generated by ent, DO NOT EDIT.

package booking

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the booking type in the database.
	Label = "booking"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFlightID holds the string denoting the flight_id field in the database.
	FieldFlightID = "flight_id"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldPassengerID holds the string denoting the passenger_id field in the database.
	FieldPassengerID = "passenger_id"
	// FieldEconomyTickets holds the string denoting the economy_tickets field in the database.
	FieldEconomyTickets = "economy_tickets"
	// FieldBusinessTickets holds the string denoting the business_tickets field in the database.
	FieldBusinessTickets = "business_tickets"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeBookingFlight holds the string denoting the booking_flight edge name in mutations.
	EdgeBookingFlight = "booking_flight"
	// EdgeCustomerBookingTickets holds the string denoting the customer_booking_tickets edge name in mutations.
	EdgeCustomerBookingTickets = "customer_booking_tickets"
	// EdgePassengerBookingTickets holds the string denoting the passenger_booking_tickets edge name in mutations.
	EdgePassengerBookingTickets = "passenger_booking_tickets"
	// EdgeBookingTickets holds the string denoting the booking_tickets edge name in mutations.
	EdgeBookingTickets = "booking_tickets"
	// Table holds the table name of the booking in the database.
	Table = "bookings"
	// BookingFlightTable is the table that holds the booking_flight relation/edge.
	BookingFlightTable = "bookings"
	// BookingFlightInverseTable is the table name for the Flight entity.
	// It exists in this package in order to avoid circular dependency with the "flight" package.
	BookingFlightInverseTable = "flights"
	// BookingFlightColumn is the table column denoting the booking_flight relation/edge.
	BookingFlightColumn = "flight_id"
	// CustomerBookingTicketsTable is the table that holds the customer_booking_tickets relation/edge.
	CustomerBookingTicketsTable = "bookings"
	// CustomerBookingTicketsInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerBookingTicketsInverseTable = "customers"
	// CustomerBookingTicketsColumn is the table column denoting the customer_booking_tickets relation/edge.
	CustomerBookingTicketsColumn = "customer_id"
	// PassengerBookingTicketsTable is the table that holds the passenger_booking_tickets relation/edge.
	PassengerBookingTicketsTable = "bookings"
	// PassengerBookingTicketsInverseTable is the table name for the Passenger entity.
	// It exists in this package in order to avoid circular dependency with the "passenger" package.
	PassengerBookingTicketsInverseTable = "passengers"
	// PassengerBookingTicketsColumn is the table column denoting the passenger_booking_tickets relation/edge.
	PassengerBookingTicketsColumn = "passenger_id"
	// BookingTicketsTable is the table that holds the booking_tickets relation/edge.
	BookingTicketsTable = "tickets"
	// BookingTicketsInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	BookingTicketsInverseTable = "tickets"
	// BookingTicketsColumn is the table column denoting the booking_tickets relation/edge.
	BookingTicketsColumn = "booking_id"
)

// Columns holds all SQL columns for booking fields.
var Columns = []string{
	FieldID,
	FieldFlightID,
	FieldCustomerID,
	FieldPassengerID,
	FieldEconomyTickets,
	FieldBusinessTickets,
	FieldStatus,
	FieldType,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEconomyTickets holds the default value on creation for the "economy_tickets" field.
	DefaultEconomyTickets int
	// EconomyTicketsValidator is a validator for the "economy_tickets" field. It is called by the builders before save.
	EconomyTicketsValidator func(int) error
	// DefaultBusinessTickets holds the default value on creation for the "business_tickets" field.
	DefaultBusinessTickets int
	// BusinessTicketsValidator is a validator for the "business_tickets" field. It is called by the builders before save.
	BusinessTicketsValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusSuccess  Status = "Success"
	StatusFail     Status = "Fail"
	StatusCanceled Status = "Canceled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusSuccess, StatusFail, StatusCanceled:
		return nil
	default:
		return fmt.Errorf("booking: invalid enum value for status field: %q", s)
	}
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeOneWay    Type = "OneWay"
	TypeRoundTrip Type = "RoundTrip"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeOneWay, TypeRoundTrip:
		return nil
	default:
		return fmt.Errorf("booking: invalid enum value for type field: %q", _type)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
