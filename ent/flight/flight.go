// Code generated by ent, DO NOT EDIT.

package flight

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the flight type in the database.
	Label = "flight"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFlightCode holds the string denoting the flight_code field in the database.
	FieldFlightCode = "flight_code"
	// FieldFrom holds the string denoting the from field in the database.
	FieldFrom = "from"
	// FieldTo holds the string denoting the to field in the database.
	FieldTo = "to"
	// FieldDepartureDate holds the string denoting the departure_date field in the database.
	FieldDepartureDate = "departure_date"
	// FieldDepartureTime holds the string denoting the departure_time field in the database.
	FieldDepartureTime = "departure_time"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldCapacity holds the string denoting the capacity field in the database.
	FieldCapacity = "capacity"
	// FieldEconomyAvailableSeat holds the string denoting the economy_available_seat field in the database.
	FieldEconomyAvailableSeat = "economy_available_seat"
	// FieldBusinessAvailableSeat holds the string denoting the business_available_seat field in the database.
	FieldBusinessAvailableSeat = "business_available_seat"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeBelongsTo holds the string denoting the belongs_to edge name in mutations.
	EdgeBelongsTo = "belongs_to"
	// EdgeFlightTickets holds the string denoting the flight_tickets edge name in mutations.
	EdgeFlightTickets = "flight_tickets"
	// Table holds the table name of the flight in the database.
	Table = "flights"
	// BelongsToTable is the table that holds the belongs_to relation/edge.
	BelongsToTable = "bookings"
	// BelongsToInverseTable is the table name for the Booking entity.
	// It exists in this package in order to avoid circular dependency with the "booking" package.
	BelongsToInverseTable = "bookings"
	// BelongsToColumn is the table column denoting the belongs_to relation/edge.
	BelongsToColumn = "flight_id"
	// FlightTicketsTable is the table that holds the flight_tickets relation/edge.
	FlightTicketsTable = "tickets"
	// FlightTicketsInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	FlightTicketsInverseTable = "tickets"
	// FlightTicketsColumn is the table column denoting the flight_tickets relation/edge.
	FlightTicketsColumn = "flight_id"
)

// Columns holds all SQL columns for flight fields.
var Columns = []string{
	FieldID,
	FieldFlightCode,
	FieldFrom,
	FieldTo,
	FieldDepartureDate,
	FieldDepartureTime,
	FieldDuration,
	FieldCapacity,
	FieldEconomyAvailableSeat,
	FieldBusinessAvailableSeat,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FlightCodeValidator is a validator for the "flight_code" field. It is called by the builders before save.
	FlightCodeValidator func(string) error
	// FromValidator is a validator for the "from" field. It is called by the builders before save.
	FromValidator func(string) error
	// ToValidator is a validator for the "to" field. It is called by the builders before save.
	ToValidator func(string) error
	// DurationValidator is a validator for the "duration" field. It is called by the builders before save.
	DurationValidator func(int) error
	// CapacityValidator is a validator for the "capacity" field. It is called by the builders before save.
	CapacityValidator func(int) error
	// EconomyAvailableSeatValidator is a validator for the "economy_available_seat" field. It is called by the builders before save.
	EconomyAvailableSeatValidator func(int) error
	// BusinessAvailableSeatValidator is a validator for the "business_available_seat" field. It is called by the builders before save.
	BusinessAvailableSeatValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusScheduled Status = "Scheduled"
	StatusDelayed   Status = "Delayed"
	StatusDeparted  Status = "Departed"
	StatusArrived   Status = "Arrived"
	StatusCanceled  Status = "Canceled"
	StatusFull      Status = "Full"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusScheduled, StatusDelayed, StatusDeparted, StatusArrived, StatusCanceled, StatusFull:
		return nil
	default:
		return fmt.Errorf("flight: invalid enum value for status field: %q", s)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
