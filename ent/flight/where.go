// Code generated by ent, DO NOT EDIT.

package flight

import (
	"mock_project/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// FlightCode applies equality check predicate on the "flight_code" field. It's identical to FlightCodeEQ.
func FlightCode(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlightCode), v))
	})
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrom), v))
	})
}

// To applies equality check predicate on the "to" field. It's identical to ToEQ.
func To(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTo), v))
	})
}

// DepartureDate applies equality check predicate on the "departure_date" field. It's identical to DepartureDateEQ.
func DepartureDate(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepartureDate), v))
	})
}

// DepartureTime applies equality check predicate on the "departure_time" field. It's identical to DepartureTimeEQ.
func DepartureTime(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepartureTime), v))
	})
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// Capacity applies equality check predicate on the "capacity" field. It's identical to CapacityEQ.
func Capacity(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCapacity), v))
	})
}

// EconomyAvailableSeat applies equality check predicate on the "economy_available_seat" field. It's identical to EconomyAvailableSeatEQ.
func EconomyAvailableSeat(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEconomyAvailableSeat), v))
	})
}

// BusinessAvailableSeat applies equality check predicate on the "business_available_seat" field. It's identical to BusinessAvailableSeatEQ.
func BusinessAvailableSeat(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessAvailableSeat), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// FlightCodeEQ applies the EQ predicate on the "flight_code" field.
func FlightCodeEQ(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlightCode), v))
	})
}

// FlightCodeNEQ applies the NEQ predicate on the "flight_code" field.
func FlightCodeNEQ(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFlightCode), v))
	})
}

// FlightCodeIn applies the In predicate on the "flight_code" field.
func FlightCodeIn(vs ...string) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFlightCode), v...))
	})
}

// FlightCodeNotIn applies the NotIn predicate on the "flight_code" field.
func FlightCodeNotIn(vs ...string) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFlightCode), v...))
	})
}

// FlightCodeGT applies the GT predicate on the "flight_code" field.
func FlightCodeGT(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFlightCode), v))
	})
}

// FlightCodeGTE applies the GTE predicate on the "flight_code" field.
func FlightCodeGTE(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFlightCode), v))
	})
}

// FlightCodeLT applies the LT predicate on the "flight_code" field.
func FlightCodeLT(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFlightCode), v))
	})
}

// FlightCodeLTE applies the LTE predicate on the "flight_code" field.
func FlightCodeLTE(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFlightCode), v))
	})
}

// FlightCodeContains applies the Contains predicate on the "flight_code" field.
func FlightCodeContains(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFlightCode), v))
	})
}

// FlightCodeHasPrefix applies the HasPrefix predicate on the "flight_code" field.
func FlightCodeHasPrefix(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFlightCode), v))
	})
}

// FlightCodeHasSuffix applies the HasSuffix predicate on the "flight_code" field.
func FlightCodeHasSuffix(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFlightCode), v))
	})
}

// FlightCodeEqualFold applies the EqualFold predicate on the "flight_code" field.
func FlightCodeEqualFold(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFlightCode), v))
	})
}

// FlightCodeContainsFold applies the ContainsFold predicate on the "flight_code" field.
func FlightCodeContainsFold(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFlightCode), v))
	})
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrom), v))
	})
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFrom), v))
	})
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...string) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFrom), v...))
	})
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...string) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFrom), v...))
	})
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFrom), v))
	})
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFrom), v))
	})
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFrom), v))
	})
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFrom), v))
	})
}

// FromContains applies the Contains predicate on the "from" field.
func FromContains(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFrom), v))
	})
}

// FromHasPrefix applies the HasPrefix predicate on the "from" field.
func FromHasPrefix(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFrom), v))
	})
}

// FromHasSuffix applies the HasSuffix predicate on the "from" field.
func FromHasSuffix(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFrom), v))
	})
}

// FromEqualFold applies the EqualFold predicate on the "from" field.
func FromEqualFold(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFrom), v))
	})
}

// FromContainsFold applies the ContainsFold predicate on the "from" field.
func FromContainsFold(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFrom), v))
	})
}

// ToEQ applies the EQ predicate on the "to" field.
func ToEQ(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTo), v))
	})
}

// ToNEQ applies the NEQ predicate on the "to" field.
func ToNEQ(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTo), v))
	})
}

// ToIn applies the In predicate on the "to" field.
func ToIn(vs ...string) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTo), v...))
	})
}

// ToNotIn applies the NotIn predicate on the "to" field.
func ToNotIn(vs ...string) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTo), v...))
	})
}

// ToGT applies the GT predicate on the "to" field.
func ToGT(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTo), v))
	})
}

// ToGTE applies the GTE predicate on the "to" field.
func ToGTE(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTo), v))
	})
}

// ToLT applies the LT predicate on the "to" field.
func ToLT(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTo), v))
	})
}

// ToLTE applies the LTE predicate on the "to" field.
func ToLTE(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTo), v))
	})
}

// ToContains applies the Contains predicate on the "to" field.
func ToContains(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTo), v))
	})
}

// ToHasPrefix applies the HasPrefix predicate on the "to" field.
func ToHasPrefix(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTo), v))
	})
}

// ToHasSuffix applies the HasSuffix predicate on the "to" field.
func ToHasSuffix(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTo), v))
	})
}

// ToEqualFold applies the EqualFold predicate on the "to" field.
func ToEqualFold(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTo), v))
	})
}

// ToContainsFold applies the ContainsFold predicate on the "to" field.
func ToContainsFold(v string) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTo), v))
	})
}

// DepartureDateEQ applies the EQ predicate on the "departure_date" field.
func DepartureDateEQ(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepartureDate), v))
	})
}

// DepartureDateNEQ applies the NEQ predicate on the "departure_date" field.
func DepartureDateNEQ(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDepartureDate), v))
	})
}

// DepartureDateIn applies the In predicate on the "departure_date" field.
func DepartureDateIn(vs ...time.Time) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDepartureDate), v...))
	})
}

// DepartureDateNotIn applies the NotIn predicate on the "departure_date" field.
func DepartureDateNotIn(vs ...time.Time) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDepartureDate), v...))
	})
}

// DepartureDateGT applies the GT predicate on the "departure_date" field.
func DepartureDateGT(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDepartureDate), v))
	})
}

// DepartureDateGTE applies the GTE predicate on the "departure_date" field.
func DepartureDateGTE(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDepartureDate), v))
	})
}

// DepartureDateLT applies the LT predicate on the "departure_date" field.
func DepartureDateLT(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDepartureDate), v))
	})
}

// DepartureDateLTE applies the LTE predicate on the "departure_date" field.
func DepartureDateLTE(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDepartureDate), v))
	})
}

// DepartureTimeEQ applies the EQ predicate on the "departure_time" field.
func DepartureTimeEQ(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepartureTime), v))
	})
}

// DepartureTimeNEQ applies the NEQ predicate on the "departure_time" field.
func DepartureTimeNEQ(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDepartureTime), v))
	})
}

// DepartureTimeIn applies the In predicate on the "departure_time" field.
func DepartureTimeIn(vs ...time.Time) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDepartureTime), v...))
	})
}

// DepartureTimeNotIn applies the NotIn predicate on the "departure_time" field.
func DepartureTimeNotIn(vs ...time.Time) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDepartureTime), v...))
	})
}

// DepartureTimeGT applies the GT predicate on the "departure_time" field.
func DepartureTimeGT(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDepartureTime), v))
	})
}

// DepartureTimeGTE applies the GTE predicate on the "departure_time" field.
func DepartureTimeGTE(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDepartureTime), v))
	})
}

// DepartureTimeLT applies the LT predicate on the "departure_time" field.
func DepartureTimeLT(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDepartureTime), v))
	})
}

// DepartureTimeLTE applies the LTE predicate on the "departure_time" field.
func DepartureTimeLTE(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDepartureTime), v))
	})
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDuration), v))
	})
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDuration), v...))
	})
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDuration), v...))
	})
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDuration), v))
	})
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDuration), v))
	})
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDuration), v))
	})
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDuration), v))
	})
}

// CapacityEQ applies the EQ predicate on the "capacity" field.
func CapacityEQ(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCapacity), v))
	})
}

// CapacityNEQ applies the NEQ predicate on the "capacity" field.
func CapacityNEQ(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCapacity), v))
	})
}

// CapacityIn applies the In predicate on the "capacity" field.
func CapacityIn(vs ...int) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCapacity), v...))
	})
}

// CapacityNotIn applies the NotIn predicate on the "capacity" field.
func CapacityNotIn(vs ...int) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCapacity), v...))
	})
}

// CapacityGT applies the GT predicate on the "capacity" field.
func CapacityGT(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCapacity), v))
	})
}

// CapacityGTE applies the GTE predicate on the "capacity" field.
func CapacityGTE(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCapacity), v))
	})
}

// CapacityLT applies the LT predicate on the "capacity" field.
func CapacityLT(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCapacity), v))
	})
}

// CapacityLTE applies the LTE predicate on the "capacity" field.
func CapacityLTE(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCapacity), v))
	})
}

// EconomyAvailableSeatEQ applies the EQ predicate on the "economy_available_seat" field.
func EconomyAvailableSeatEQ(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEconomyAvailableSeat), v))
	})
}

// EconomyAvailableSeatNEQ applies the NEQ predicate on the "economy_available_seat" field.
func EconomyAvailableSeatNEQ(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEconomyAvailableSeat), v))
	})
}

// EconomyAvailableSeatIn applies the In predicate on the "economy_available_seat" field.
func EconomyAvailableSeatIn(vs ...int) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEconomyAvailableSeat), v...))
	})
}

// EconomyAvailableSeatNotIn applies the NotIn predicate on the "economy_available_seat" field.
func EconomyAvailableSeatNotIn(vs ...int) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEconomyAvailableSeat), v...))
	})
}

// EconomyAvailableSeatGT applies the GT predicate on the "economy_available_seat" field.
func EconomyAvailableSeatGT(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEconomyAvailableSeat), v))
	})
}

// EconomyAvailableSeatGTE applies the GTE predicate on the "economy_available_seat" field.
func EconomyAvailableSeatGTE(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEconomyAvailableSeat), v))
	})
}

// EconomyAvailableSeatLT applies the LT predicate on the "economy_available_seat" field.
func EconomyAvailableSeatLT(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEconomyAvailableSeat), v))
	})
}

// EconomyAvailableSeatLTE applies the LTE predicate on the "economy_available_seat" field.
func EconomyAvailableSeatLTE(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEconomyAvailableSeat), v))
	})
}

// BusinessAvailableSeatEQ applies the EQ predicate on the "business_available_seat" field.
func BusinessAvailableSeatEQ(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessAvailableSeat), v))
	})
}

// BusinessAvailableSeatNEQ applies the NEQ predicate on the "business_available_seat" field.
func BusinessAvailableSeatNEQ(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBusinessAvailableSeat), v))
	})
}

// BusinessAvailableSeatIn applies the In predicate on the "business_available_seat" field.
func BusinessAvailableSeatIn(vs ...int) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBusinessAvailableSeat), v...))
	})
}

// BusinessAvailableSeatNotIn applies the NotIn predicate on the "business_available_seat" field.
func BusinessAvailableSeatNotIn(vs ...int) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBusinessAvailableSeat), v...))
	})
}

// BusinessAvailableSeatGT applies the GT predicate on the "business_available_seat" field.
func BusinessAvailableSeatGT(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBusinessAvailableSeat), v))
	})
}

// BusinessAvailableSeatGTE applies the GTE predicate on the "business_available_seat" field.
func BusinessAvailableSeatGTE(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBusinessAvailableSeat), v))
	})
}

// BusinessAvailableSeatLT applies the LT predicate on the "business_available_seat" field.
func BusinessAvailableSeatLT(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBusinessAvailableSeat), v))
	})
}

// BusinessAvailableSeatLTE applies the LTE predicate on the "business_available_seat" field.
func BusinessAvailableSeatLTE(v int) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBusinessAvailableSeat), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Flight {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasBelongsTo applies the HasEdge predicate on the "belongs_to" edge.
func HasBelongsTo() predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BelongsToTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BelongsToTable, BelongsToColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBelongsToWith applies the HasEdge predicate on the "belongs_to" edge with a given conditions (other predicates).
func HasBelongsToWith(preds ...predicate.Booking) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BelongsToInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BelongsToTable, BelongsToColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFlightTickets applies the HasEdge predicate on the "flight_tickets" edge.
func HasFlightTickets() predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FlightTicketsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FlightTicketsTable, FlightTicketsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFlightTicketsWith applies the HasEdge predicate on the "flight_tickets" edge with a given conditions (other predicates).
func HasFlightTicketsWith(preds ...predicate.Ticket) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FlightTicketsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FlightTicketsTable, FlightTicketsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Flight) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Flight) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Flight) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		p(s.Not())
	})
}
