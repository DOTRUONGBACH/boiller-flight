// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"mock_project/ent/account"
	"mock_project/ent/booking"
	"mock_project/ent/customer"
	"mock_project/ent/flight"
	"mock_project/ent/passenger"
	"mock_project/ent/ticket"
	"mock_project/ent/ticketowner"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    uuid.UUID `msgpack:"i"`
	Value Value     `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AccountEdge is the edge representation of Account.
type AccountEdge struct {
	Node   *Account `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// AccountConnection is the connection containing edges to Account.
type AccountConnection struct {
	Edges      []*AccountEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *AccountConnection) build(nodes []*Account, pager *accountPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Account
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Account {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Account {
			return nodes[i]
		}
	}
	c.Edges = make([]*AccountEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AccountEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AccountPaginateOption enables pagination customization.
type AccountPaginateOption func(*accountPager) error

// WithAccountOrder configures pagination ordering.
func WithAccountOrder(order *AccountOrder) AccountPaginateOption {
	if order == nil {
		order = DefaultAccountOrder
	}
	o := *order
	return func(pager *accountPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAccountOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAccountFilter configures pagination filter.
func WithAccountFilter(filter func(*AccountQuery) (*AccountQuery, error)) AccountPaginateOption {
	return func(pager *accountPager) error {
		if filter == nil {
			return errors.New("AccountQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type accountPager struct {
	order  *AccountOrder
	filter func(*AccountQuery) (*AccountQuery, error)
}

func newAccountPager(opts []AccountPaginateOption) (*accountPager, error) {
	pager := &accountPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAccountOrder
	}
	return pager, nil
}

func (p *accountPager) applyFilter(query *AccountQuery) (*AccountQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *accountPager) toCursor(a *Account) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *accountPager) applyCursors(query *AccountQuery, after, before *Cursor) *AccountQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultAccountOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *accountPager) applyOrder(query *AccountQuery, reverse bool) *AccountQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultAccountOrder.Field {
		query = query.Order(direction.orderFunc(DefaultAccountOrder.Field.field))
	}
	return query
}

func (p *accountPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAccountOrder.Field {
			b.Comma().Ident(DefaultAccountOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Account.
func (a *AccountQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AccountPaginateOption,
) (*AccountConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAccountPager(opts)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &AccountConnection{Edges: []*AccountEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = a.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	a = pager.applyCursors(a, after, before)
	a = pager.applyOrder(a, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AccountOrderFieldEmail orders Account by email.
	AccountOrderFieldEmail = &AccountOrderField{
		field: account.FieldEmail,
		toCursor: func(a *Account) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.Email,
			}
		},
	}
	// AccountOrderFieldPassword orders Account by password.
	AccountOrderFieldPassword = &AccountOrderField{
		field: account.FieldPassword,
		toCursor: func(a *Account) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.Password,
			}
		},
	}
	// AccountOrderFieldRole orders Account by role.
	AccountOrderFieldRole = &AccountOrderField{
		field: account.FieldRole,
		toCursor: func(a *Account) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.Role,
			}
		},
	}
	// AccountOrderFieldStatus orders Account by status.
	AccountOrderFieldStatus = &AccountOrderField{
		field: account.FieldStatus,
		toCursor: func(a *Account) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.Status,
			}
		},
	}
	// AccountOrderFieldCreatedAt orders Account by created_at.
	AccountOrderFieldCreatedAt = &AccountOrderField{
		field: account.FieldCreatedAt,
		toCursor: func(a *Account) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.CreatedAt,
			}
		},
	}
	// AccountOrderFieldUpdatedAt orders Account by updated_at.
	AccountOrderFieldUpdatedAt = &AccountOrderField{
		field: account.FieldUpdatedAt,
		toCursor: func(a *Account) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AccountOrderField) String() string {
	var str string
	switch f.field {
	case account.FieldEmail:
		str = "EMAIL"
	case account.FieldPassword:
		str = "PASSWORD"
	case account.FieldRole:
		str = "ROLE"
	case account.FieldStatus:
		str = "STATUS"
	case account.FieldCreatedAt:
		str = "CREATED_AT"
	case account.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AccountOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AccountOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AccountOrderField %T must be a string", v)
	}
	switch str {
	case "EMAIL":
		*f = *AccountOrderFieldEmail
	case "PASSWORD":
		*f = *AccountOrderFieldPassword
	case "ROLE":
		*f = *AccountOrderFieldRole
	case "STATUS":
		*f = *AccountOrderFieldStatus
	case "CREATED_AT":
		*f = *AccountOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *AccountOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid AccountOrderField", str)
	}
	return nil
}

// AccountOrderField defines the ordering field of Account.
type AccountOrderField struct {
	field    string
	toCursor func(*Account) Cursor
}

// AccountOrder defines the ordering of Account.
type AccountOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *AccountOrderField `json:"field"`
}

// DefaultAccountOrder is the default ordering of Account.
var DefaultAccountOrder = &AccountOrder{
	Direction: OrderDirectionAsc,
	Field: &AccountOrderField{
		field: account.FieldID,
		toCursor: func(a *Account) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Account into AccountEdge.
func (a *Account) ToEdge(order *AccountOrder) *AccountEdge {
	if order == nil {
		order = DefaultAccountOrder
	}
	return &AccountEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// BookingEdge is the edge representation of Booking.
type BookingEdge struct {
	Node   *Booking `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// BookingConnection is the connection containing edges to Booking.
type BookingConnection struct {
	Edges      []*BookingEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *BookingConnection) build(nodes []*Booking, pager *bookingPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Booking
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Booking {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Booking {
			return nodes[i]
		}
	}
	c.Edges = make([]*BookingEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &BookingEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// BookingPaginateOption enables pagination customization.
type BookingPaginateOption func(*bookingPager) error

// WithBookingOrder configures pagination ordering.
func WithBookingOrder(order *BookingOrder) BookingPaginateOption {
	if order == nil {
		order = DefaultBookingOrder
	}
	o := *order
	return func(pager *bookingPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultBookingOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithBookingFilter configures pagination filter.
func WithBookingFilter(filter func(*BookingQuery) (*BookingQuery, error)) BookingPaginateOption {
	return func(pager *bookingPager) error {
		if filter == nil {
			return errors.New("BookingQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type bookingPager struct {
	order  *BookingOrder
	filter func(*BookingQuery) (*BookingQuery, error)
}

func newBookingPager(opts []BookingPaginateOption) (*bookingPager, error) {
	pager := &bookingPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultBookingOrder
	}
	return pager, nil
}

func (p *bookingPager) applyFilter(query *BookingQuery) (*BookingQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *bookingPager) toCursor(b *Booking) Cursor {
	return p.order.Field.toCursor(b)
}

func (p *bookingPager) applyCursors(query *BookingQuery, after, before *Cursor) *BookingQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultBookingOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *bookingPager) applyOrder(query *BookingQuery, reverse bool) *BookingQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultBookingOrder.Field {
		query = query.Order(direction.orderFunc(DefaultBookingOrder.Field.field))
	}
	return query
}

func (p *bookingPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultBookingOrder.Field {
			b.Comma().Ident(DefaultBookingOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Booking.
func (b *BookingQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BookingPaginateOption,
) (*BookingConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBookingPager(opts)
	if err != nil {
		return nil, err
	}
	if b, err = pager.applyFilter(b); err != nil {
		return nil, err
	}
	conn := &BookingConnection{Edges: []*BookingEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = b.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	b = pager.applyCursors(b, after, before)
	b = pager.applyOrder(b, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		b.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := b.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := b.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// BookingOrderFieldFlightID orders Booking by flight_id.
	BookingOrderFieldFlightID = &BookingOrderField{
		field: booking.FieldFlightID,
		toCursor: func(b *Booking) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.FlightID,
			}
		},
	}
	// BookingOrderFieldCustomerID orders Booking by customer_id.
	BookingOrderFieldCustomerID = &BookingOrderField{
		field: booking.FieldCustomerID,
		toCursor: func(b *Booking) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.CustomerID,
			}
		},
	}
	// BookingOrderFieldPassengerID orders Booking by passenger_id.
	BookingOrderFieldPassengerID = &BookingOrderField{
		field: booking.FieldPassengerID,
		toCursor: func(b *Booking) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.PassengerID,
			}
		},
	}
	// BookingOrderFieldEconomyTickets orders Booking by economy_tickets.
	BookingOrderFieldEconomyTickets = &BookingOrderField{
		field: booking.FieldEconomyTickets,
		toCursor: func(b *Booking) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.EconomyTickets,
			}
		},
	}
	// BookingOrderFieldBusinessTickets orders Booking by business_tickets.
	BookingOrderFieldBusinessTickets = &BookingOrderField{
		field: booking.FieldBusinessTickets,
		toCursor: func(b *Booking) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.BusinessTickets,
			}
		},
	}
	// BookingOrderFieldStatus orders Booking by status.
	BookingOrderFieldStatus = &BookingOrderField{
		field: booking.FieldStatus,
		toCursor: func(b *Booking) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.Status,
			}
		},
	}
	// BookingOrderFieldType orders Booking by type.
	BookingOrderFieldType = &BookingOrderField{
		field: booking.FieldType,
		toCursor: func(b *Booking) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.Type,
			}
		},
	}
	// BookingOrderFieldCreatedAt orders Booking by created_at.
	BookingOrderFieldCreatedAt = &BookingOrderField{
		field: booking.FieldCreatedAt,
		toCursor: func(b *Booking) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.CreatedAt,
			}
		},
	}
	// BookingOrderFieldUpdatedAt orders Booking by updated_at.
	BookingOrderFieldUpdatedAt = &BookingOrderField{
		field: booking.FieldUpdatedAt,
		toCursor: func(b *Booking) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f BookingOrderField) String() string {
	var str string
	switch f.field {
	case booking.FieldFlightID:
		str = "FLIGHT_ID"
	case booking.FieldCustomerID:
		str = "CUSTOMER_ID"
	case booking.FieldPassengerID:
		str = "PASSENGER_ID"
	case booking.FieldEconomyTickets:
		str = "ECONOMY_TICKET"
	case booking.FieldBusinessTickets:
		str = "BUSINESS_TICKET"
	case booking.FieldStatus:
		str = "STATUS"
	case booking.FieldType:
		str = "TYPE"
	case booking.FieldCreatedAt:
		str = "CREATED_AT"
	case booking.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f BookingOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *BookingOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("BookingOrderField %T must be a string", v)
	}
	switch str {
	case "FLIGHT_ID":
		*f = *BookingOrderFieldFlightID
	case "CUSTOMER_ID":
		*f = *BookingOrderFieldCustomerID
	case "PASSENGER_ID":
		*f = *BookingOrderFieldPassengerID
	case "ECONOMY_TICKET":
		*f = *BookingOrderFieldEconomyTickets
	case "BUSINESS_TICKET":
		*f = *BookingOrderFieldBusinessTickets
	case "STATUS":
		*f = *BookingOrderFieldStatus
	case "TYPE":
		*f = *BookingOrderFieldType
	case "CREATED_AT":
		*f = *BookingOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *BookingOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid BookingOrderField", str)
	}
	return nil
}

// BookingOrderField defines the ordering field of Booking.
type BookingOrderField struct {
	field    string
	toCursor func(*Booking) Cursor
}

// BookingOrder defines the ordering of Booking.
type BookingOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *BookingOrderField `json:"field"`
}

// DefaultBookingOrder is the default ordering of Booking.
var DefaultBookingOrder = &BookingOrder{
	Direction: OrderDirectionAsc,
	Field: &BookingOrderField{
		field: booking.FieldID,
		toCursor: func(b *Booking) Cursor {
			return Cursor{ID: b.ID}
		},
	},
}

// ToEdge converts Booking into BookingEdge.
func (b *Booking) ToEdge(order *BookingOrder) *BookingEdge {
	if order == nil {
		order = DefaultBookingOrder
	}
	return &BookingEdge{
		Node:   b,
		Cursor: order.Field.toCursor(b),
	}
}

// CustomerEdge is the edge representation of Customer.
type CustomerEdge struct {
	Node   *Customer `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// CustomerConnection is the connection containing edges to Customer.
type CustomerConnection struct {
	Edges      []*CustomerEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *CustomerConnection) build(nodes []*Customer, pager *customerPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Customer
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Customer {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Customer {
			return nodes[i]
		}
	}
	c.Edges = make([]*CustomerEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CustomerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CustomerPaginateOption enables pagination customization.
type CustomerPaginateOption func(*customerPager) error

// WithCustomerOrder configures pagination ordering.
func WithCustomerOrder(order *CustomerOrder) CustomerPaginateOption {
	if order == nil {
		order = DefaultCustomerOrder
	}
	o := *order
	return func(pager *customerPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCustomerOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCustomerFilter configures pagination filter.
func WithCustomerFilter(filter func(*CustomerQuery) (*CustomerQuery, error)) CustomerPaginateOption {
	return func(pager *customerPager) error {
		if filter == nil {
			return errors.New("CustomerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type customerPager struct {
	order  *CustomerOrder
	filter func(*CustomerQuery) (*CustomerQuery, error)
}

func newCustomerPager(opts []CustomerPaginateOption) (*customerPager, error) {
	pager := &customerPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCustomerOrder
	}
	return pager, nil
}

func (p *customerPager) applyFilter(query *CustomerQuery) (*CustomerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *customerPager) toCursor(c *Customer) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *customerPager) applyCursors(query *CustomerQuery, after, before *Cursor) *CustomerQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultCustomerOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *customerPager) applyOrder(query *CustomerQuery, reverse bool) *CustomerQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultCustomerOrder.Field {
		query = query.Order(direction.orderFunc(DefaultCustomerOrder.Field.field))
	}
	return query
}

func (p *customerPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCustomerOrder.Field {
			b.Comma().Ident(DefaultCustomerOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Customer.
func (c *CustomerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CustomerPaginateOption,
) (*CustomerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCustomerPager(opts)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CustomerConnection{Edges: []*CustomerEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = c.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	c = pager.applyCursors(c, after, before)
	c = pager.applyOrder(c, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CustomerOrderFieldName orders Customer by name.
	CustomerOrderFieldName = &CustomerOrderField{
		field: customer.FieldName,
		toCursor: func(c *Customer) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Name,
			}
		},
	}
	// CustomerOrderFieldCitizenID orders Customer by citizen_id.
	CustomerOrderFieldCitizenID = &CustomerOrderField{
		field: customer.FieldCitizenID,
		toCursor: func(c *Customer) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CitizenID,
			}
		},
	}
	// CustomerOrderFieldPhone orders Customer by phone.
	CustomerOrderFieldPhone = &CustomerOrderField{
		field: customer.FieldPhone,
		toCursor: func(c *Customer) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Phone,
			}
		},
	}
	// CustomerOrderFieldAddress orders Customer by address.
	CustomerOrderFieldAddress = &CustomerOrderField{
		field: customer.FieldAddress,
		toCursor: func(c *Customer) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Address,
			}
		},
	}
	// CustomerOrderFieldGender orders Customer by gender.
	CustomerOrderFieldGender = &CustomerOrderField{
		field: customer.FieldGender,
		toCursor: func(c *Customer) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Gender,
			}
		},
	}
	// CustomerOrderFieldDateOfBirth orders Customer by date_of_birth.
	CustomerOrderFieldDateOfBirth = &CustomerOrderField{
		field: customer.FieldDateOfBirth,
		toCursor: func(c *Customer) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.DateOfBirth,
			}
		},
	}
	// CustomerOrderFieldCreatedAt orders Customer by created_at.
	CustomerOrderFieldCreatedAt = &CustomerOrderField{
		field: customer.FieldCreatedAt,
		toCursor: func(c *Customer) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CreatedAt,
			}
		},
	}
	// CustomerOrderFieldUpdatedAt orders Customer by updated_at.
	CustomerOrderFieldUpdatedAt = &CustomerOrderField{
		field: customer.FieldUpdatedAt,
		toCursor: func(c *Customer) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CustomerOrderField) String() string {
	var str string
	switch f.field {
	case customer.FieldName:
		str = "NAME"
	case customer.FieldCitizenID:
		str = "CITIZEN_ID"
	case customer.FieldPhone:
		str = "PHONE"
	case customer.FieldAddress:
		str = "ADDRESS"
	case customer.FieldGender:
		str = "GENDER"
	case customer.FieldDateOfBirth:
		str = "DOB"
	case customer.FieldCreatedAt:
		str = "CREATED_AT"
	case customer.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CustomerOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CustomerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CustomerOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *CustomerOrderFieldName
	case "CITIZEN_ID":
		*f = *CustomerOrderFieldCitizenID
	case "PHONE":
		*f = *CustomerOrderFieldPhone
	case "ADDRESS":
		*f = *CustomerOrderFieldAddress
	case "GENDER":
		*f = *CustomerOrderFieldGender
	case "DOB":
		*f = *CustomerOrderFieldDateOfBirth
	case "CREATED_AT":
		*f = *CustomerOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *CustomerOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid CustomerOrderField", str)
	}
	return nil
}

// CustomerOrderField defines the ordering field of Customer.
type CustomerOrderField struct {
	field    string
	toCursor func(*Customer) Cursor
}

// CustomerOrder defines the ordering of Customer.
type CustomerOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *CustomerOrderField `json:"field"`
}

// DefaultCustomerOrder is the default ordering of Customer.
var DefaultCustomerOrder = &CustomerOrder{
	Direction: OrderDirectionAsc,
	Field: &CustomerOrderField{
		field: customer.FieldID,
		toCursor: func(c *Customer) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Customer into CustomerEdge.
func (c *Customer) ToEdge(order *CustomerOrder) *CustomerEdge {
	if order == nil {
		order = DefaultCustomerOrder
	}
	return &CustomerEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// FlightEdge is the edge representation of Flight.
type FlightEdge struct {
	Node   *Flight `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// FlightConnection is the connection containing edges to Flight.
type FlightConnection struct {
	Edges      []*FlightEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *FlightConnection) build(nodes []*Flight, pager *flightPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Flight
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Flight {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Flight {
			return nodes[i]
		}
	}
	c.Edges = make([]*FlightEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &FlightEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// FlightPaginateOption enables pagination customization.
type FlightPaginateOption func(*flightPager) error

// WithFlightOrder configures pagination ordering.
func WithFlightOrder(order *FlightOrder) FlightPaginateOption {
	if order == nil {
		order = DefaultFlightOrder
	}
	o := *order
	return func(pager *flightPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFlightOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFlightFilter configures pagination filter.
func WithFlightFilter(filter func(*FlightQuery) (*FlightQuery, error)) FlightPaginateOption {
	return func(pager *flightPager) error {
		if filter == nil {
			return errors.New("FlightQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type flightPager struct {
	order  *FlightOrder
	filter func(*FlightQuery) (*FlightQuery, error)
}

func newFlightPager(opts []FlightPaginateOption) (*flightPager, error) {
	pager := &flightPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFlightOrder
	}
	return pager, nil
}

func (p *flightPager) applyFilter(query *FlightQuery) (*FlightQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *flightPager) toCursor(f *Flight) Cursor {
	return p.order.Field.toCursor(f)
}

func (p *flightPager) applyCursors(query *FlightQuery, after, before *Cursor) *FlightQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultFlightOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *flightPager) applyOrder(query *FlightQuery, reverse bool) *FlightQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultFlightOrder.Field {
		query = query.Order(direction.orderFunc(DefaultFlightOrder.Field.field))
	}
	return query
}

func (p *flightPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultFlightOrder.Field {
			b.Comma().Ident(DefaultFlightOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Flight.
func (f *FlightQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FlightPaginateOption,
) (*FlightConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFlightPager(opts)
	if err != nil {
		return nil, err
	}
	if f, err = pager.applyFilter(f); err != nil {
		return nil, err
	}
	conn := &FlightConnection{Edges: []*FlightEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = f.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	f = pager.applyCursors(f, after, before)
	f = pager.applyOrder(f, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		f.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := f.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := f.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// FlightOrderFieldFlightCode orders Flight by flight_code.
	FlightOrderFieldFlightCode = &FlightOrderField{
		field: flight.FieldFlightCode,
		toCursor: func(f *Flight) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.FlightCode,
			}
		},
	}
	// FlightOrderFieldFrom orders Flight by from.
	FlightOrderFieldFrom = &FlightOrderField{
		field: flight.FieldFrom,
		toCursor: func(f *Flight) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.From,
			}
		},
	}
	// FlightOrderFieldTo orders Flight by to.
	FlightOrderFieldTo = &FlightOrderField{
		field: flight.FieldTo,
		toCursor: func(f *Flight) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.To,
			}
		},
	}
	// FlightOrderFieldDepartureDate orders Flight by departure_date.
	FlightOrderFieldDepartureDate = &FlightOrderField{
		field: flight.FieldDepartureDate,
		toCursor: func(f *Flight) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.DepartureDate,
			}
		},
	}
	// FlightOrderFieldDepartureTime orders Flight by departure_time.
	FlightOrderFieldDepartureTime = &FlightOrderField{
		field: flight.FieldDepartureTime,
		toCursor: func(f *Flight) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.DepartureTime,
			}
		},
	}
	// FlightOrderFieldDuration orders Flight by duration.
	FlightOrderFieldDuration = &FlightOrderField{
		field: flight.FieldDuration,
		toCursor: func(f *Flight) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.Duration,
			}
		},
	}
	// FlightOrderFieldCapacity orders Flight by capacity.
	FlightOrderFieldCapacity = &FlightOrderField{
		field: flight.FieldCapacity,
		toCursor: func(f *Flight) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.Capacity,
			}
		},
	}
	// FlightOrderFieldEconomyAvailableSeat orders Flight by economy_available_seat.
	FlightOrderFieldEconomyAvailableSeat = &FlightOrderField{
		field: flight.FieldEconomyAvailableSeat,
		toCursor: func(f *Flight) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.EconomyAvailableSeat,
			}
		},
	}
	// FlightOrderFieldBusinessAvailableSeat orders Flight by business_available_seat.
	FlightOrderFieldBusinessAvailableSeat = &FlightOrderField{
		field: flight.FieldBusinessAvailableSeat,
		toCursor: func(f *Flight) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.BusinessAvailableSeat,
			}
		},
	}
	// FlightOrderFieldStatus orders Flight by status.
	FlightOrderFieldStatus = &FlightOrderField{
		field: flight.FieldStatus,
		toCursor: func(f *Flight) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.Status,
			}
		},
	}
	// FlightOrderFieldCreatedAt orders Flight by created_at.
	FlightOrderFieldCreatedAt = &FlightOrderField{
		field: flight.FieldCreatedAt,
		toCursor: func(f *Flight) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.CreatedAt,
			}
		},
	}
	// FlightOrderFieldUpdatedAt orders Flight by updated_at.
	FlightOrderFieldUpdatedAt = &FlightOrderField{
		field: flight.FieldUpdatedAt,
		toCursor: func(f *Flight) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f FlightOrderField) String() string {
	var str string
	switch f.field {
	case flight.FieldFlightCode:
		str = "FLIGHT_CODE"
	case flight.FieldFrom:
		str = "FROM"
	case flight.FieldTo:
		str = "TO"
	case flight.FieldDepartureDate:
		str = "DEPARTURE_DATE"
	case flight.FieldDepartureTime:
		str = "DEPARTURE_TIME"
	case flight.FieldDuration:
		str = "DURATION"
	case flight.FieldCapacity:
		str = "CAPACITY"
	case flight.FieldEconomyAvailableSeat:
		str = "ECONOMY_AVAILABLE_SEAT"
	case flight.FieldBusinessAvailableSeat:
		str = "BUSINESS_AVAILABLE_SEAT"
	case flight.FieldStatus:
		str = "STATUS"
	case flight.FieldCreatedAt:
		str = "CREATED_AT"
	case flight.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f FlightOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *FlightOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("FlightOrderField %T must be a string", v)
	}
	switch str {
	case "FLIGHT_CODE":
		*f = *FlightOrderFieldFlightCode
	case "FROM":
		*f = *FlightOrderFieldFrom
	case "TO":
		*f = *FlightOrderFieldTo
	case "DEPARTURE_DATE":
		*f = *FlightOrderFieldDepartureDate
	case "DEPARTURE_TIME":
		*f = *FlightOrderFieldDepartureTime
	case "DURATION":
		*f = *FlightOrderFieldDuration
	case "CAPACITY":
		*f = *FlightOrderFieldCapacity
	case "ECONOMY_AVAILABLE_SEAT":
		*f = *FlightOrderFieldEconomyAvailableSeat
	case "BUSINESS_AVAILABLE_SEAT":
		*f = *FlightOrderFieldBusinessAvailableSeat
	case "STATUS":
		*f = *FlightOrderFieldStatus
	case "CREATED_AT":
		*f = *FlightOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *FlightOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid FlightOrderField", str)
	}
	return nil
}

// FlightOrderField defines the ordering field of Flight.
type FlightOrderField struct {
	field    string
	toCursor func(*Flight) Cursor
}

// FlightOrder defines the ordering of Flight.
type FlightOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *FlightOrderField `json:"field"`
}

// DefaultFlightOrder is the default ordering of Flight.
var DefaultFlightOrder = &FlightOrder{
	Direction: OrderDirectionAsc,
	Field: &FlightOrderField{
		field: flight.FieldID,
		toCursor: func(f *Flight) Cursor {
			return Cursor{ID: f.ID}
		},
	},
}

// ToEdge converts Flight into FlightEdge.
func (f *Flight) ToEdge(order *FlightOrder) *FlightEdge {
	if order == nil {
		order = DefaultFlightOrder
	}
	return &FlightEdge{
		Node:   f,
		Cursor: order.Field.toCursor(f),
	}
}

// PassengerEdge is the edge representation of Passenger.
type PassengerEdge struct {
	Node   *Passenger `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// PassengerConnection is the connection containing edges to Passenger.
type PassengerConnection struct {
	Edges      []*PassengerEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *PassengerConnection) build(nodes []*Passenger, pager *passengerPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Passenger
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Passenger {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Passenger {
			return nodes[i]
		}
	}
	c.Edges = make([]*PassengerEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PassengerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PassengerPaginateOption enables pagination customization.
type PassengerPaginateOption func(*passengerPager) error

// WithPassengerOrder configures pagination ordering.
func WithPassengerOrder(order *PassengerOrder) PassengerPaginateOption {
	if order == nil {
		order = DefaultPassengerOrder
	}
	o := *order
	return func(pager *passengerPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPassengerOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPassengerFilter configures pagination filter.
func WithPassengerFilter(filter func(*PassengerQuery) (*PassengerQuery, error)) PassengerPaginateOption {
	return func(pager *passengerPager) error {
		if filter == nil {
			return errors.New("PassengerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type passengerPager struct {
	order  *PassengerOrder
	filter func(*PassengerQuery) (*PassengerQuery, error)
}

func newPassengerPager(opts []PassengerPaginateOption) (*passengerPager, error) {
	pager := &passengerPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPassengerOrder
	}
	return pager, nil
}

func (p *passengerPager) applyFilter(query *PassengerQuery) (*PassengerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *passengerPager) toCursor(pa *Passenger) Cursor {
	return p.order.Field.toCursor(pa)
}

func (p *passengerPager) applyCursors(query *PassengerQuery, after, before *Cursor) *PassengerQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultPassengerOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *passengerPager) applyOrder(query *PassengerQuery, reverse bool) *PassengerQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultPassengerOrder.Field {
		query = query.Order(direction.orderFunc(DefaultPassengerOrder.Field.field))
	}
	return query
}

func (p *passengerPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPassengerOrder.Field {
			b.Comma().Ident(DefaultPassengerOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Passenger.
func (pa *PassengerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PassengerPaginateOption,
) (*PassengerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPassengerPager(opts)
	if err != nil {
		return nil, err
	}
	if pa, err = pager.applyFilter(pa); err != nil {
		return nil, err
	}
	conn := &PassengerConnection{Edges: []*PassengerEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pa.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	pa = pager.applyCursors(pa, after, before)
	pa = pager.applyOrder(pa, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		pa.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pa.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := pa.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PassengerOrderFieldName orders Passenger by name.
	PassengerOrderFieldName = &PassengerOrderField{
		field: passenger.FieldName,
		toCursor: func(pa *Passenger) Cursor {
			return Cursor{
				ID:    pa.ID,
				Value: pa.Name,
			}
		},
	}
	// PassengerOrderFieldCitizenID orders Passenger by citizen_id.
	PassengerOrderFieldCitizenID = &PassengerOrderField{
		field: passenger.FieldCitizenID,
		toCursor: func(pa *Passenger) Cursor {
			return Cursor{
				ID:    pa.ID,
				Value: pa.CitizenID,
			}
		},
	}
	// PassengerOrderFieldEmail orders Passenger by email.
	PassengerOrderFieldEmail = &PassengerOrderField{
		field: passenger.FieldEmail,
		toCursor: func(pa *Passenger) Cursor {
			return Cursor{
				ID:    pa.ID,
				Value: pa.Email,
			}
		},
	}
	// PassengerOrderFieldPhone orders Passenger by phone.
	PassengerOrderFieldPhone = &PassengerOrderField{
		field: passenger.FieldPhone,
		toCursor: func(pa *Passenger) Cursor {
			return Cursor{
				ID:    pa.ID,
				Value: pa.Phone,
			}
		},
	}
	// PassengerOrderFieldAddress orders Passenger by address.
	PassengerOrderFieldAddress = &PassengerOrderField{
		field: passenger.FieldAddress,
		toCursor: func(pa *Passenger) Cursor {
			return Cursor{
				ID:    pa.ID,
				Value: pa.Address,
			}
		},
	}
	// PassengerOrderFieldGender orders Passenger by gender.
	PassengerOrderFieldGender = &PassengerOrderField{
		field: passenger.FieldGender,
		toCursor: func(pa *Passenger) Cursor {
			return Cursor{
				ID:    pa.ID,
				Value: pa.Gender,
			}
		},
	}
	// PassengerOrderFieldDateOfBirth orders Passenger by date_of_birth.
	PassengerOrderFieldDateOfBirth = &PassengerOrderField{
		field: passenger.FieldDateOfBirth,
		toCursor: func(pa *Passenger) Cursor {
			return Cursor{
				ID:    pa.ID,
				Value: pa.DateOfBirth,
			}
		},
	}
	// PassengerOrderFieldCreatedAt orders Passenger by created_at.
	PassengerOrderFieldCreatedAt = &PassengerOrderField{
		field: passenger.FieldCreatedAt,
		toCursor: func(pa *Passenger) Cursor {
			return Cursor{
				ID:    pa.ID,
				Value: pa.CreatedAt,
			}
		},
	}
	// PassengerOrderFieldUpdatedAt orders Passenger by updated_at.
	PassengerOrderFieldUpdatedAt = &PassengerOrderField{
		field: passenger.FieldUpdatedAt,
		toCursor: func(pa *Passenger) Cursor {
			return Cursor{
				ID:    pa.ID,
				Value: pa.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PassengerOrderField) String() string {
	var str string
	switch f.field {
	case passenger.FieldName:
		str = "NAME"
	case passenger.FieldCitizenID:
		str = "CITIZEN_ID"
	case passenger.FieldEmail:
		str = "EMAIL"
	case passenger.FieldPhone:
		str = "PHONE"
	case passenger.FieldAddress:
		str = "ADDRESS"
	case passenger.FieldGender:
		str = "GENDER"
	case passenger.FieldDateOfBirth:
		str = "DOB"
	case passenger.FieldCreatedAt:
		str = "CREATED_AT"
	case passenger.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PassengerOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PassengerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PassengerOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *PassengerOrderFieldName
	case "CITIZEN_ID":
		*f = *PassengerOrderFieldCitizenID
	case "EMAIL":
		*f = *PassengerOrderFieldEmail
	case "PHONE":
		*f = *PassengerOrderFieldPhone
	case "ADDRESS":
		*f = *PassengerOrderFieldAddress
	case "GENDER":
		*f = *PassengerOrderFieldGender
	case "DOB":
		*f = *PassengerOrderFieldDateOfBirth
	case "CREATED_AT":
		*f = *PassengerOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *PassengerOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid PassengerOrderField", str)
	}
	return nil
}

// PassengerOrderField defines the ordering field of Passenger.
type PassengerOrderField struct {
	field    string
	toCursor func(*Passenger) Cursor
}

// PassengerOrder defines the ordering of Passenger.
type PassengerOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *PassengerOrderField `json:"field"`
}

// DefaultPassengerOrder is the default ordering of Passenger.
var DefaultPassengerOrder = &PassengerOrder{
	Direction: OrderDirectionAsc,
	Field: &PassengerOrderField{
		field: passenger.FieldID,
		toCursor: func(pa *Passenger) Cursor {
			return Cursor{ID: pa.ID}
		},
	},
}

// ToEdge converts Passenger into PassengerEdge.
func (pa *Passenger) ToEdge(order *PassengerOrder) *PassengerEdge {
	if order == nil {
		order = DefaultPassengerOrder
	}
	return &PassengerEdge{
		Node:   pa,
		Cursor: order.Field.toCursor(pa),
	}
}

// TicketEdge is the edge representation of Ticket.
type TicketEdge struct {
	Node   *Ticket `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// TicketConnection is the connection containing edges to Ticket.
type TicketConnection struct {
	Edges      []*TicketEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *TicketConnection) build(nodes []*Ticket, pager *ticketPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Ticket
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Ticket {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Ticket {
			return nodes[i]
		}
	}
	c.Edges = make([]*TicketEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TicketEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TicketPaginateOption enables pagination customization.
type TicketPaginateOption func(*ticketPager) error

// WithTicketOrder configures pagination ordering.
func WithTicketOrder(order *TicketOrder) TicketPaginateOption {
	if order == nil {
		order = DefaultTicketOrder
	}
	o := *order
	return func(pager *ticketPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTicketOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTicketFilter configures pagination filter.
func WithTicketFilter(filter func(*TicketQuery) (*TicketQuery, error)) TicketPaginateOption {
	return func(pager *ticketPager) error {
		if filter == nil {
			return errors.New("TicketQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type ticketPager struct {
	order  *TicketOrder
	filter func(*TicketQuery) (*TicketQuery, error)
}

func newTicketPager(opts []TicketPaginateOption) (*ticketPager, error) {
	pager := &ticketPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTicketOrder
	}
	return pager, nil
}

func (p *ticketPager) applyFilter(query *TicketQuery) (*TicketQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *ticketPager) toCursor(t *Ticket) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *ticketPager) applyCursors(query *TicketQuery, after, before *Cursor) *TicketQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTicketOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *ticketPager) applyOrder(query *TicketQuery, reverse bool) *TicketQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTicketOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTicketOrder.Field.field))
	}
	return query
}

func (p *ticketPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTicketOrder.Field {
			b.Comma().Ident(DefaultTicketOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Ticket.
func (t *TicketQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TicketPaginateOption,
) (*TicketConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTicketPager(opts)
	if err != nil {
		return nil, err
	}
	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &TicketConnection{Edges: []*TicketEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = t.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	t = pager.applyCursors(t, after, before)
	t = pager.applyOrder(t, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		t.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := t.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TicketOrderFieldClass orders Ticket by class.
	TicketOrderFieldClass = &TicketOrderField{
		field: ticket.FieldClass,
		toCursor: func(t *Ticket) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Class,
			}
		},
	}
	// TicketOrderFieldStatus orders Ticket by status.
	TicketOrderFieldStatus = &TicketOrderField{
		field: ticket.FieldStatus,
		toCursor: func(t *Ticket) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Status,
			}
		},
	}
	// TicketOrderFieldFlightID orders Ticket by flight_id.
	TicketOrderFieldFlightID = &TicketOrderField{
		field: ticket.FieldFlightID,
		toCursor: func(t *Ticket) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.FlightID,
			}
		},
	}
	// TicketOrderFieldBookingID orders Ticket by booking_id.
	TicketOrderFieldBookingID = &TicketOrderField{
		field: ticket.FieldBookingID,
		toCursor: func(t *Ticket) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.BookingID,
			}
		},
	}
	// TicketOrderFieldCreatedAt orders Ticket by created_at.
	TicketOrderFieldCreatedAt = &TicketOrderField{
		field: ticket.FieldCreatedAt,
		toCursor: func(t *Ticket) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.CreatedAt,
			}
		},
	}
	// TicketOrderFieldUpdatedAt orders Ticket by updated_at.
	TicketOrderFieldUpdatedAt = &TicketOrderField{
		field: ticket.FieldUpdatedAt,
		toCursor: func(t *Ticket) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TicketOrderField) String() string {
	var str string
	switch f.field {
	case ticket.FieldClass:
		str = "CLASS"
	case ticket.FieldStatus:
		str = "STATUS"
	case ticket.FieldFlightID:
		str = "FLIGHT_ID"
	case ticket.FieldBookingID:
		str = "BOOKING_ID"
	case ticket.FieldCreatedAt:
		str = "CREATED_AT"
	case ticket.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TicketOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TicketOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TicketOrderField %T must be a string", v)
	}
	switch str {
	case "CLASS":
		*f = *TicketOrderFieldClass
	case "STATUS":
		*f = *TicketOrderFieldStatus
	case "FLIGHT_ID":
		*f = *TicketOrderFieldFlightID
	case "BOOKING_ID":
		*f = *TicketOrderFieldBookingID
	case "CREATED_AT":
		*f = *TicketOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *TicketOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid TicketOrderField", str)
	}
	return nil
}

// TicketOrderField defines the ordering field of Ticket.
type TicketOrderField struct {
	field    string
	toCursor func(*Ticket) Cursor
}

// TicketOrder defines the ordering of Ticket.
type TicketOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *TicketOrderField `json:"field"`
}

// DefaultTicketOrder is the default ordering of Ticket.
var DefaultTicketOrder = &TicketOrder{
	Direction: OrderDirectionAsc,
	Field: &TicketOrderField{
		field: ticket.FieldID,
		toCursor: func(t *Ticket) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Ticket into TicketEdge.
func (t *Ticket) ToEdge(order *TicketOrder) *TicketEdge {
	if order == nil {
		order = DefaultTicketOrder
	}
	return &TicketEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// TicketOwnerEdge is the edge representation of TicketOwner.
type TicketOwnerEdge struct {
	Node   *TicketOwner `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// TicketOwnerConnection is the connection containing edges to TicketOwner.
type TicketOwnerConnection struct {
	Edges      []*TicketOwnerEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *TicketOwnerConnection) build(nodes []*TicketOwner, pager *ticketownerPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *TicketOwner
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TicketOwner {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TicketOwner {
			return nodes[i]
		}
	}
	c.Edges = make([]*TicketOwnerEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TicketOwnerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TicketOwnerPaginateOption enables pagination customization.
type TicketOwnerPaginateOption func(*ticketownerPager) error

// WithTicketOwnerOrder configures pagination ordering.
func WithTicketOwnerOrder(order *TicketOwnerOrder) TicketOwnerPaginateOption {
	if order == nil {
		order = DefaultTicketOwnerOrder
	}
	o := *order
	return func(pager *ticketownerPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTicketOwnerOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTicketOwnerFilter configures pagination filter.
func WithTicketOwnerFilter(filter func(*TicketOwnerQuery) (*TicketOwnerQuery, error)) TicketOwnerPaginateOption {
	return func(pager *ticketownerPager) error {
		if filter == nil {
			return errors.New("TicketOwnerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type ticketownerPager struct {
	order  *TicketOwnerOrder
	filter func(*TicketOwnerQuery) (*TicketOwnerQuery, error)
}

func newTicketOwnerPager(opts []TicketOwnerPaginateOption) (*ticketownerPager, error) {
	pager := &ticketownerPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTicketOwnerOrder
	}
	return pager, nil
}

func (p *ticketownerPager) applyFilter(query *TicketOwnerQuery) (*TicketOwnerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *ticketownerPager) toCursor(to *TicketOwner) Cursor {
	return p.order.Field.toCursor(to)
}

func (p *ticketownerPager) applyCursors(query *TicketOwnerQuery, after, before *Cursor) *TicketOwnerQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTicketOwnerOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *ticketownerPager) applyOrder(query *TicketOwnerQuery, reverse bool) *TicketOwnerQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTicketOwnerOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTicketOwnerOrder.Field.field))
	}
	return query
}

func (p *ticketownerPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTicketOwnerOrder.Field {
			b.Comma().Ident(DefaultTicketOwnerOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to TicketOwner.
func (to *TicketOwnerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TicketOwnerPaginateOption,
) (*TicketOwnerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTicketOwnerPager(opts)
	if err != nil {
		return nil, err
	}
	if to, err = pager.applyFilter(to); err != nil {
		return nil, err
	}
	conn := &TicketOwnerConnection{Edges: []*TicketOwnerEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = to.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	to = pager.applyCursors(to, after, before)
	to = pager.applyOrder(to, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		to.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := to.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := to.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TicketOwnerOrderFieldCreatedAt orders TicketOwner by created_at.
	TicketOwnerOrderFieldCreatedAt = &TicketOwnerOrderField{
		field: ticketowner.FieldCreatedAt,
		toCursor: func(to *TicketOwner) Cursor {
			return Cursor{
				ID:    to.ID,
				Value: to.CreatedAt,
			}
		},
	}
	// TicketOwnerOrderFieldUpdatedAt orders TicketOwner by updated_at.
	TicketOwnerOrderFieldUpdatedAt = &TicketOwnerOrderField{
		field: ticketowner.FieldUpdatedAt,
		toCursor: func(to *TicketOwner) Cursor {
			return Cursor{
				ID:    to.ID,
				Value: to.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TicketOwnerOrderField) String() string {
	var str string
	switch f.field {
	case ticketowner.FieldCreatedAt:
		str = "CREATED_AT"
	case ticketowner.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TicketOwnerOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TicketOwnerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TicketOwnerOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *TicketOwnerOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *TicketOwnerOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid TicketOwnerOrderField", str)
	}
	return nil
}

// TicketOwnerOrderField defines the ordering field of TicketOwner.
type TicketOwnerOrderField struct {
	field    string
	toCursor func(*TicketOwner) Cursor
}

// TicketOwnerOrder defines the ordering of TicketOwner.
type TicketOwnerOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *TicketOwnerOrderField `json:"field"`
}

// DefaultTicketOwnerOrder is the default ordering of TicketOwner.
var DefaultTicketOwnerOrder = &TicketOwnerOrder{
	Direction: OrderDirectionAsc,
	Field: &TicketOwnerOrderField{
		field: ticketowner.FieldID,
		toCursor: func(to *TicketOwner) Cursor {
			return Cursor{ID: to.ID}
		},
	},
}

// ToEdge converts TicketOwner into TicketOwnerEdge.
func (to *TicketOwner) ToEdge(order *TicketOwnerOrder) *TicketOwnerEdge {
	if order == nil {
		order = DefaultTicketOwnerOrder
	}
	return &TicketOwnerEdge{
		Node:   to,
		Cursor: order.Field.toCursor(to),
	}
}
