// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mock_project/ent/booking"
	"mock_project/ent/passenger"
	"mock_project/ent/ticketowner"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PassengerCreate is the builder for creating a Passenger entity.
type PassengerCreate struct {
	config
	mutation *PassengerMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *PassengerCreate) SetName(s string) *PassengerCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetCitizenID sets the "citizen_id" field.
func (pc *PassengerCreate) SetCitizenID(s string) *PassengerCreate {
	pc.mutation.SetCitizenID(s)
	return pc
}

// SetEmail sets the "email" field.
func (pc *PassengerCreate) SetEmail(s string) *PassengerCreate {
	pc.mutation.SetEmail(s)
	return pc
}

// SetPhone sets the "phone" field.
func (pc *PassengerCreate) SetPhone(s string) *PassengerCreate {
	pc.mutation.SetPhone(s)
	return pc
}

// SetAddress sets the "address" field.
func (pc *PassengerCreate) SetAddress(s string) *PassengerCreate {
	pc.mutation.SetAddress(s)
	return pc
}

// SetGender sets the "gender" field.
func (pc *PassengerCreate) SetGender(pa passenger.Gender) *PassengerCreate {
	pc.mutation.SetGender(pa)
	return pc
}

// SetDateOfBirth sets the "date_of_birth" field.
func (pc *PassengerCreate) SetDateOfBirth(t time.Time) *PassengerCreate {
	pc.mutation.SetDateOfBirth(t)
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PassengerCreate) SetCreatedAt(t time.Time) *PassengerCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PassengerCreate) SetNillableCreatedAt(t *time.Time) *PassengerCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PassengerCreate) SetUpdatedAt(t time.Time) *PassengerCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PassengerCreate) SetNillableUpdatedAt(t *time.Time) *PassengerCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PassengerCreate) SetID(u uuid.UUID) *PassengerCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PassengerCreate) SetNillableID(u *uuid.UUID) *PassengerCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// SetTicketID sets the "ticket" edge to the TicketOwner entity by ID.
func (pc *PassengerCreate) SetTicketID(id uuid.UUID) *PassengerCreate {
	pc.mutation.SetTicketID(id)
	return pc
}

// SetNillableTicketID sets the "ticket" edge to the TicketOwner entity by ID if the given value is not nil.
func (pc *PassengerCreate) SetNillableTicketID(id *uuid.UUID) *PassengerCreate {
	if id != nil {
		pc = pc.SetTicketID(*id)
	}
	return pc
}

// SetTicket sets the "ticket" edge to the TicketOwner entity.
func (pc *PassengerCreate) SetTicket(t *TicketOwner) *PassengerCreate {
	return pc.SetTicketID(t.ID)
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by IDs.
func (pc *PassengerCreate) AddBookingIDs(ids ...uuid.UUID) *PassengerCreate {
	pc.mutation.AddBookingIDs(ids...)
	return pc
}

// AddBookings adds the "bookings" edges to the Booking entity.
func (pc *PassengerCreate) AddBookings(b ...*Booking) *PassengerCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pc.AddBookingIDs(ids...)
}

// Mutation returns the PassengerMutation object of the builder.
func (pc *PassengerCreate) Mutation() *PassengerMutation {
	return pc.mutation
}

// Save creates the Passenger in the database.
func (pc *PassengerCreate) Save(ctx context.Context) (*Passenger, error) {
	var (
		err  error
		node *Passenger
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PassengerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Passenger)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PassengerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PassengerCreate) SaveX(ctx context.Context) *Passenger {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PassengerCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PassengerCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PassengerCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := passenger.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := passenger.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := passenger.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PassengerCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Passenger.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := passenger.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Passenger.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CitizenID(); !ok {
		return &ValidationError{Name: "citizen_id", err: errors.New(`ent: missing required field "Passenger.citizen_id"`)}
	}
	if v, ok := pc.mutation.CitizenID(); ok {
		if err := passenger.CitizenIDValidator(v); err != nil {
			return &ValidationError{Name: "citizen_id", err: fmt.Errorf(`ent: validator failed for field "Passenger.citizen_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Passenger.email"`)}
	}
	if _, ok := pc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Passenger.phone"`)}
	}
	if v, ok := pc.mutation.Phone(); ok {
		if err := passenger.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Passenger.phone": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Passenger.address"`)}
	}
	if _, ok := pc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "Passenger.gender"`)}
	}
	if v, ok := pc.mutation.Gender(); ok {
		if err := passenger.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Passenger.gender": %w`, err)}
		}
	}
	if _, ok := pc.mutation.DateOfBirth(); !ok {
		return &ValidationError{Name: "date_of_birth", err: errors.New(`ent: missing required field "Passenger.date_of_birth"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Passenger.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Passenger.updated_at"`)}
	}
	return nil
}

func (pc *PassengerCreate) sqlSave(ctx context.Context) (*Passenger, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pc *PassengerCreate) createSpec() (*Passenger, *sqlgraph.CreateSpec) {
	var (
		_node = &Passenger{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: passenger.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: passenger.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(passenger.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.CitizenID(); ok {
		_spec.SetField(passenger.FieldCitizenID, field.TypeString, value)
		_node.CitizenID = value
	}
	if value, ok := pc.mutation.Email(); ok {
		_spec.SetField(passenger.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := pc.mutation.Phone(); ok {
		_spec.SetField(passenger.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := pc.mutation.Address(); ok {
		_spec.SetField(passenger.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := pc.mutation.Gender(); ok {
		_spec.SetField(passenger.FieldGender, field.TypeEnum, value)
		_node.Gender = value
	}
	if value, ok := pc.mutation.DateOfBirth(); ok {
		_spec.SetField(passenger.FieldDateOfBirth, field.TypeTime, value)
		_node.DateOfBirth = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(passenger.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(passenger.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pc.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   passenger.TicketTable,
			Columns: []string{passenger.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticketowner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   passenger.BookingsTable,
			Columns: []string{passenger.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PassengerCreateBulk is the builder for creating many Passenger entities in bulk.
type PassengerCreateBulk struct {
	config
	builders []*PassengerCreate
}

// Save creates the Passenger entities in the database.
func (pcb *PassengerCreateBulk) Save(ctx context.Context) ([]*Passenger, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Passenger, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PassengerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PassengerCreateBulk) SaveX(ctx context.Context) []*Passenger {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PassengerCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PassengerCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
