// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"mock_project/ent/booking"
	"mock_project/ent/flight"
	"mock_project/ent/predicate"
	"mock_project/ent/ticket"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FlightQuery is the builder for querying Flight entities.
type FlightQuery struct {
	config
	limit                  *int
	offset                 *int
	unique                 *bool
	order                  []OrderFunc
	fields                 []string
	predicates             []predicate.Flight
	withBelongsTo          *BookingQuery
	withFlightTickets      *TicketQuery
	modifiers              []func(*sql.Selector)
	loadTotal              []func(context.Context, []*Flight) error
	withNamedBelongsTo     map[string]*BookingQuery
	withNamedFlightTickets map[string]*TicketQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FlightQuery builder.
func (fq *FlightQuery) Where(ps ...predicate.Flight) *FlightQuery {
	fq.predicates = append(fq.predicates, ps...)
	return fq
}

// Limit adds a limit step to the query.
func (fq *FlightQuery) Limit(limit int) *FlightQuery {
	fq.limit = &limit
	return fq
}

// Offset adds an offset step to the query.
func (fq *FlightQuery) Offset(offset int) *FlightQuery {
	fq.offset = &offset
	return fq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fq *FlightQuery) Unique(unique bool) *FlightQuery {
	fq.unique = &unique
	return fq
}

// Order adds an order step to the query.
func (fq *FlightQuery) Order(o ...OrderFunc) *FlightQuery {
	fq.order = append(fq.order, o...)
	return fq
}

// QueryBelongsTo chains the current query on the "belongs_to" edge.
func (fq *FlightQuery) QueryBelongsTo() *BookingQuery {
	query := &BookingQuery{config: fq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(flight.Table, flight.FieldID, selector),
			sqlgraph.To(booking.Table, booking.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, flight.BelongsToTable, flight.BelongsToColumn),
		)
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFlightTickets chains the current query on the "flight_tickets" edge.
func (fq *FlightQuery) QueryFlightTickets() *TicketQuery {
	query := &TicketQuery{config: fq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(flight.Table, flight.FieldID, selector),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, flight.FlightTicketsTable, flight.FlightTicketsColumn),
		)
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Flight entity from the query.
// Returns a *NotFoundError when no Flight was found.
func (fq *FlightQuery) First(ctx context.Context) (*Flight, error) {
	nodes, err := fq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{flight.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fq *FlightQuery) FirstX(ctx context.Context) *Flight {
	node, err := fq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Flight ID from the query.
// Returns a *NotFoundError when no Flight ID was found.
func (fq *FlightQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = fq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{flight.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fq *FlightQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := fq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Flight entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Flight entity is found.
// Returns a *NotFoundError when no Flight entities are found.
func (fq *FlightQuery) Only(ctx context.Context) (*Flight, error) {
	nodes, err := fq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{flight.Label}
	default:
		return nil, &NotSingularError{flight.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fq *FlightQuery) OnlyX(ctx context.Context) *Flight {
	node, err := fq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Flight ID in the query.
// Returns a *NotSingularError when more than one Flight ID is found.
// Returns a *NotFoundError when no entities are found.
func (fq *FlightQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = fq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{flight.Label}
	default:
		err = &NotSingularError{flight.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fq *FlightQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := fq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Flights.
func (fq *FlightQuery) All(ctx context.Context) ([]*Flight, error) {
	if err := fq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return fq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (fq *FlightQuery) AllX(ctx context.Context) []*Flight {
	nodes, err := fq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Flight IDs.
func (fq *FlightQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := fq.Select(flight.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fq *FlightQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := fq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fq *FlightQuery) Count(ctx context.Context) (int, error) {
	if err := fq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return fq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (fq *FlightQuery) CountX(ctx context.Context) int {
	count, err := fq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fq *FlightQuery) Exist(ctx context.Context) (bool, error) {
	if err := fq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return fq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (fq *FlightQuery) ExistX(ctx context.Context) bool {
	exist, err := fq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FlightQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fq *FlightQuery) Clone() *FlightQuery {
	if fq == nil {
		return nil
	}
	return &FlightQuery{
		config:            fq.config,
		limit:             fq.limit,
		offset:            fq.offset,
		order:             append([]OrderFunc{}, fq.order...),
		predicates:        append([]predicate.Flight{}, fq.predicates...),
		withBelongsTo:     fq.withBelongsTo.Clone(),
		withFlightTickets: fq.withFlightTickets.Clone(),
		// clone intermediate query.
		sql:    fq.sql.Clone(),
		path:   fq.path,
		unique: fq.unique,
	}
}

// WithBelongsTo tells the query-builder to eager-load the nodes that are connected to
// the "belongs_to" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FlightQuery) WithBelongsTo(opts ...func(*BookingQuery)) *FlightQuery {
	query := &BookingQuery{config: fq.config}
	for _, opt := range opts {
		opt(query)
	}
	fq.withBelongsTo = query
	return fq
}

// WithFlightTickets tells the query-builder to eager-load the nodes that are connected to
// the "flight_tickets" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FlightQuery) WithFlightTickets(opts ...func(*TicketQuery)) *FlightQuery {
	query := &TicketQuery{config: fq.config}
	for _, opt := range opts {
		opt(query)
	}
	fq.withFlightTickets = query
	return fq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		FlightCode string `json:"flight_code,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Flight.Query().
//		GroupBy(flight.FieldFlightCode).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (fq *FlightQuery) GroupBy(field string, fields ...string) *FlightGroupBy {
	grbuild := &FlightGroupBy{config: fq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return fq.sqlQuery(ctx), nil
	}
	grbuild.label = flight.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		FlightCode string `json:"flight_code,omitempty"`
//	}
//
//	client.Flight.Query().
//		Select(flight.FieldFlightCode).
//		Scan(ctx, &v)
func (fq *FlightQuery) Select(fields ...string) *FlightSelect {
	fq.fields = append(fq.fields, fields...)
	selbuild := &FlightSelect{FlightQuery: fq}
	selbuild.label = flight.Label
	selbuild.flds, selbuild.scan = &fq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a FlightSelect configured with the given aggregations.
func (fq *FlightQuery) Aggregate(fns ...AggregateFunc) *FlightSelect {
	return fq.Select().Aggregate(fns...)
}

func (fq *FlightQuery) prepareQuery(ctx context.Context) error {
	for _, f := range fq.fields {
		if !flight.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fq.path != nil {
		prev, err := fq.path(ctx)
		if err != nil {
			return err
		}
		fq.sql = prev
	}
	return nil
}

func (fq *FlightQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Flight, error) {
	var (
		nodes       = []*Flight{}
		_spec       = fq.querySpec()
		loadedTypes = [2]bool{
			fq.withBelongsTo != nil,
			fq.withFlightTickets != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Flight).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Flight{config: fq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(fq.modifiers) > 0 {
		_spec.Modifiers = fq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fq.withBelongsTo; query != nil {
		if err := fq.loadBelongsTo(ctx, query, nodes,
			func(n *Flight) { n.Edges.BelongsTo = []*Booking{} },
			func(n *Flight, e *Booking) { n.Edges.BelongsTo = append(n.Edges.BelongsTo, e) }); err != nil {
			return nil, err
		}
	}
	if query := fq.withFlightTickets; query != nil {
		if err := fq.loadFlightTickets(ctx, query, nodes,
			func(n *Flight) { n.Edges.FlightTickets = []*Ticket{} },
			func(n *Flight, e *Ticket) { n.Edges.FlightTickets = append(n.Edges.FlightTickets, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range fq.withNamedBelongsTo {
		if err := fq.loadBelongsTo(ctx, query, nodes,
			func(n *Flight) { n.appendNamedBelongsTo(name) },
			func(n *Flight, e *Booking) { n.appendNamedBelongsTo(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range fq.withNamedFlightTickets {
		if err := fq.loadFlightTickets(ctx, query, nodes,
			func(n *Flight) { n.appendNamedFlightTickets(name) },
			func(n *Flight, e *Ticket) { n.appendNamedFlightTickets(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range fq.loadTotal {
		if err := fq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fq *FlightQuery) loadBelongsTo(ctx context.Context, query *BookingQuery, nodes []*Flight, init func(*Flight), assign func(*Flight, *Booking)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Flight)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Booking(func(s *sql.Selector) {
		s.Where(sql.InValues(flight.BelongsToColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.FlightID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "flight_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (fq *FlightQuery) loadFlightTickets(ctx context.Context, query *TicketQuery, nodes []*Flight, init func(*Flight), assign func(*Flight, *Ticket)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Flight)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.InValues(flight.FlightTicketsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.FlightID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "flight_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (fq *FlightQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fq.querySpec()
	if len(fq.modifiers) > 0 {
		_spec.Modifiers = fq.modifiers
	}
	_spec.Node.Columns = fq.fields
	if len(fq.fields) > 0 {
		_spec.Unique = fq.unique != nil && *fq.unique
	}
	return sqlgraph.CountNodes(ctx, fq.driver, _spec)
}

func (fq *FlightQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := fq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (fq *FlightQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flight.Table,
			Columns: flight.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flight.FieldID,
			},
		},
		From:   fq.sql,
		Unique: true,
	}
	if unique := fq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := fq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, flight.FieldID)
		for i := range fields {
			if fields[i] != flight.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fq *FlightQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fq.driver.Dialect())
	t1 := builder.Table(flight.Table)
	columns := fq.fields
	if len(columns) == 0 {
		columns = flight.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fq.sql != nil {
		selector = fq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fq.unique != nil && *fq.unique {
		selector.Distinct()
	}
	for _, p := range fq.predicates {
		p(selector)
	}
	for _, p := range fq.order {
		p(selector)
	}
	if offset := fq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedBelongsTo tells the query-builder to eager-load the nodes that are connected to the "belongs_to"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (fq *FlightQuery) WithNamedBelongsTo(name string, opts ...func(*BookingQuery)) *FlightQuery {
	query := &BookingQuery{config: fq.config}
	for _, opt := range opts {
		opt(query)
	}
	if fq.withNamedBelongsTo == nil {
		fq.withNamedBelongsTo = make(map[string]*BookingQuery)
	}
	fq.withNamedBelongsTo[name] = query
	return fq
}

// WithNamedFlightTickets tells the query-builder to eager-load the nodes that are connected to the "flight_tickets"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (fq *FlightQuery) WithNamedFlightTickets(name string, opts ...func(*TicketQuery)) *FlightQuery {
	query := &TicketQuery{config: fq.config}
	for _, opt := range opts {
		opt(query)
	}
	if fq.withNamedFlightTickets == nil {
		fq.withNamedFlightTickets = make(map[string]*TicketQuery)
	}
	fq.withNamedFlightTickets[name] = query
	return fq
}

// FlightGroupBy is the group-by builder for Flight entities.
type FlightGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fgb *FlightGroupBy) Aggregate(fns ...AggregateFunc) *FlightGroupBy {
	fgb.fns = append(fgb.fns, fns...)
	return fgb
}

// Scan applies the group-by query and scans the result into the given value.
func (fgb *FlightGroupBy) Scan(ctx context.Context, v any) error {
	query, err := fgb.path(ctx)
	if err != nil {
		return err
	}
	fgb.sql = query
	return fgb.sqlScan(ctx, v)
}

func (fgb *FlightGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range fgb.fields {
		if !flight.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := fgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (fgb *FlightGroupBy) sqlQuery() *sql.Selector {
	selector := fgb.sql.Select()
	aggregation := make([]string, 0, len(fgb.fns))
	for _, fn := range fgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(fgb.fields)+len(fgb.fns))
		for _, f := range fgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(fgb.fields...)...)
}

// FlightSelect is the builder for selecting fields of Flight entities.
type FlightSelect struct {
	*FlightQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fs *FlightSelect) Aggregate(fns ...AggregateFunc) *FlightSelect {
	fs.fns = append(fs.fns, fns...)
	return fs
}

// Scan applies the selector query and scans the result into the given value.
func (fs *FlightSelect) Scan(ctx context.Context, v any) error {
	if err := fs.prepareQuery(ctx); err != nil {
		return err
	}
	fs.sql = fs.FlightQuery.sqlQuery(ctx)
	return fs.sqlScan(ctx, v)
}

func (fs *FlightSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(fs.fns))
	for _, fn := range fs.fns {
		aggregation = append(aggregation, fn(fs.sql))
	}
	switch n := len(*fs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		fs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		fs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := fs.sql.Query()
	if err := fs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
