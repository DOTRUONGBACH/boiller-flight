// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mock_project/ent/customer"
	"mock_project/ent/passenger"
	"mock_project/ent/ticket"
	"mock_project/ent/ticketowner"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// TicketOwner is the model entity for the TicketOwner schema.
type TicketOwner struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TicketOwnerQuery when eager-loading is set.
	Edges            TicketOwnerEdges `json:"edges"`
	customer_ticket  *uuid.UUID
	passenger_ticket *uuid.UUID
}

// TicketOwnerEdges holds the relations/edges for other nodes in the graph.
type TicketOwnerEdges struct {
	// Ticket holds the value of the ticket edge.
	Ticket *Ticket `json:"ticket,omitempty"`
	// CustomerOwner holds the value of the customer_owner edge.
	CustomerOwner *Customer `json:"customer_owner,omitempty"`
	// PassengerOwner holds the value of the passenger_owner edge.
	PassengerOwner *Passenger `json:"passenger_owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// TicketOrErr returns the Ticket value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketOwnerEdges) TicketOrErr() (*Ticket, error) {
	if e.loadedTypes[0] {
		if e.Ticket == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: ticket.Label}
		}
		return e.Ticket, nil
	}
	return nil, &NotLoadedError{edge: "ticket"}
}

// CustomerOwnerOrErr returns the CustomerOwner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketOwnerEdges) CustomerOwnerOrErr() (*Customer, error) {
	if e.loadedTypes[1] {
		if e.CustomerOwner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.CustomerOwner, nil
	}
	return nil, &NotLoadedError{edge: "customer_owner"}
}

// PassengerOwnerOrErr returns the PassengerOwner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketOwnerEdges) PassengerOwnerOrErr() (*Passenger, error) {
	if e.loadedTypes[2] {
		if e.PassengerOwner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: passenger.Label}
		}
		return e.PassengerOwner, nil
	}
	return nil, &NotLoadedError{edge: "passenger_owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TicketOwner) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ticketowner.FieldCreatedAt, ticketowner.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case ticketowner.FieldID:
			values[i] = new(uuid.UUID)
		case ticketowner.ForeignKeys[0]: // customer_ticket
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case ticketowner.ForeignKeys[1]: // passenger_ticket
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type TicketOwner", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TicketOwner fields.
func (to *TicketOwner) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ticketowner.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				to.ID = *value
			}
		case ticketowner.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				to.CreatedAt = value.Time
			}
		case ticketowner.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				to.UpdatedAt = value.Time
			}
		case ticketowner.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field customer_ticket", values[i])
			} else if value.Valid {
				to.customer_ticket = new(uuid.UUID)
				*to.customer_ticket = *value.S.(*uuid.UUID)
			}
		case ticketowner.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field passenger_ticket", values[i])
			} else if value.Valid {
				to.passenger_ticket = new(uuid.UUID)
				*to.passenger_ticket = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryTicket queries the "ticket" edge of the TicketOwner entity.
func (to *TicketOwner) QueryTicket() *TicketQuery {
	return (&TicketOwnerClient{config: to.config}).QueryTicket(to)
}

// QueryCustomerOwner queries the "customer_owner" edge of the TicketOwner entity.
func (to *TicketOwner) QueryCustomerOwner() *CustomerQuery {
	return (&TicketOwnerClient{config: to.config}).QueryCustomerOwner(to)
}

// QueryPassengerOwner queries the "passenger_owner" edge of the TicketOwner entity.
func (to *TicketOwner) QueryPassengerOwner() *PassengerQuery {
	return (&TicketOwnerClient{config: to.config}).QueryPassengerOwner(to)
}

// Update returns a builder for updating this TicketOwner.
// Note that you need to call TicketOwner.Unwrap() before calling this method if this TicketOwner
// was returned from a transaction, and the transaction was committed or rolled back.
func (to *TicketOwner) Update() *TicketOwnerUpdateOne {
	return (&TicketOwnerClient{config: to.config}).UpdateOne(to)
}

// Unwrap unwraps the TicketOwner entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (to *TicketOwner) Unwrap() *TicketOwner {
	_tx, ok := to.config.driver.(*txDriver)
	if !ok {
		panic("ent: TicketOwner is not a transactional entity")
	}
	to.config.driver = _tx.drv
	return to
}

// String implements the fmt.Stringer.
func (to *TicketOwner) String() string {
	var builder strings.Builder
	builder.WriteString("TicketOwner(")
	builder.WriteString(fmt.Sprintf("id=%v, ", to.ID))
	builder.WriteString("created_at=")
	builder.WriteString(to.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(to.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TicketOwners is a parsable slice of TicketOwner.
type TicketOwners []*TicketOwner

func (to TicketOwners) config(cfg config) {
	for _i := range to {
		to[_i].config = cfg
	}
}
