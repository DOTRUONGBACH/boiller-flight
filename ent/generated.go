// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package ent

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AccountByIDResponse struct {
	Email    string    `json:"email"`
	Role     Role      `json:"role"`
	AccOwner *Customer `json:"accOwner"`
}

type AccountLogin struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type AccountLoginResponse struct {
	Token  string `json:"token"`
	Status bool   `json:"status"`
}

type AccountOps struct {
	NewAccount          *Account              `json:"newAccount"`
	Login               *AccountLoginResponse `json:"login"`
	AccResetPassword    string                `json:"accResetPassword"`
	UpdateAccountRole   *Account              `json:"updateAccountRole"`
	UpdateAccountStatus *Account              `json:"updateAccountStatus"`
}

type AccountResetPasswordInput struct {
	Email           string `json:"email"`
	CurrentPassword string `json:"currentPassword"`
	NewPassword     string `json:"newPassword"`
}

type BookingOps struct {
	NewBooking          *Booking `json:"newBooking"`
	UpdateBookingStatus bool     `json:"updateBookingStatus"`
}

type CustomerBookingHistoryInput struct {
	CustomerID string `json:"customerId"`
}

type CustomerInput struct {
	Name      string         `json:"name"`
	CitizenID string         `json:"citizenId"`
	Phone     string         `json:"phone"`
	Address   string         `json:"address"`
	Gender    CustomerGender `json:"gender"`
	Dob       time.Time      `json:"dob"`
}

type CustomerOps struct {
	DeleteCustomer bool `json:"deleteCustomer"`
}

type FlightInput struct {
	FlightCode            string       `json:"flightCode"`
	From                  string       `json:"from"`
	To                    string       `json:"to"`
	DepartureDate         time.Time    `json:"departureDate"`
	DepartureTime         time.Time    `json:"departureTime"`
	Duration              int          `json:"duration"`
	Capacity              int          `json:"capacity"`
	EconomyAvailableSeat  int          `json:"economyAvailableSeat"`
	BusinessAvailableSeat int          `json:"businessAvailableSeat"`
	Status                FlightStatus `json:"status"`
}

type FlightOps struct {
	NewFlight          *Flight `json:"newFlight"`
	UpdateFlightInfor  *Flight `json:"updateFlightInfor"`
	UpdateFlightStatus *Flight `json:"updateFlightStatus"`
}

type GetFlightByDateRangeInput struct {
	StartDate time.Time `json:"startDate"`
	EndDate   time.Time `json:"endDate"`
}

type GetFlightByFlightCodeInput struct {
	FlightInput *FlightInput `json:"flightInput"`
}

type NewAccountInput struct {
	Customer *CustomerInput `json:"customer"`
	Email    string         `json:"email"`
	Password string         `json:"password"`
	Role     Role           `json:"role"`
}

type NewBookingInput struct {
	FlightCode          string      `json:"flightCode"`
	Name                string      `json:"name"`
	CitizenID           string      `json:"citizenID"`
	Email               string      `json:"email"`
	Phone               string      `json:"phone"`
	Address             string      `json:"address"`
	DateOfBirth         time.Time   `json:"DateOfBirth"`
	Gender              Gender      `json:"gender"`
	TotalEconomyTicket  int         `json:"totalEconomyTicket"`
	TotalBusinessTicket int         `json:"totalBusinessTicket"`
	Type                BookingType `json:"type"`
}

type NewFlightInput struct {
	FlightInput *FlightInput `json:"flightInput"`
}

type NewPassengerInput struct {
	Passenger *PassengerInput `json:"passenger"`
}

type NewTicketInput struct {
	Class     Class        `json:"class"`
	Status    TicketStatus `json:"status"`
	FlightID  string       `json:"flight_id"`
	BookingID string       `json:"booking_id"`
}

type PassengerInput struct {
	Name      string          `json:"name"`
	CitizenID string          `json:"citizenId"`
	Phone     string          `json:"phone"`
	Email     string          `json:"email"`
	Address   string          `json:"address"`
	Gender    PassengerGender `json:"gender"`
	Dob       time.Time       `json:"dob"`
}

type PassengerOps struct {
	NewPassenger    *Passenger `json:"newPassenger"`
	UpdatePassenger *Passenger `json:"updatePassenger"`
	DeletePassenger bool       `json:"deletePassenger"`
}

type TicketByIDResponse struct {
	Class  Class   `json:"class"`
	Flight *Flight `json:"flight"`
}

type TicketOps struct {
	NewTicket        *Ticket `json:"newTicket"`
	UpdateTicketByID *Ticket `json:"UpdateTicketByID"`
}

type UpdateAccountByIDInput struct {
	ID   string `json:"id"`
	Role Role   `json:"role"`
}

type UpdateAccountStatusRequest struct {
	ID     string        `json:"id"`
	Status AccountStatus `json:"status"`
}

type UpdateAvailableSeatInput struct {
	FlightCode            string `json:"flightCode"`
	EconomyAvailableSeat  int    `json:"economyAvailableSeat"`
	BusinessAvailableSeat int    `json:"businessAvailableSeat"`
}

type UpdateBookingStatusInput struct {
	ID     string        `json:"id"`
	Status BookingStatus `json:"status"`
}

type UpdateFlightByFlightCodeInput struct {
	FlightInput *FlightInput `json:"flightInput"`
}

type UpdateFlightStatusInput struct {
	ID     string       `json:"id"`
	Status FlightStatus `json:"status"`
}

type UpdatePassengerByIDInput struct {
	ID        string          `json:"id"`
	Passenger *PassengerInput `json:"passenger"`
}

type UpdateTicketInputByID struct {
	ID        string       `json:"id"`
	Class     Class        `json:"class"`
	Status    TicketStatus `json:"status"`
	FlightID  string       `json:"flight_id"`
	BookingID string       `json:"booking_id"`
}

type UpdateTicketStatusInput struct {
	FlightID string       `json:"flight_id"`
	Status   TicketStatus `json:"status"`
}

type AccountStatus string

const (
	AccountStatusInactive AccountStatus = "Inactive"
	AccountStatusActive   AccountStatus = "Active"
)

var AllAccountStatus = []AccountStatus{
	AccountStatusInactive,
	AccountStatusActive,
}

func (e AccountStatus) IsValid() bool {
	switch e {
	case AccountStatusInactive, AccountStatusActive:
		return true
	}
	return false
}

func (e AccountStatus) String() string {
	return string(e)
}

func (e *AccountStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountStatus", str)
	}
	return nil
}

func (e AccountStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BookingStatus string

const (
	BookingStatusSuccess  BookingStatus = "Success"
	BookingStatusFail     BookingStatus = "Fail"
	BookingStatusCanceled BookingStatus = "Canceled"
)

var AllBookingStatus = []BookingStatus{
	BookingStatusSuccess,
	BookingStatusFail,
	BookingStatusCanceled,
}

func (e BookingStatus) IsValid() bool {
	switch e {
	case BookingStatusSuccess, BookingStatusFail, BookingStatusCanceled:
		return true
	}
	return false
}

func (e BookingStatus) String() string {
	return string(e)
}

func (e *BookingStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BookingStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BookingStatus", str)
	}
	return nil
}

func (e BookingStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BookingType string

const (
	BookingTypeOneWay    BookingType = "OneWay"
	BookingTypeRoundTrip BookingType = "RoundTrip"
)

var AllBookingType = []BookingType{
	BookingTypeOneWay,
	BookingTypeRoundTrip,
}

func (e BookingType) IsValid() bool {
	switch e {
	case BookingTypeOneWay, BookingTypeRoundTrip:
		return true
	}
	return false
}

func (e BookingType) String() string {
	return string(e)
}

func (e *BookingType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BookingType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BookingType", str)
	}
	return nil
}

func (e BookingType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Class string

const (
	ClassEconomy  Class = "Economy"
	ClassBusiness Class = "Business"
)

var AllClass = []Class{
	ClassEconomy,
	ClassBusiness,
}

func (e Class) IsValid() bool {
	switch e {
	case ClassEconomy, ClassBusiness:
		return true
	}
	return false
}

func (e Class) String() string {
	return string(e)
}

func (e *Class) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Class(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Class", str)
	}
	return nil
}

func (e Class) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CustomerGender string

const (
	CustomerGenderMale   CustomerGender = "Male"
	CustomerGenderFemale CustomerGender = "Female"
	CustomerGenderOther  CustomerGender = "Other"
)

var AllCustomerGender = []CustomerGender{
	CustomerGenderMale,
	CustomerGenderFemale,
	CustomerGenderOther,
}

func (e CustomerGender) IsValid() bool {
	switch e {
	case CustomerGenderMale, CustomerGenderFemale, CustomerGenderOther:
		return true
	}
	return false
}

func (e CustomerGender) String() string {
	return string(e)
}

func (e *CustomerGender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerGender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerGender", str)
	}
	return nil
}

func (e CustomerGender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FlightStatus string

const (
	FlightStatusScheduled FlightStatus = "Scheduled"
	FlightStatusDelayed   FlightStatus = "Delayed"
	FlightStatusDeparted  FlightStatus = "Departed"
	FlightStatusArrived   FlightStatus = "Arrived"
	FlightStatusCanceled  FlightStatus = "Canceled"
	FlightStatusFull      FlightStatus = "Full"
)

var AllFlightStatus = []FlightStatus{
	FlightStatusScheduled,
	FlightStatusDelayed,
	FlightStatusDeparted,
	FlightStatusArrived,
	FlightStatusCanceled,
	FlightStatusFull,
}

func (e FlightStatus) IsValid() bool {
	switch e {
	case FlightStatusScheduled, FlightStatusDelayed, FlightStatusDeparted, FlightStatusArrived, FlightStatusCanceled, FlightStatusFull:
		return true
	}
	return false
}

func (e FlightStatus) String() string {
	return string(e)
}

func (e *FlightStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FlightStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FlightStatus", str)
	}
	return nil
}

func (e FlightStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Gender string

const (
	GenderMale   Gender = "Male"
	GenderFemale Gender = "Female"
	GenderOther  Gender = "Other"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderOther,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderOther:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PassengerGender string

const (
	PassengerGenderMale   PassengerGender = "Male"
	PassengerGenderFemale PassengerGender = "Female"
	PassengerGenderOther  PassengerGender = "Other"
)

var AllPassengerGender = []PassengerGender{
	PassengerGenderMale,
	PassengerGenderFemale,
	PassengerGenderOther,
}

func (e PassengerGender) IsValid() bool {
	switch e {
	case PassengerGenderMale, PassengerGenderFemale, PassengerGenderOther:
		return true
	}
	return false
}

func (e PassengerGender) String() string {
	return string(e)
}

func (e *PassengerGender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PassengerGender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PassengerGender", str)
	}
	return nil
}

func (e PassengerGender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdministrator Role = "Administrator"
	RoleSubscriber    Role = "Subscriber"
)

var AllRole = []Role{
	RoleAdministrator,
	RoleSubscriber,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdministrator, RoleSubscriber:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TicketStatus string

const (
	TicketStatusPaid     TicketStatus = "Paid"
	TicketStatusCanceled TicketStatus = "Canceled"
)

var AllTicketStatus = []TicketStatus{
	TicketStatusPaid,
	TicketStatusCanceled,
}

func (e TicketStatus) IsValid() bool {
	switch e {
	case TicketStatusPaid, TicketStatusCanceled:
		return true
	}
	return false
}

func (e TicketStatus) String() string {
	return string(e)
}

func (e *TicketStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TicketStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TicketStatus", str)
	}
	return nil
}

func (e TicketStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
