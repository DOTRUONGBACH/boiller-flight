// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountsColumns holds the columns for the "accounts" table.
	AccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString, Unique: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"Administrator", "Subscriber"}},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Inactive", "Active"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "customer_accounts", Type: field.TypeUUID, Nullable: true},
	}
	// AccountsTable holds the schema information for the "accounts" table.
	AccountsTable = &schema.Table{
		Name:       "accounts",
		Columns:    AccountsColumns,
		PrimaryKey: []*schema.Column{AccountsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "accounts_customers_accounts",
				Columns:    []*schema.Column{AccountsColumns[7]},
				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// BookingsColumns holds the columns for the "bookings" table.
	BookingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "economy_tickets", Type: field.TypeInt, Default: 0},
		{Name: "business_tickets", Type: field.TypeInt, Default: 0},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Success", "Fail", "Canceled"}},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"OneWay", "RoundTrip"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "customer_id", Type: field.TypeUUID, Nullable: true},
		{Name: "flight_id", Type: field.TypeUUID},
		{Name: "passenger_id", Type: field.TypeUUID, Nullable: true},
	}
	// BookingsTable holds the schema information for the "bookings" table.
	BookingsTable = &schema.Table{
		Name:       "bookings",
		Columns:    BookingsColumns,
		PrimaryKey: []*schema.Column{BookingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "bookings_customers_bookings",
				Columns:    []*schema.Column{BookingsColumns[7]},
				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "bookings_flights_belongs_to",
				Columns:    []*schema.Column{BookingsColumns[8]},
				RefColumns: []*schema.Column{FlightsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "bookings_passengers_bookings",
				Columns:    []*schema.Column{BookingsColumns[9]},
				RefColumns: []*schema.Column{PassengersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CustomersColumns holds the columns for the "customers" table.
	CustomersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "citizen_id", Type: field.TypeString, Unique: true, Size: 12},
		{Name: "phone", Type: field.TypeString, Size: 10},
		{Name: "address", Type: field.TypeString},
		{Name: "gender", Type: field.TypeEnum, Enums: []string{"Male", "Female", "Other"}},
		{Name: "date_of_birth", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// CustomersTable holds the schema information for the "customers" table.
	CustomersTable = &schema.Table{
		Name:       "customers",
		Columns:    CustomersColumns,
		PrimaryKey: []*schema.Column{CustomersColumns[0]},
	}
	// FlightsColumns holds the columns for the "flights" table.
	FlightsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "flight_code", Type: field.TypeString},
		{Name: "from", Type: field.TypeString, Size: 255},
		{Name: "to", Type: field.TypeString, Size: 255},
		{Name: "departure_date", Type: field.TypeTime},
		{Name: "departure_time", Type: field.TypeTime},
		{Name: "duration", Type: field.TypeInt},
		{Name: "capacity", Type: field.TypeInt},
		{Name: "economy_available_seat", Type: field.TypeInt},
		{Name: "business_available_seat", Type: field.TypeInt},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Scheduled", "Delayed", "Departed", "Arrived", "Canceled", "Full"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// FlightsTable holds the schema information for the "flights" table.
	FlightsTable = &schema.Table{
		Name:       "flights",
		Columns:    FlightsColumns,
		PrimaryKey: []*schema.Column{FlightsColumns[0]},
	}
	// PassengersColumns holds the columns for the "passengers" table.
	PassengersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "citizen_id", Type: field.TypeString, Unique: true, Size: 12},
		{Name: "email", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString, Size: 10},
		{Name: "address", Type: field.TypeString},
		{Name: "gender", Type: field.TypeEnum, Enums: []string{"Male", "Female", "Other"}},
		{Name: "date_of_birth", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// PassengersTable holds the schema information for the "passengers" table.
	PassengersTable = &schema.Table{
		Name:       "passengers",
		Columns:    PassengersColumns,
		PrimaryKey: []*schema.Column{PassengersColumns[0]},
	}
	// TicketsColumns holds the columns for the "tickets" table.
	TicketsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "class", Type: field.TypeEnum, Enums: []string{"Economy", "Business"}},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Paid", "Canceled"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "booking_id", Type: field.TypeUUID},
		{Name: "flight_id", Type: field.TypeUUID},
		{Name: "ticket_owner_ticket", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// TicketsTable holds the schema information for the "tickets" table.
	TicketsTable = &schema.Table{
		Name:       "tickets",
		Columns:    TicketsColumns,
		PrimaryKey: []*schema.Column{TicketsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tickets_bookings_booking_tickets",
				Columns:    []*schema.Column{TicketsColumns[5]},
				RefColumns: []*schema.Column{BookingsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "tickets_flights_flight_tickets",
				Columns:    []*schema.Column{TicketsColumns[6]},
				RefColumns: []*schema.Column{FlightsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "tickets_ticket_owners_ticket",
				Columns:    []*schema.Column{TicketsColumns[7]},
				RefColumns: []*schema.Column{TicketOwnersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TicketOwnersColumns holds the columns for the "ticket_owners" table.
	TicketOwnersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "customer_ticket", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "passenger_ticket", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// TicketOwnersTable holds the schema information for the "ticket_owners" table.
	TicketOwnersTable = &schema.Table{
		Name:       "ticket_owners",
		Columns:    TicketOwnersColumns,
		PrimaryKey: []*schema.Column{TicketOwnersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "ticket_owners_customers_ticket",
				Columns:    []*schema.Column{TicketOwnersColumns[3]},
				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "ticket_owners_passengers_ticket",
				Columns:    []*schema.Column{TicketOwnersColumns[4]},
				RefColumns: []*schema.Column{PassengersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountsTable,
		BookingsTable,
		CustomersTable,
		FlightsTable,
		PassengersTable,
		TicketsTable,
		TicketOwnersTable,
	}
)

func init() {
	AccountsTable.ForeignKeys[0].RefTable = CustomersTable
	BookingsTable.ForeignKeys[0].RefTable = CustomersTable
	BookingsTable.ForeignKeys[1].RefTable = FlightsTable
	BookingsTable.ForeignKeys[2].RefTable = PassengersTable
	TicketsTable.ForeignKeys[0].RefTable = BookingsTable
	TicketsTable.ForeignKeys[1].RefTable = FlightsTable
	TicketsTable.ForeignKeys[2].RefTable = TicketOwnersTable
	TicketOwnersTable.ForeignKeys[0].RefTable = CustomersTable
	TicketOwnersTable.ForeignKeys[1].RefTable = PassengersTable
}
