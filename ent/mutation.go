// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mock_project/ent/account"
	"mock_project/ent/booking"
	"mock_project/ent/customer"
	"mock_project/ent/flight"
	"mock_project/ent/passenger"
	"mock_project/ent/predicate"
	"mock_project/ent/ticket"
	"mock_project/ent/ticketowner"
	"sync"
	"time"

	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAccount     = "Account"
	TypeBooking     = "Booking"
	TypeCustomer    = "Customer"
	TypeFlight      = "Flight"
	TypePassenger   = "Passenger"
	TypeTicket      = "Ticket"
	TypeTicketOwner = "TicketOwner"
)

// AccountMutation represents an operation that mutates the Account nodes in the graph.
type AccountMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	email            *string
	password         *string
	role             *account.Role
	status           *account.Status
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	acc_owner        *uuid.UUID
	clearedacc_owner bool
	done             bool
	oldValue         func(context.Context) (*Account, error)
	predicates       []predicate.Account
}

var _ ent.Mutation = (*AccountMutation)(nil)

// accountOption allows management of the mutation configuration using functional options.
type accountOption func(*AccountMutation)

// newAccountMutation creates new mutation for the Account entity.
func newAccountMutation(c config, op Op, opts ...accountOption) *AccountMutation {
	m := &AccountMutation{
		config:        c,
		op:            op,
		typ:           TypeAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccountID sets the ID field of the mutation.
func withAccountID(id uuid.UUID) accountOption {
	return func(m *AccountMutation) {
		var (
			err   error
			once  sync.Once
			value *Account
		)
		m.oldValue = func(ctx context.Context) (*Account, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Account.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccount sets the old Account of the mutation.
func withAccount(node *Account) accountOption {
	return func(m *AccountMutation) {
		m.oldValue = func(context.Context) (*Account, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Account entities.
func (m *AccountMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccountMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccountMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Account.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *AccountMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *AccountMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *AccountMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *AccountMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *AccountMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *AccountMutation) ResetPassword() {
	m.password = nil
}

// SetRole sets the "role" field.
func (m *AccountMutation) SetRole(a account.Role) {
	m.role = &a
}

// Role returns the value of the "role" field in the mutation.
func (m *AccountMutation) Role() (r account.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldRole(ctx context.Context) (v account.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *AccountMutation) ResetRole() {
	m.role = nil
}

// SetStatus sets the "status" field.
func (m *AccountMutation) SetStatus(a account.Status) {
	m.status = &a
}

// Status returns the value of the "status" field in the mutation.
func (m *AccountMutation) Status() (r account.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldStatus(ctx context.Context) (v account.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *AccountMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AccountMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AccountMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AccountMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AccountMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AccountMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AccountMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAccOwnerID sets the "acc_owner" edge to the Customer entity by id.
func (m *AccountMutation) SetAccOwnerID(id uuid.UUID) {
	m.acc_owner = &id
}

// ClearAccOwner clears the "acc_owner" edge to the Customer entity.
func (m *AccountMutation) ClearAccOwner() {
	m.clearedacc_owner = true
}

// AccOwnerCleared reports if the "acc_owner" edge to the Customer entity was cleared.
func (m *AccountMutation) AccOwnerCleared() bool {
	return m.clearedacc_owner
}

// AccOwnerID returns the "acc_owner" edge ID in the mutation.
func (m *AccountMutation) AccOwnerID() (id uuid.UUID, exists bool) {
	if m.acc_owner != nil {
		return *m.acc_owner, true
	}
	return
}

// AccOwnerIDs returns the "acc_owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AccOwnerID instead. It exists only for internal usage by the builders.
func (m *AccountMutation) AccOwnerIDs() (ids []uuid.UUID) {
	if id := m.acc_owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAccOwner resets all changes to the "acc_owner" edge.
func (m *AccountMutation) ResetAccOwner() {
	m.acc_owner = nil
	m.clearedacc_owner = false
}

// Where appends a list predicates to the AccountMutation builder.
func (m *AccountMutation) Where(ps ...predicate.Account) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AccountMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Account).
func (m *AccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccountMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.email != nil {
		fields = append(fields, account.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, account.FieldPassword)
	}
	if m.role != nil {
		fields = append(fields, account.FieldRole)
	}
	if m.status != nil {
		fields = append(fields, account.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, account.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, account.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case account.FieldEmail:
		return m.Email()
	case account.FieldPassword:
		return m.Password()
	case account.FieldRole:
		return m.Role()
	case account.FieldStatus:
		return m.Status()
	case account.FieldCreatedAt:
		return m.CreatedAt()
	case account.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case account.FieldEmail:
		return m.OldEmail(ctx)
	case account.FieldPassword:
		return m.OldPassword(ctx)
	case account.FieldRole:
		return m.OldRole(ctx)
	case account.FieldStatus:
		return m.OldStatus(ctx)
	case account.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case account.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Account field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case account.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case account.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case account.FieldRole:
		v, ok := value.(account.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case account.FieldStatus:
		v, ok := value.(account.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case account.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case account.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccountMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccountMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Account numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccountMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccountMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Account nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccountMutation) ResetField(name string) error {
	switch name {
	case account.FieldEmail:
		m.ResetEmail()
		return nil
	case account.FieldPassword:
		m.ResetPassword()
		return nil
	case account.FieldRole:
		m.ResetRole()
		return nil
	case account.FieldStatus:
		m.ResetStatus()
		return nil
	case account.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case account.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.acc_owner != nil {
		edges = append(edges, account.EdgeAccOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccountMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case account.EdgeAccOwner:
		if id := m.acc_owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedacc_owner {
		edges = append(edges, account.EdgeAccOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccountMutation) EdgeCleared(name string) bool {
	switch name {
	case account.EdgeAccOwner:
		return m.clearedacc_owner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccountMutation) ClearEdge(name string) error {
	switch name {
	case account.EdgeAccOwner:
		m.ClearAccOwner()
		return nil
	}
	return fmt.Errorf("unknown Account unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccountMutation) ResetEdge(name string) error {
	switch name {
	case account.EdgeAccOwner:
		m.ResetAccOwner()
		return nil
	}
	return fmt.Errorf("unknown Account edge %s", name)
}

// BookingMutation represents an operation that mutates the Booking nodes in the graph.
type BookingMutation struct {
	config
	op                               Op
	typ                              string
	id                               *uuid.UUID
	economy_tickets                  *int
	addeconomy_tickets               *int
	business_tickets                 *int
	addbusiness_tickets              *int
	status                           *booking.Status
	_type                            *booking.Type
	created_at                       *time.Time
	updated_at                       *time.Time
	clearedFields                    map[string]struct{}
	booking_flight                   *uuid.UUID
	clearedbooking_flight            bool
	customer_booking_tickets         *uuid.UUID
	clearedcustomer_booking_tickets  bool
	passenger_booking_tickets        *uuid.UUID
	clearedpassenger_booking_tickets bool
	booking_tickets                  map[uuid.UUID]struct{}
	removedbooking_tickets           map[uuid.UUID]struct{}
	clearedbooking_tickets           bool
	done                             bool
	oldValue                         func(context.Context) (*Booking, error)
	predicates                       []predicate.Booking
}

var _ ent.Mutation = (*BookingMutation)(nil)

// bookingOption allows management of the mutation configuration using functional options.
type bookingOption func(*BookingMutation)

// newBookingMutation creates new mutation for the Booking entity.
func newBookingMutation(c config, op Op, opts ...bookingOption) *BookingMutation {
	m := &BookingMutation{
		config:        c,
		op:            op,
		typ:           TypeBooking,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBookingID sets the ID field of the mutation.
func withBookingID(id uuid.UUID) bookingOption {
	return func(m *BookingMutation) {
		var (
			err   error
			once  sync.Once
			value *Booking
		)
		m.oldValue = func(ctx context.Context) (*Booking, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Booking.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBooking sets the old Booking of the mutation.
func withBooking(node *Booking) bookingOption {
	return func(m *BookingMutation) {
		m.oldValue = func(context.Context) (*Booking, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BookingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BookingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Booking entities.
func (m *BookingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BookingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BookingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Booking.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFlightID sets the "flight_id" field.
func (m *BookingMutation) SetFlightID(u uuid.UUID) {
	m.booking_flight = &u
}

// FlightID returns the value of the "flight_id" field in the mutation.
func (m *BookingMutation) FlightID() (r uuid.UUID, exists bool) {
	v := m.booking_flight
	if v == nil {
		return
	}
	return *v, true
}

// OldFlightID returns the old "flight_id" field's value of the Booking entity.
// If the Booking object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingMutation) OldFlightID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFlightID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFlightID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFlightID: %w", err)
	}
	return oldValue.FlightID, nil
}

// ResetFlightID resets all changes to the "flight_id" field.
func (m *BookingMutation) ResetFlightID() {
	m.booking_flight = nil
}

// SetCustomerID sets the "customer_id" field.
func (m *BookingMutation) SetCustomerID(u uuid.UUID) {
	m.customer_booking_tickets = &u
}

// CustomerID returns the value of the "customer_id" field in the mutation.
func (m *BookingMutation) CustomerID() (r uuid.UUID, exists bool) {
	v := m.customer_booking_tickets
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerID returns the old "customer_id" field's value of the Booking entity.
// If the Booking object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingMutation) OldCustomerID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerID: %w", err)
	}
	return oldValue.CustomerID, nil
}

// ClearCustomerID clears the value of the "customer_id" field.
func (m *BookingMutation) ClearCustomerID() {
	m.customer_booking_tickets = nil
	m.clearedFields[booking.FieldCustomerID] = struct{}{}
}

// CustomerIDCleared returns if the "customer_id" field was cleared in this mutation.
func (m *BookingMutation) CustomerIDCleared() bool {
	_, ok := m.clearedFields[booking.FieldCustomerID]
	return ok
}

// ResetCustomerID resets all changes to the "customer_id" field.
func (m *BookingMutation) ResetCustomerID() {
	m.customer_booking_tickets = nil
	delete(m.clearedFields, booking.FieldCustomerID)
}

// SetPassengerID sets the "passenger_id" field.
func (m *BookingMutation) SetPassengerID(u uuid.UUID) {
	m.passenger_booking_tickets = &u
}

// PassengerID returns the value of the "passenger_id" field in the mutation.
func (m *BookingMutation) PassengerID() (r uuid.UUID, exists bool) {
	v := m.passenger_booking_tickets
	if v == nil {
		return
	}
	return *v, true
}

// OldPassengerID returns the old "passenger_id" field's value of the Booking entity.
// If the Booking object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingMutation) OldPassengerID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassengerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassengerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassengerID: %w", err)
	}
	return oldValue.PassengerID, nil
}

// ClearPassengerID clears the value of the "passenger_id" field.
func (m *BookingMutation) ClearPassengerID() {
	m.passenger_booking_tickets = nil
	m.clearedFields[booking.FieldPassengerID] = struct{}{}
}

// PassengerIDCleared returns if the "passenger_id" field was cleared in this mutation.
func (m *BookingMutation) PassengerIDCleared() bool {
	_, ok := m.clearedFields[booking.FieldPassengerID]
	return ok
}

// ResetPassengerID resets all changes to the "passenger_id" field.
func (m *BookingMutation) ResetPassengerID() {
	m.passenger_booking_tickets = nil
	delete(m.clearedFields, booking.FieldPassengerID)
}

// SetEconomyTickets sets the "economy_tickets" field.
func (m *BookingMutation) SetEconomyTickets(i int) {
	m.economy_tickets = &i
	m.addeconomy_tickets = nil
}

// EconomyTickets returns the value of the "economy_tickets" field in the mutation.
func (m *BookingMutation) EconomyTickets() (r int, exists bool) {
	v := m.economy_tickets
	if v == nil {
		return
	}
	return *v, true
}

// OldEconomyTickets returns the old "economy_tickets" field's value of the Booking entity.
// If the Booking object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingMutation) OldEconomyTickets(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEconomyTickets is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEconomyTickets requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEconomyTickets: %w", err)
	}
	return oldValue.EconomyTickets, nil
}

// AddEconomyTickets adds i to the "economy_tickets" field.
func (m *BookingMutation) AddEconomyTickets(i int) {
	if m.addeconomy_tickets != nil {
		*m.addeconomy_tickets += i
	} else {
		m.addeconomy_tickets = &i
	}
}

// AddedEconomyTickets returns the value that was added to the "economy_tickets" field in this mutation.
func (m *BookingMutation) AddedEconomyTickets() (r int, exists bool) {
	v := m.addeconomy_tickets
	if v == nil {
		return
	}
	return *v, true
}

// ResetEconomyTickets resets all changes to the "economy_tickets" field.
func (m *BookingMutation) ResetEconomyTickets() {
	m.economy_tickets = nil
	m.addeconomy_tickets = nil
}

// SetBusinessTickets sets the "business_tickets" field.
func (m *BookingMutation) SetBusinessTickets(i int) {
	m.business_tickets = &i
	m.addbusiness_tickets = nil
}

// BusinessTickets returns the value of the "business_tickets" field in the mutation.
func (m *BookingMutation) BusinessTickets() (r int, exists bool) {
	v := m.business_tickets
	if v == nil {
		return
	}
	return *v, true
}

// OldBusinessTickets returns the old "business_tickets" field's value of the Booking entity.
// If the Booking object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingMutation) OldBusinessTickets(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBusinessTickets is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBusinessTickets requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBusinessTickets: %w", err)
	}
	return oldValue.BusinessTickets, nil
}

// AddBusinessTickets adds i to the "business_tickets" field.
func (m *BookingMutation) AddBusinessTickets(i int) {
	if m.addbusiness_tickets != nil {
		*m.addbusiness_tickets += i
	} else {
		m.addbusiness_tickets = &i
	}
}

// AddedBusinessTickets returns the value that was added to the "business_tickets" field in this mutation.
func (m *BookingMutation) AddedBusinessTickets() (r int, exists bool) {
	v := m.addbusiness_tickets
	if v == nil {
		return
	}
	return *v, true
}

// ResetBusinessTickets resets all changes to the "business_tickets" field.
func (m *BookingMutation) ResetBusinessTickets() {
	m.business_tickets = nil
	m.addbusiness_tickets = nil
}

// SetStatus sets the "status" field.
func (m *BookingMutation) SetStatus(b booking.Status) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *BookingMutation) Status() (r booking.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Booking entity.
// If the Booking object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingMutation) OldStatus(ctx context.Context) (v booking.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *BookingMutation) ResetStatus() {
	m.status = nil
}

// SetType sets the "type" field.
func (m *BookingMutation) SetType(b booking.Type) {
	m._type = &b
}

// GetType returns the value of the "type" field in the mutation.
func (m *BookingMutation) GetType() (r booking.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Booking entity.
// If the Booking object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingMutation) OldType(ctx context.Context) (v booking.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *BookingMutation) ResetType() {
	m._type = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *BookingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BookingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Booking entity.
// If the Booking object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BookingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BookingMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BookingMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Booking entity.
// If the Booking object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BookingMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetBookingFlightID sets the "booking_flight" edge to the Flight entity by id.
func (m *BookingMutation) SetBookingFlightID(id uuid.UUID) {
	m.booking_flight = &id
}

// ClearBookingFlight clears the "booking_flight" edge to the Flight entity.
func (m *BookingMutation) ClearBookingFlight() {
	m.clearedbooking_flight = true
}

// BookingFlightCleared reports if the "booking_flight" edge to the Flight entity was cleared.
func (m *BookingMutation) BookingFlightCleared() bool {
	return m.clearedbooking_flight
}

// BookingFlightID returns the "booking_flight" edge ID in the mutation.
func (m *BookingMutation) BookingFlightID() (id uuid.UUID, exists bool) {
	if m.booking_flight != nil {
		return *m.booking_flight, true
	}
	return
}

// BookingFlightIDs returns the "booking_flight" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BookingFlightID instead. It exists only for internal usage by the builders.
func (m *BookingMutation) BookingFlightIDs() (ids []uuid.UUID) {
	if id := m.booking_flight; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBookingFlight resets all changes to the "booking_flight" edge.
func (m *BookingMutation) ResetBookingFlight() {
	m.booking_flight = nil
	m.clearedbooking_flight = false
}

// SetCustomerBookingTicketsID sets the "customer_booking_tickets" edge to the Customer entity by id.
func (m *BookingMutation) SetCustomerBookingTicketsID(id uuid.UUID) {
	m.customer_booking_tickets = &id
}

// ClearCustomerBookingTickets clears the "customer_booking_tickets" edge to the Customer entity.
func (m *BookingMutation) ClearCustomerBookingTickets() {
	m.clearedcustomer_booking_tickets = true
}

// CustomerBookingTicketsCleared reports if the "customer_booking_tickets" edge to the Customer entity was cleared.
func (m *BookingMutation) CustomerBookingTicketsCleared() bool {
	return m.CustomerIDCleared() || m.clearedcustomer_booking_tickets
}

// CustomerBookingTicketsID returns the "customer_booking_tickets" edge ID in the mutation.
func (m *BookingMutation) CustomerBookingTicketsID() (id uuid.UUID, exists bool) {
	if m.customer_booking_tickets != nil {
		return *m.customer_booking_tickets, true
	}
	return
}

// CustomerBookingTicketsIDs returns the "customer_booking_tickets" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CustomerBookingTicketsID instead. It exists only for internal usage by the builders.
func (m *BookingMutation) CustomerBookingTicketsIDs() (ids []uuid.UUID) {
	if id := m.customer_booking_tickets; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCustomerBookingTickets resets all changes to the "customer_booking_tickets" edge.
func (m *BookingMutation) ResetCustomerBookingTickets() {
	m.customer_booking_tickets = nil
	m.clearedcustomer_booking_tickets = false
}

// SetPassengerBookingTicketsID sets the "passenger_booking_tickets" edge to the Passenger entity by id.
func (m *BookingMutation) SetPassengerBookingTicketsID(id uuid.UUID) {
	m.passenger_booking_tickets = &id
}

// ClearPassengerBookingTickets clears the "passenger_booking_tickets" edge to the Passenger entity.
func (m *BookingMutation) ClearPassengerBookingTickets() {
	m.clearedpassenger_booking_tickets = true
}

// PassengerBookingTicketsCleared reports if the "passenger_booking_tickets" edge to the Passenger entity was cleared.
func (m *BookingMutation) PassengerBookingTicketsCleared() bool {
	return m.PassengerIDCleared() || m.clearedpassenger_booking_tickets
}

// PassengerBookingTicketsID returns the "passenger_booking_tickets" edge ID in the mutation.
func (m *BookingMutation) PassengerBookingTicketsID() (id uuid.UUID, exists bool) {
	if m.passenger_booking_tickets != nil {
		return *m.passenger_booking_tickets, true
	}
	return
}

// PassengerBookingTicketsIDs returns the "passenger_booking_tickets" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PassengerBookingTicketsID instead. It exists only for internal usage by the builders.
func (m *BookingMutation) PassengerBookingTicketsIDs() (ids []uuid.UUID) {
	if id := m.passenger_booking_tickets; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPassengerBookingTickets resets all changes to the "passenger_booking_tickets" edge.
func (m *BookingMutation) ResetPassengerBookingTickets() {
	m.passenger_booking_tickets = nil
	m.clearedpassenger_booking_tickets = false
}

// AddBookingTicketIDs adds the "booking_tickets" edge to the Ticket entity by ids.
func (m *BookingMutation) AddBookingTicketIDs(ids ...uuid.UUID) {
	if m.booking_tickets == nil {
		m.booking_tickets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.booking_tickets[ids[i]] = struct{}{}
	}
}

// ClearBookingTickets clears the "booking_tickets" edge to the Ticket entity.
func (m *BookingMutation) ClearBookingTickets() {
	m.clearedbooking_tickets = true
}

// BookingTicketsCleared reports if the "booking_tickets" edge to the Ticket entity was cleared.
func (m *BookingMutation) BookingTicketsCleared() bool {
	return m.clearedbooking_tickets
}

// RemoveBookingTicketIDs removes the "booking_tickets" edge to the Ticket entity by IDs.
func (m *BookingMutation) RemoveBookingTicketIDs(ids ...uuid.UUID) {
	if m.removedbooking_tickets == nil {
		m.removedbooking_tickets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.booking_tickets, ids[i])
		m.removedbooking_tickets[ids[i]] = struct{}{}
	}
}

// RemovedBookingTickets returns the removed IDs of the "booking_tickets" edge to the Ticket entity.
func (m *BookingMutation) RemovedBookingTicketsIDs() (ids []uuid.UUID) {
	for id := range m.removedbooking_tickets {
		ids = append(ids, id)
	}
	return
}

// BookingTicketsIDs returns the "booking_tickets" edge IDs in the mutation.
func (m *BookingMutation) BookingTicketsIDs() (ids []uuid.UUID) {
	for id := range m.booking_tickets {
		ids = append(ids, id)
	}
	return
}

// ResetBookingTickets resets all changes to the "booking_tickets" edge.
func (m *BookingMutation) ResetBookingTickets() {
	m.booking_tickets = nil
	m.clearedbooking_tickets = false
	m.removedbooking_tickets = nil
}

// Where appends a list predicates to the BookingMutation builder.
func (m *BookingMutation) Where(ps ...predicate.Booking) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *BookingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Booking).
func (m *BookingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BookingMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.booking_flight != nil {
		fields = append(fields, booking.FieldFlightID)
	}
	if m.customer_booking_tickets != nil {
		fields = append(fields, booking.FieldCustomerID)
	}
	if m.passenger_booking_tickets != nil {
		fields = append(fields, booking.FieldPassengerID)
	}
	if m.economy_tickets != nil {
		fields = append(fields, booking.FieldEconomyTickets)
	}
	if m.business_tickets != nil {
		fields = append(fields, booking.FieldBusinessTickets)
	}
	if m.status != nil {
		fields = append(fields, booking.FieldStatus)
	}
	if m._type != nil {
		fields = append(fields, booking.FieldType)
	}
	if m.created_at != nil {
		fields = append(fields, booking.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, booking.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BookingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case booking.FieldFlightID:
		return m.FlightID()
	case booking.FieldCustomerID:
		return m.CustomerID()
	case booking.FieldPassengerID:
		return m.PassengerID()
	case booking.FieldEconomyTickets:
		return m.EconomyTickets()
	case booking.FieldBusinessTickets:
		return m.BusinessTickets()
	case booking.FieldStatus:
		return m.Status()
	case booking.FieldType:
		return m.GetType()
	case booking.FieldCreatedAt:
		return m.CreatedAt()
	case booking.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BookingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case booking.FieldFlightID:
		return m.OldFlightID(ctx)
	case booking.FieldCustomerID:
		return m.OldCustomerID(ctx)
	case booking.FieldPassengerID:
		return m.OldPassengerID(ctx)
	case booking.FieldEconomyTickets:
		return m.OldEconomyTickets(ctx)
	case booking.FieldBusinessTickets:
		return m.OldBusinessTickets(ctx)
	case booking.FieldStatus:
		return m.OldStatus(ctx)
	case booking.FieldType:
		return m.OldType(ctx)
	case booking.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case booking.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Booking field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BookingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case booking.FieldFlightID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFlightID(v)
		return nil
	case booking.FieldCustomerID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerID(v)
		return nil
	case booking.FieldPassengerID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassengerID(v)
		return nil
	case booking.FieldEconomyTickets:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEconomyTickets(v)
		return nil
	case booking.FieldBusinessTickets:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBusinessTickets(v)
		return nil
	case booking.FieldStatus:
		v, ok := value.(booking.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case booking.FieldType:
		v, ok := value.(booking.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case booking.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case booking.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Booking field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BookingMutation) AddedFields() []string {
	var fields []string
	if m.addeconomy_tickets != nil {
		fields = append(fields, booking.FieldEconomyTickets)
	}
	if m.addbusiness_tickets != nil {
		fields = append(fields, booking.FieldBusinessTickets)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BookingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case booking.FieldEconomyTickets:
		return m.AddedEconomyTickets()
	case booking.FieldBusinessTickets:
		return m.AddedBusinessTickets()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BookingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case booking.FieldEconomyTickets:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEconomyTickets(v)
		return nil
	case booking.FieldBusinessTickets:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBusinessTickets(v)
		return nil
	}
	return fmt.Errorf("unknown Booking numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BookingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(booking.FieldCustomerID) {
		fields = append(fields, booking.FieldCustomerID)
	}
	if m.FieldCleared(booking.FieldPassengerID) {
		fields = append(fields, booking.FieldPassengerID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BookingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BookingMutation) ClearField(name string) error {
	switch name {
	case booking.FieldCustomerID:
		m.ClearCustomerID()
		return nil
	case booking.FieldPassengerID:
		m.ClearPassengerID()
		return nil
	}
	return fmt.Errorf("unknown Booking nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BookingMutation) ResetField(name string) error {
	switch name {
	case booking.FieldFlightID:
		m.ResetFlightID()
		return nil
	case booking.FieldCustomerID:
		m.ResetCustomerID()
		return nil
	case booking.FieldPassengerID:
		m.ResetPassengerID()
		return nil
	case booking.FieldEconomyTickets:
		m.ResetEconomyTickets()
		return nil
	case booking.FieldBusinessTickets:
		m.ResetBusinessTickets()
		return nil
	case booking.FieldStatus:
		m.ResetStatus()
		return nil
	case booking.FieldType:
		m.ResetType()
		return nil
	case booking.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case booking.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Booking field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BookingMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.booking_flight != nil {
		edges = append(edges, booking.EdgeBookingFlight)
	}
	if m.customer_booking_tickets != nil {
		edges = append(edges, booking.EdgeCustomerBookingTickets)
	}
	if m.passenger_booking_tickets != nil {
		edges = append(edges, booking.EdgePassengerBookingTickets)
	}
	if m.booking_tickets != nil {
		edges = append(edges, booking.EdgeBookingTickets)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BookingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case booking.EdgeBookingFlight:
		if id := m.booking_flight; id != nil {
			return []ent.Value{*id}
		}
	case booking.EdgeCustomerBookingTickets:
		if id := m.customer_booking_tickets; id != nil {
			return []ent.Value{*id}
		}
	case booking.EdgePassengerBookingTickets:
		if id := m.passenger_booking_tickets; id != nil {
			return []ent.Value{*id}
		}
	case booking.EdgeBookingTickets:
		ids := make([]ent.Value, 0, len(m.booking_tickets))
		for id := range m.booking_tickets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BookingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedbooking_tickets != nil {
		edges = append(edges, booking.EdgeBookingTickets)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BookingMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case booking.EdgeBookingTickets:
		ids := make([]ent.Value, 0, len(m.removedbooking_tickets))
		for id := range m.removedbooking_tickets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BookingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedbooking_flight {
		edges = append(edges, booking.EdgeBookingFlight)
	}
	if m.clearedcustomer_booking_tickets {
		edges = append(edges, booking.EdgeCustomerBookingTickets)
	}
	if m.clearedpassenger_booking_tickets {
		edges = append(edges, booking.EdgePassengerBookingTickets)
	}
	if m.clearedbooking_tickets {
		edges = append(edges, booking.EdgeBookingTickets)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BookingMutation) EdgeCleared(name string) bool {
	switch name {
	case booking.EdgeBookingFlight:
		return m.clearedbooking_flight
	case booking.EdgeCustomerBookingTickets:
		return m.clearedcustomer_booking_tickets
	case booking.EdgePassengerBookingTickets:
		return m.clearedpassenger_booking_tickets
	case booking.EdgeBookingTickets:
		return m.clearedbooking_tickets
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BookingMutation) ClearEdge(name string) error {
	switch name {
	case booking.EdgeBookingFlight:
		m.ClearBookingFlight()
		return nil
	case booking.EdgeCustomerBookingTickets:
		m.ClearCustomerBookingTickets()
		return nil
	case booking.EdgePassengerBookingTickets:
		m.ClearPassengerBookingTickets()
		return nil
	}
	return fmt.Errorf("unknown Booking unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BookingMutation) ResetEdge(name string) error {
	switch name {
	case booking.EdgeBookingFlight:
		m.ResetBookingFlight()
		return nil
	case booking.EdgeCustomerBookingTickets:
		m.ResetCustomerBookingTickets()
		return nil
	case booking.EdgePassengerBookingTickets:
		m.ResetPassengerBookingTickets()
		return nil
	case booking.EdgeBookingTickets:
		m.ResetBookingTickets()
		return nil
	}
	return fmt.Errorf("unknown Booking edge %s", name)
}

// CustomerMutation represents an operation that mutates the Customer nodes in the graph.
type CustomerMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	name            *string
	citizen_id      *string
	phone           *string
	address         *string
	gender          *customer.Gender
	date_of_birth   *time.Time
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	accounts        map[uuid.UUID]struct{}
	removedaccounts map[uuid.UUID]struct{}
	clearedaccounts bool
	bookings        map[uuid.UUID]struct{}
	removedbookings map[uuid.UUID]struct{}
	clearedbookings bool
	ticket          *uuid.UUID
	clearedticket   bool
	done            bool
	oldValue        func(context.Context) (*Customer, error)
	predicates      []predicate.Customer
}

var _ ent.Mutation = (*CustomerMutation)(nil)

// customerOption allows management of the mutation configuration using functional options.
type customerOption func(*CustomerMutation)

// newCustomerMutation creates new mutation for the Customer entity.
func newCustomerMutation(c config, op Op, opts ...customerOption) *CustomerMutation {
	m := &CustomerMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomerID sets the ID field of the mutation.
func withCustomerID(id uuid.UUID) customerOption {
	return func(m *CustomerMutation) {
		var (
			err   error
			once  sync.Once
			value *Customer
		)
		m.oldValue = func(ctx context.Context) (*Customer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Customer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomer sets the old Customer of the mutation.
func withCustomer(node *Customer) customerOption {
	return func(m *CustomerMutation) {
		m.oldValue = func(context.Context) (*Customer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Customer entities.
func (m *CustomerMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CustomerMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CustomerMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Customer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CustomerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CustomerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CustomerMutation) ResetName() {
	m.name = nil
}

// SetCitizenID sets the "citizen_id" field.
func (m *CustomerMutation) SetCitizenID(s string) {
	m.citizen_id = &s
}

// CitizenID returns the value of the "citizen_id" field in the mutation.
func (m *CustomerMutation) CitizenID() (r string, exists bool) {
	v := m.citizen_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCitizenID returns the old "citizen_id" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldCitizenID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCitizenID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCitizenID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCitizenID: %w", err)
	}
	return oldValue.CitizenID, nil
}

// ResetCitizenID resets all changes to the "citizen_id" field.
func (m *CustomerMutation) ResetCitizenID() {
	m.citizen_id = nil
}

// SetPhone sets the "phone" field.
func (m *CustomerMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *CustomerMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *CustomerMutation) ResetPhone() {
	m.phone = nil
}

// SetAddress sets the "address" field.
func (m *CustomerMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *CustomerMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *CustomerMutation) ResetAddress() {
	m.address = nil
}

// SetGender sets the "gender" field.
func (m *CustomerMutation) SetGender(c customer.Gender) {
	m.gender = &c
}

// Gender returns the value of the "gender" field in the mutation.
func (m *CustomerMutation) Gender() (r customer.Gender, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldGender(ctx context.Context) (v customer.Gender, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender resets all changes to the "gender" field.
func (m *CustomerMutation) ResetGender() {
	m.gender = nil
}

// SetDateOfBirth sets the "date_of_birth" field.
func (m *CustomerMutation) SetDateOfBirth(t time.Time) {
	m.date_of_birth = &t
}

// DateOfBirth returns the value of the "date_of_birth" field in the mutation.
func (m *CustomerMutation) DateOfBirth() (r time.Time, exists bool) {
	v := m.date_of_birth
	if v == nil {
		return
	}
	return *v, true
}

// OldDateOfBirth returns the old "date_of_birth" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldDateOfBirth(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateOfBirth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateOfBirth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateOfBirth: %w", err)
	}
	return oldValue.DateOfBirth, nil
}

// ResetDateOfBirth resets all changes to the "date_of_birth" field.
func (m *CustomerMutation) ResetDateOfBirth() {
	m.date_of_birth = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CustomerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CustomerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CustomerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CustomerMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CustomerMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CustomerMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddAccountIDs adds the "accounts" edge to the Account entity by ids.
func (m *CustomerMutation) AddAccountIDs(ids ...uuid.UUID) {
	if m.accounts == nil {
		m.accounts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.accounts[ids[i]] = struct{}{}
	}
}

// ClearAccounts clears the "accounts" edge to the Account entity.
func (m *CustomerMutation) ClearAccounts() {
	m.clearedaccounts = true
}

// AccountsCleared reports if the "accounts" edge to the Account entity was cleared.
func (m *CustomerMutation) AccountsCleared() bool {
	return m.clearedaccounts
}

// RemoveAccountIDs removes the "accounts" edge to the Account entity by IDs.
func (m *CustomerMutation) RemoveAccountIDs(ids ...uuid.UUID) {
	if m.removedaccounts == nil {
		m.removedaccounts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.accounts, ids[i])
		m.removedaccounts[ids[i]] = struct{}{}
	}
}

// RemovedAccounts returns the removed IDs of the "accounts" edge to the Account entity.
func (m *CustomerMutation) RemovedAccountsIDs() (ids []uuid.UUID) {
	for id := range m.removedaccounts {
		ids = append(ids, id)
	}
	return
}

// AccountsIDs returns the "accounts" edge IDs in the mutation.
func (m *CustomerMutation) AccountsIDs() (ids []uuid.UUID) {
	for id := range m.accounts {
		ids = append(ids, id)
	}
	return
}

// ResetAccounts resets all changes to the "accounts" edge.
func (m *CustomerMutation) ResetAccounts() {
	m.accounts = nil
	m.clearedaccounts = false
	m.removedaccounts = nil
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by ids.
func (m *CustomerMutation) AddBookingIDs(ids ...uuid.UUID) {
	if m.bookings == nil {
		m.bookings = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.bookings[ids[i]] = struct{}{}
	}
}

// ClearBookings clears the "bookings" edge to the Booking entity.
func (m *CustomerMutation) ClearBookings() {
	m.clearedbookings = true
}

// BookingsCleared reports if the "bookings" edge to the Booking entity was cleared.
func (m *CustomerMutation) BookingsCleared() bool {
	return m.clearedbookings
}

// RemoveBookingIDs removes the "bookings" edge to the Booking entity by IDs.
func (m *CustomerMutation) RemoveBookingIDs(ids ...uuid.UUID) {
	if m.removedbookings == nil {
		m.removedbookings = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.bookings, ids[i])
		m.removedbookings[ids[i]] = struct{}{}
	}
}

// RemovedBookings returns the removed IDs of the "bookings" edge to the Booking entity.
func (m *CustomerMutation) RemovedBookingsIDs() (ids []uuid.UUID) {
	for id := range m.removedbookings {
		ids = append(ids, id)
	}
	return
}

// BookingsIDs returns the "bookings" edge IDs in the mutation.
func (m *CustomerMutation) BookingsIDs() (ids []uuid.UUID) {
	for id := range m.bookings {
		ids = append(ids, id)
	}
	return
}

// ResetBookings resets all changes to the "bookings" edge.
func (m *CustomerMutation) ResetBookings() {
	m.bookings = nil
	m.clearedbookings = false
	m.removedbookings = nil
}

// SetTicketID sets the "ticket" edge to the TicketOwner entity by id.
func (m *CustomerMutation) SetTicketID(id uuid.UUID) {
	m.ticket = &id
}

// ClearTicket clears the "ticket" edge to the TicketOwner entity.
func (m *CustomerMutation) ClearTicket() {
	m.clearedticket = true
}

// TicketCleared reports if the "ticket" edge to the TicketOwner entity was cleared.
func (m *CustomerMutation) TicketCleared() bool {
	return m.clearedticket
}

// TicketID returns the "ticket" edge ID in the mutation.
func (m *CustomerMutation) TicketID() (id uuid.UUID, exists bool) {
	if m.ticket != nil {
		return *m.ticket, true
	}
	return
}

// TicketIDs returns the "ticket" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TicketID instead. It exists only for internal usage by the builders.
func (m *CustomerMutation) TicketIDs() (ids []uuid.UUID) {
	if id := m.ticket; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTicket resets all changes to the "ticket" edge.
func (m *CustomerMutation) ResetTicket() {
	m.ticket = nil
	m.clearedticket = false
}

// Where appends a list predicates to the CustomerMutation builder.
func (m *CustomerMutation) Where(ps ...predicate.Customer) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CustomerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Customer).
func (m *CustomerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CustomerMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.name != nil {
		fields = append(fields, customer.FieldName)
	}
	if m.citizen_id != nil {
		fields = append(fields, customer.FieldCitizenID)
	}
	if m.phone != nil {
		fields = append(fields, customer.FieldPhone)
	}
	if m.address != nil {
		fields = append(fields, customer.FieldAddress)
	}
	if m.gender != nil {
		fields = append(fields, customer.FieldGender)
	}
	if m.date_of_birth != nil {
		fields = append(fields, customer.FieldDateOfBirth)
	}
	if m.created_at != nil {
		fields = append(fields, customer.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, customer.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CustomerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customer.FieldName:
		return m.Name()
	case customer.FieldCitizenID:
		return m.CitizenID()
	case customer.FieldPhone:
		return m.Phone()
	case customer.FieldAddress:
		return m.Address()
	case customer.FieldGender:
		return m.Gender()
	case customer.FieldDateOfBirth:
		return m.DateOfBirth()
	case customer.FieldCreatedAt:
		return m.CreatedAt()
	case customer.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CustomerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customer.FieldName:
		return m.OldName(ctx)
	case customer.FieldCitizenID:
		return m.OldCitizenID(ctx)
	case customer.FieldPhone:
		return m.OldPhone(ctx)
	case customer.FieldAddress:
		return m.OldAddress(ctx)
	case customer.FieldGender:
		return m.OldGender(ctx)
	case customer.FieldDateOfBirth:
		return m.OldDateOfBirth(ctx)
	case customer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case customer.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Customer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customer.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case customer.FieldCitizenID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCitizenID(v)
		return nil
	case customer.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case customer.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case customer.FieldGender:
		v, ok := value.(customer.Gender)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case customer.FieldDateOfBirth:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateOfBirth(v)
		return nil
	case customer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case customer.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CustomerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CustomerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Customer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CustomerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CustomerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Customer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CustomerMutation) ResetField(name string) error {
	switch name {
	case customer.FieldName:
		m.ResetName()
		return nil
	case customer.FieldCitizenID:
		m.ResetCitizenID()
		return nil
	case customer.FieldPhone:
		m.ResetPhone()
		return nil
	case customer.FieldAddress:
		m.ResetAddress()
		return nil
	case customer.FieldGender:
		m.ResetGender()
		return nil
	case customer.FieldDateOfBirth:
		m.ResetDateOfBirth()
		return nil
	case customer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case customer.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CustomerMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.accounts != nil {
		edges = append(edges, customer.EdgeAccounts)
	}
	if m.bookings != nil {
		edges = append(edges, customer.EdgeBookings)
	}
	if m.ticket != nil {
		edges = append(edges, customer.EdgeTicket)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CustomerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeAccounts:
		ids := make([]ent.Value, 0, len(m.accounts))
		for id := range m.accounts {
			ids = append(ids, id)
		}
		return ids
	case customer.EdgeBookings:
		ids := make([]ent.Value, 0, len(m.bookings))
		for id := range m.bookings {
			ids = append(ids, id)
		}
		return ids
	case customer.EdgeTicket:
		if id := m.ticket; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CustomerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedaccounts != nil {
		edges = append(edges, customer.EdgeAccounts)
	}
	if m.removedbookings != nil {
		edges = append(edges, customer.EdgeBookings)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CustomerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeAccounts:
		ids := make([]ent.Value, 0, len(m.removedaccounts))
		for id := range m.removedaccounts {
			ids = append(ids, id)
		}
		return ids
	case customer.EdgeBookings:
		ids := make([]ent.Value, 0, len(m.removedbookings))
		for id := range m.removedbookings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CustomerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedaccounts {
		edges = append(edges, customer.EdgeAccounts)
	}
	if m.clearedbookings {
		edges = append(edges, customer.EdgeBookings)
	}
	if m.clearedticket {
		edges = append(edges, customer.EdgeTicket)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CustomerMutation) EdgeCleared(name string) bool {
	switch name {
	case customer.EdgeAccounts:
		return m.clearedaccounts
	case customer.EdgeBookings:
		return m.clearedbookings
	case customer.EdgeTicket:
		return m.clearedticket
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CustomerMutation) ClearEdge(name string) error {
	switch name {
	case customer.EdgeTicket:
		m.ClearTicket()
		return nil
	}
	return fmt.Errorf("unknown Customer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CustomerMutation) ResetEdge(name string) error {
	switch name {
	case customer.EdgeAccounts:
		m.ResetAccounts()
		return nil
	case customer.EdgeBookings:
		m.ResetBookings()
		return nil
	case customer.EdgeTicket:
		m.ResetTicket()
		return nil
	}
	return fmt.Errorf("unknown Customer edge %s", name)
}

// FlightMutation represents an operation that mutates the Flight nodes in the graph.
type FlightMutation struct {
	config
	op                         Op
	typ                        string
	id                         *uuid.UUID
	flight_code                *string
	from                       *string
	to                         *string
	departure_date             *time.Time
	departure_time             *time.Time
	duration                   *int
	addduration                *int
	capacity                   *int
	addcapacity                *int
	economy_available_seat     *int
	addeconomy_available_seat  *int
	business_available_seat    *int
	addbusiness_available_seat *int
	status                     *flight.Status
	created_at                 *time.Time
	updated_at                 *time.Time
	clearedFields              map[string]struct{}
	belongs_to                 map[uuid.UUID]struct{}
	removedbelongs_to          map[uuid.UUID]struct{}
	clearedbelongs_to          bool
	flight_tickets             map[uuid.UUID]struct{}
	removedflight_tickets      map[uuid.UUID]struct{}
	clearedflight_tickets      bool
	done                       bool
	oldValue                   func(context.Context) (*Flight, error)
	predicates                 []predicate.Flight
}

var _ ent.Mutation = (*FlightMutation)(nil)

// flightOption allows management of the mutation configuration using functional options.
type flightOption func(*FlightMutation)

// newFlightMutation creates new mutation for the Flight entity.
func newFlightMutation(c config, op Op, opts ...flightOption) *FlightMutation {
	m := &FlightMutation{
		config:        c,
		op:            op,
		typ:           TypeFlight,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFlightID sets the ID field of the mutation.
func withFlightID(id uuid.UUID) flightOption {
	return func(m *FlightMutation) {
		var (
			err   error
			once  sync.Once
			value *Flight
		)
		m.oldValue = func(ctx context.Context) (*Flight, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Flight.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFlight sets the old Flight of the mutation.
func withFlight(node *Flight) flightOption {
	return func(m *FlightMutation) {
		m.oldValue = func(context.Context) (*Flight, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FlightMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FlightMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Flight entities.
func (m *FlightMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FlightMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FlightMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Flight.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFlightCode sets the "flight_code" field.
func (m *FlightMutation) SetFlightCode(s string) {
	m.flight_code = &s
}

// FlightCode returns the value of the "flight_code" field in the mutation.
func (m *FlightMutation) FlightCode() (r string, exists bool) {
	v := m.flight_code
	if v == nil {
		return
	}
	return *v, true
}

// OldFlightCode returns the old "flight_code" field's value of the Flight entity.
// If the Flight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlightMutation) OldFlightCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFlightCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFlightCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFlightCode: %w", err)
	}
	return oldValue.FlightCode, nil
}

// ResetFlightCode resets all changes to the "flight_code" field.
func (m *FlightMutation) ResetFlightCode() {
	m.flight_code = nil
}

// SetFrom sets the "from" field.
func (m *FlightMutation) SetFrom(s string) {
	m.from = &s
}

// From returns the value of the "from" field in the mutation.
func (m *FlightMutation) From() (r string, exists bool) {
	v := m.from
	if v == nil {
		return
	}
	return *v, true
}

// OldFrom returns the old "from" field's value of the Flight entity.
// If the Flight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlightMutation) OldFrom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFrom: %w", err)
	}
	return oldValue.From, nil
}

// ResetFrom resets all changes to the "from" field.
func (m *FlightMutation) ResetFrom() {
	m.from = nil
}

// SetTo sets the "to" field.
func (m *FlightMutation) SetTo(s string) {
	m.to = &s
}

// To returns the value of the "to" field in the mutation.
func (m *FlightMutation) To() (r string, exists bool) {
	v := m.to
	if v == nil {
		return
	}
	return *v, true
}

// OldTo returns the old "to" field's value of the Flight entity.
// If the Flight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlightMutation) OldTo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTo: %w", err)
	}
	return oldValue.To, nil
}

// ResetTo resets all changes to the "to" field.
func (m *FlightMutation) ResetTo() {
	m.to = nil
}

// SetDepartureDate sets the "departure_date" field.
func (m *FlightMutation) SetDepartureDate(t time.Time) {
	m.departure_date = &t
}

// DepartureDate returns the value of the "departure_date" field in the mutation.
func (m *FlightMutation) DepartureDate() (r time.Time, exists bool) {
	v := m.departure_date
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartureDate returns the old "departure_date" field's value of the Flight entity.
// If the Flight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlightMutation) OldDepartureDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepartureDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepartureDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartureDate: %w", err)
	}
	return oldValue.DepartureDate, nil
}

// ResetDepartureDate resets all changes to the "departure_date" field.
func (m *FlightMutation) ResetDepartureDate() {
	m.departure_date = nil
}

// SetDepartureTime sets the "departure_time" field.
func (m *FlightMutation) SetDepartureTime(t time.Time) {
	m.departure_time = &t
}

// DepartureTime returns the value of the "departure_time" field in the mutation.
func (m *FlightMutation) DepartureTime() (r time.Time, exists bool) {
	v := m.departure_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartureTime returns the old "departure_time" field's value of the Flight entity.
// If the Flight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlightMutation) OldDepartureTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepartureTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepartureTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartureTime: %w", err)
	}
	return oldValue.DepartureTime, nil
}

// ResetDepartureTime resets all changes to the "departure_time" field.
func (m *FlightMutation) ResetDepartureTime() {
	m.departure_time = nil
}

// SetDuration sets the "duration" field.
func (m *FlightMutation) SetDuration(i int) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *FlightMutation) Duration() (r int, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Flight entity.
// If the Flight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlightMutation) OldDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *FlightMutation) AddDuration(i int) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *FlightMutation) AddedDuration() (r int, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *FlightMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// SetCapacity sets the "capacity" field.
func (m *FlightMutation) SetCapacity(i int) {
	m.capacity = &i
	m.addcapacity = nil
}

// Capacity returns the value of the "capacity" field in the mutation.
func (m *FlightMutation) Capacity() (r int, exists bool) {
	v := m.capacity
	if v == nil {
		return
	}
	return *v, true
}

// OldCapacity returns the old "capacity" field's value of the Flight entity.
// If the Flight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlightMutation) OldCapacity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCapacity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCapacity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCapacity: %w", err)
	}
	return oldValue.Capacity, nil
}

// AddCapacity adds i to the "capacity" field.
func (m *FlightMutation) AddCapacity(i int) {
	if m.addcapacity != nil {
		*m.addcapacity += i
	} else {
		m.addcapacity = &i
	}
}

// AddedCapacity returns the value that was added to the "capacity" field in this mutation.
func (m *FlightMutation) AddedCapacity() (r int, exists bool) {
	v := m.addcapacity
	if v == nil {
		return
	}
	return *v, true
}

// ResetCapacity resets all changes to the "capacity" field.
func (m *FlightMutation) ResetCapacity() {
	m.capacity = nil
	m.addcapacity = nil
}

// SetEconomyAvailableSeat sets the "economy_available_seat" field.
func (m *FlightMutation) SetEconomyAvailableSeat(i int) {
	m.economy_available_seat = &i
	m.addeconomy_available_seat = nil
}

// EconomyAvailableSeat returns the value of the "economy_available_seat" field in the mutation.
func (m *FlightMutation) EconomyAvailableSeat() (r int, exists bool) {
	v := m.economy_available_seat
	if v == nil {
		return
	}
	return *v, true
}

// OldEconomyAvailableSeat returns the old "economy_available_seat" field's value of the Flight entity.
// If the Flight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlightMutation) OldEconomyAvailableSeat(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEconomyAvailableSeat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEconomyAvailableSeat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEconomyAvailableSeat: %w", err)
	}
	return oldValue.EconomyAvailableSeat, nil
}

// AddEconomyAvailableSeat adds i to the "economy_available_seat" field.
func (m *FlightMutation) AddEconomyAvailableSeat(i int) {
	if m.addeconomy_available_seat != nil {
		*m.addeconomy_available_seat += i
	} else {
		m.addeconomy_available_seat = &i
	}
}

// AddedEconomyAvailableSeat returns the value that was added to the "economy_available_seat" field in this mutation.
func (m *FlightMutation) AddedEconomyAvailableSeat() (r int, exists bool) {
	v := m.addeconomy_available_seat
	if v == nil {
		return
	}
	return *v, true
}

// ResetEconomyAvailableSeat resets all changes to the "economy_available_seat" field.
func (m *FlightMutation) ResetEconomyAvailableSeat() {
	m.economy_available_seat = nil
	m.addeconomy_available_seat = nil
}

// SetBusinessAvailableSeat sets the "business_available_seat" field.
func (m *FlightMutation) SetBusinessAvailableSeat(i int) {
	m.business_available_seat = &i
	m.addbusiness_available_seat = nil
}

// BusinessAvailableSeat returns the value of the "business_available_seat" field in the mutation.
func (m *FlightMutation) BusinessAvailableSeat() (r int, exists bool) {
	v := m.business_available_seat
	if v == nil {
		return
	}
	return *v, true
}

// OldBusinessAvailableSeat returns the old "business_available_seat" field's value of the Flight entity.
// If the Flight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlightMutation) OldBusinessAvailableSeat(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBusinessAvailableSeat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBusinessAvailableSeat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBusinessAvailableSeat: %w", err)
	}
	return oldValue.BusinessAvailableSeat, nil
}

// AddBusinessAvailableSeat adds i to the "business_available_seat" field.
func (m *FlightMutation) AddBusinessAvailableSeat(i int) {
	if m.addbusiness_available_seat != nil {
		*m.addbusiness_available_seat += i
	} else {
		m.addbusiness_available_seat = &i
	}
}

// AddedBusinessAvailableSeat returns the value that was added to the "business_available_seat" field in this mutation.
func (m *FlightMutation) AddedBusinessAvailableSeat() (r int, exists bool) {
	v := m.addbusiness_available_seat
	if v == nil {
		return
	}
	return *v, true
}

// ResetBusinessAvailableSeat resets all changes to the "business_available_seat" field.
func (m *FlightMutation) ResetBusinessAvailableSeat() {
	m.business_available_seat = nil
	m.addbusiness_available_seat = nil
}

// SetStatus sets the "status" field.
func (m *FlightMutation) SetStatus(f flight.Status) {
	m.status = &f
}

// Status returns the value of the "status" field in the mutation.
func (m *FlightMutation) Status() (r flight.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Flight entity.
// If the Flight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlightMutation) OldStatus(ctx context.Context) (v flight.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *FlightMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FlightMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FlightMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Flight entity.
// If the Flight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlightMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FlightMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FlightMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FlightMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Flight entity.
// If the Flight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlightMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FlightMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddBelongsToIDs adds the "belongs_to" edge to the Booking entity by ids.
func (m *FlightMutation) AddBelongsToIDs(ids ...uuid.UUID) {
	if m.belongs_to == nil {
		m.belongs_to = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.belongs_to[ids[i]] = struct{}{}
	}
}

// ClearBelongsTo clears the "belongs_to" edge to the Booking entity.
func (m *FlightMutation) ClearBelongsTo() {
	m.clearedbelongs_to = true
}

// BelongsToCleared reports if the "belongs_to" edge to the Booking entity was cleared.
func (m *FlightMutation) BelongsToCleared() bool {
	return m.clearedbelongs_to
}

// RemoveBelongsToIDs removes the "belongs_to" edge to the Booking entity by IDs.
func (m *FlightMutation) RemoveBelongsToIDs(ids ...uuid.UUID) {
	if m.removedbelongs_to == nil {
		m.removedbelongs_to = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.belongs_to, ids[i])
		m.removedbelongs_to[ids[i]] = struct{}{}
	}
}

// RemovedBelongsTo returns the removed IDs of the "belongs_to" edge to the Booking entity.
func (m *FlightMutation) RemovedBelongsToIDs() (ids []uuid.UUID) {
	for id := range m.removedbelongs_to {
		ids = append(ids, id)
	}
	return
}

// BelongsToIDs returns the "belongs_to" edge IDs in the mutation.
func (m *FlightMutation) BelongsToIDs() (ids []uuid.UUID) {
	for id := range m.belongs_to {
		ids = append(ids, id)
	}
	return
}

// ResetBelongsTo resets all changes to the "belongs_to" edge.
func (m *FlightMutation) ResetBelongsTo() {
	m.belongs_to = nil
	m.clearedbelongs_to = false
	m.removedbelongs_to = nil
}

// AddFlightTicketIDs adds the "flight_tickets" edge to the Ticket entity by ids.
func (m *FlightMutation) AddFlightTicketIDs(ids ...uuid.UUID) {
	if m.flight_tickets == nil {
		m.flight_tickets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.flight_tickets[ids[i]] = struct{}{}
	}
}

// ClearFlightTickets clears the "flight_tickets" edge to the Ticket entity.
func (m *FlightMutation) ClearFlightTickets() {
	m.clearedflight_tickets = true
}

// FlightTicketsCleared reports if the "flight_tickets" edge to the Ticket entity was cleared.
func (m *FlightMutation) FlightTicketsCleared() bool {
	return m.clearedflight_tickets
}

// RemoveFlightTicketIDs removes the "flight_tickets" edge to the Ticket entity by IDs.
func (m *FlightMutation) RemoveFlightTicketIDs(ids ...uuid.UUID) {
	if m.removedflight_tickets == nil {
		m.removedflight_tickets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.flight_tickets, ids[i])
		m.removedflight_tickets[ids[i]] = struct{}{}
	}
}

// RemovedFlightTickets returns the removed IDs of the "flight_tickets" edge to the Ticket entity.
func (m *FlightMutation) RemovedFlightTicketsIDs() (ids []uuid.UUID) {
	for id := range m.removedflight_tickets {
		ids = append(ids, id)
	}
	return
}

// FlightTicketsIDs returns the "flight_tickets" edge IDs in the mutation.
func (m *FlightMutation) FlightTicketsIDs() (ids []uuid.UUID) {
	for id := range m.flight_tickets {
		ids = append(ids, id)
	}
	return
}

// ResetFlightTickets resets all changes to the "flight_tickets" edge.
func (m *FlightMutation) ResetFlightTickets() {
	m.flight_tickets = nil
	m.clearedflight_tickets = false
	m.removedflight_tickets = nil
}

// Where appends a list predicates to the FlightMutation builder.
func (m *FlightMutation) Where(ps ...predicate.Flight) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FlightMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Flight).
func (m *FlightMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FlightMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.flight_code != nil {
		fields = append(fields, flight.FieldFlightCode)
	}
	if m.from != nil {
		fields = append(fields, flight.FieldFrom)
	}
	if m.to != nil {
		fields = append(fields, flight.FieldTo)
	}
	if m.departure_date != nil {
		fields = append(fields, flight.FieldDepartureDate)
	}
	if m.departure_time != nil {
		fields = append(fields, flight.FieldDepartureTime)
	}
	if m.duration != nil {
		fields = append(fields, flight.FieldDuration)
	}
	if m.capacity != nil {
		fields = append(fields, flight.FieldCapacity)
	}
	if m.economy_available_seat != nil {
		fields = append(fields, flight.FieldEconomyAvailableSeat)
	}
	if m.business_available_seat != nil {
		fields = append(fields, flight.FieldBusinessAvailableSeat)
	}
	if m.status != nil {
		fields = append(fields, flight.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, flight.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, flight.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FlightMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case flight.FieldFlightCode:
		return m.FlightCode()
	case flight.FieldFrom:
		return m.From()
	case flight.FieldTo:
		return m.To()
	case flight.FieldDepartureDate:
		return m.DepartureDate()
	case flight.FieldDepartureTime:
		return m.DepartureTime()
	case flight.FieldDuration:
		return m.Duration()
	case flight.FieldCapacity:
		return m.Capacity()
	case flight.FieldEconomyAvailableSeat:
		return m.EconomyAvailableSeat()
	case flight.FieldBusinessAvailableSeat:
		return m.BusinessAvailableSeat()
	case flight.FieldStatus:
		return m.Status()
	case flight.FieldCreatedAt:
		return m.CreatedAt()
	case flight.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FlightMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case flight.FieldFlightCode:
		return m.OldFlightCode(ctx)
	case flight.FieldFrom:
		return m.OldFrom(ctx)
	case flight.FieldTo:
		return m.OldTo(ctx)
	case flight.FieldDepartureDate:
		return m.OldDepartureDate(ctx)
	case flight.FieldDepartureTime:
		return m.OldDepartureTime(ctx)
	case flight.FieldDuration:
		return m.OldDuration(ctx)
	case flight.FieldCapacity:
		return m.OldCapacity(ctx)
	case flight.FieldEconomyAvailableSeat:
		return m.OldEconomyAvailableSeat(ctx)
	case flight.FieldBusinessAvailableSeat:
		return m.OldBusinessAvailableSeat(ctx)
	case flight.FieldStatus:
		return m.OldStatus(ctx)
	case flight.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case flight.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Flight field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FlightMutation) SetField(name string, value ent.Value) error {
	switch name {
	case flight.FieldFlightCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFlightCode(v)
		return nil
	case flight.FieldFrom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFrom(v)
		return nil
	case flight.FieldTo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTo(v)
		return nil
	case flight.FieldDepartureDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartureDate(v)
		return nil
	case flight.FieldDepartureTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartureTime(v)
		return nil
	case flight.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case flight.FieldCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCapacity(v)
		return nil
	case flight.FieldEconomyAvailableSeat:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEconomyAvailableSeat(v)
		return nil
	case flight.FieldBusinessAvailableSeat:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBusinessAvailableSeat(v)
		return nil
	case flight.FieldStatus:
		v, ok := value.(flight.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case flight.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case flight.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Flight field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FlightMutation) AddedFields() []string {
	var fields []string
	if m.addduration != nil {
		fields = append(fields, flight.FieldDuration)
	}
	if m.addcapacity != nil {
		fields = append(fields, flight.FieldCapacity)
	}
	if m.addeconomy_available_seat != nil {
		fields = append(fields, flight.FieldEconomyAvailableSeat)
	}
	if m.addbusiness_available_seat != nil {
		fields = append(fields, flight.FieldBusinessAvailableSeat)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FlightMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case flight.FieldDuration:
		return m.AddedDuration()
	case flight.FieldCapacity:
		return m.AddedCapacity()
	case flight.FieldEconomyAvailableSeat:
		return m.AddedEconomyAvailableSeat()
	case flight.FieldBusinessAvailableSeat:
		return m.AddedBusinessAvailableSeat()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FlightMutation) AddField(name string, value ent.Value) error {
	switch name {
	case flight.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	case flight.FieldCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCapacity(v)
		return nil
	case flight.FieldEconomyAvailableSeat:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEconomyAvailableSeat(v)
		return nil
	case flight.FieldBusinessAvailableSeat:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBusinessAvailableSeat(v)
		return nil
	}
	return fmt.Errorf("unknown Flight numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FlightMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FlightMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FlightMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Flight nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FlightMutation) ResetField(name string) error {
	switch name {
	case flight.FieldFlightCode:
		m.ResetFlightCode()
		return nil
	case flight.FieldFrom:
		m.ResetFrom()
		return nil
	case flight.FieldTo:
		m.ResetTo()
		return nil
	case flight.FieldDepartureDate:
		m.ResetDepartureDate()
		return nil
	case flight.FieldDepartureTime:
		m.ResetDepartureTime()
		return nil
	case flight.FieldDuration:
		m.ResetDuration()
		return nil
	case flight.FieldCapacity:
		m.ResetCapacity()
		return nil
	case flight.FieldEconomyAvailableSeat:
		m.ResetEconomyAvailableSeat()
		return nil
	case flight.FieldBusinessAvailableSeat:
		m.ResetBusinessAvailableSeat()
		return nil
	case flight.FieldStatus:
		m.ResetStatus()
		return nil
	case flight.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case flight.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Flight field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FlightMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.belongs_to != nil {
		edges = append(edges, flight.EdgeBelongsTo)
	}
	if m.flight_tickets != nil {
		edges = append(edges, flight.EdgeFlightTickets)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FlightMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case flight.EdgeBelongsTo:
		ids := make([]ent.Value, 0, len(m.belongs_to))
		for id := range m.belongs_to {
			ids = append(ids, id)
		}
		return ids
	case flight.EdgeFlightTickets:
		ids := make([]ent.Value, 0, len(m.flight_tickets))
		for id := range m.flight_tickets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FlightMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedbelongs_to != nil {
		edges = append(edges, flight.EdgeBelongsTo)
	}
	if m.removedflight_tickets != nil {
		edges = append(edges, flight.EdgeFlightTickets)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FlightMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case flight.EdgeBelongsTo:
		ids := make([]ent.Value, 0, len(m.removedbelongs_to))
		for id := range m.removedbelongs_to {
			ids = append(ids, id)
		}
		return ids
	case flight.EdgeFlightTickets:
		ids := make([]ent.Value, 0, len(m.removedflight_tickets))
		for id := range m.removedflight_tickets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FlightMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedbelongs_to {
		edges = append(edges, flight.EdgeBelongsTo)
	}
	if m.clearedflight_tickets {
		edges = append(edges, flight.EdgeFlightTickets)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FlightMutation) EdgeCleared(name string) bool {
	switch name {
	case flight.EdgeBelongsTo:
		return m.clearedbelongs_to
	case flight.EdgeFlightTickets:
		return m.clearedflight_tickets
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FlightMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Flight unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FlightMutation) ResetEdge(name string) error {
	switch name {
	case flight.EdgeBelongsTo:
		m.ResetBelongsTo()
		return nil
	case flight.EdgeFlightTickets:
		m.ResetFlightTickets()
		return nil
	}
	return fmt.Errorf("unknown Flight edge %s", name)
}

// PassengerMutation represents an operation that mutates the Passenger nodes in the graph.
type PassengerMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	name            *string
	citizen_id      *string
	email           *string
	phone           *string
	address         *string
	gender          *passenger.Gender
	date_of_birth   *time.Time
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	ticket          *uuid.UUID
	clearedticket   bool
	bookings        map[uuid.UUID]struct{}
	removedbookings map[uuid.UUID]struct{}
	clearedbookings bool
	done            bool
	oldValue        func(context.Context) (*Passenger, error)
	predicates      []predicate.Passenger
}

var _ ent.Mutation = (*PassengerMutation)(nil)

// passengerOption allows management of the mutation configuration using functional options.
type passengerOption func(*PassengerMutation)

// newPassengerMutation creates new mutation for the Passenger entity.
func newPassengerMutation(c config, op Op, opts ...passengerOption) *PassengerMutation {
	m := &PassengerMutation{
		config:        c,
		op:            op,
		typ:           TypePassenger,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPassengerID sets the ID field of the mutation.
func withPassengerID(id uuid.UUID) passengerOption {
	return func(m *PassengerMutation) {
		var (
			err   error
			once  sync.Once
			value *Passenger
		)
		m.oldValue = func(ctx context.Context) (*Passenger, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Passenger.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPassenger sets the old Passenger of the mutation.
func withPassenger(node *Passenger) passengerOption {
	return func(m *PassengerMutation) {
		m.oldValue = func(context.Context) (*Passenger, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PassengerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PassengerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Passenger entities.
func (m *PassengerMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PassengerMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PassengerMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Passenger.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PassengerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PassengerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Passenger entity.
// If the Passenger object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PassengerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PassengerMutation) ResetName() {
	m.name = nil
}

// SetCitizenID sets the "citizen_id" field.
func (m *PassengerMutation) SetCitizenID(s string) {
	m.citizen_id = &s
}

// CitizenID returns the value of the "citizen_id" field in the mutation.
func (m *PassengerMutation) CitizenID() (r string, exists bool) {
	v := m.citizen_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCitizenID returns the old "citizen_id" field's value of the Passenger entity.
// If the Passenger object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PassengerMutation) OldCitizenID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCitizenID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCitizenID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCitizenID: %w", err)
	}
	return oldValue.CitizenID, nil
}

// ResetCitizenID resets all changes to the "citizen_id" field.
func (m *PassengerMutation) ResetCitizenID() {
	m.citizen_id = nil
}

// SetEmail sets the "email" field.
func (m *PassengerMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *PassengerMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Passenger entity.
// If the Passenger object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PassengerMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *PassengerMutation) ResetEmail() {
	m.email = nil
}

// SetPhone sets the "phone" field.
func (m *PassengerMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *PassengerMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Passenger entity.
// If the Passenger object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PassengerMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *PassengerMutation) ResetPhone() {
	m.phone = nil
}

// SetAddress sets the "address" field.
func (m *PassengerMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *PassengerMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Passenger entity.
// If the Passenger object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PassengerMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *PassengerMutation) ResetAddress() {
	m.address = nil
}

// SetGender sets the "gender" field.
func (m *PassengerMutation) SetGender(pa passenger.Gender) {
	m.gender = &pa
}

// Gender returns the value of the "gender" field in the mutation.
func (m *PassengerMutation) Gender() (r passenger.Gender, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the Passenger entity.
// If the Passenger object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PassengerMutation) OldGender(ctx context.Context) (v passenger.Gender, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender resets all changes to the "gender" field.
func (m *PassengerMutation) ResetGender() {
	m.gender = nil
}

// SetDateOfBirth sets the "date_of_birth" field.
func (m *PassengerMutation) SetDateOfBirth(t time.Time) {
	m.date_of_birth = &t
}

// DateOfBirth returns the value of the "date_of_birth" field in the mutation.
func (m *PassengerMutation) DateOfBirth() (r time.Time, exists bool) {
	v := m.date_of_birth
	if v == nil {
		return
	}
	return *v, true
}

// OldDateOfBirth returns the old "date_of_birth" field's value of the Passenger entity.
// If the Passenger object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PassengerMutation) OldDateOfBirth(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateOfBirth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateOfBirth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateOfBirth: %w", err)
	}
	return oldValue.DateOfBirth, nil
}

// ResetDateOfBirth resets all changes to the "date_of_birth" field.
func (m *PassengerMutation) ResetDateOfBirth() {
	m.date_of_birth = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PassengerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PassengerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Passenger entity.
// If the Passenger object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PassengerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PassengerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PassengerMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PassengerMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Passenger entity.
// If the Passenger object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PassengerMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PassengerMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTicketID sets the "ticket" edge to the TicketOwner entity by id.
func (m *PassengerMutation) SetTicketID(id uuid.UUID) {
	m.ticket = &id
}

// ClearTicket clears the "ticket" edge to the TicketOwner entity.
func (m *PassengerMutation) ClearTicket() {
	m.clearedticket = true
}

// TicketCleared reports if the "ticket" edge to the TicketOwner entity was cleared.
func (m *PassengerMutation) TicketCleared() bool {
	return m.clearedticket
}

// TicketID returns the "ticket" edge ID in the mutation.
func (m *PassengerMutation) TicketID() (id uuid.UUID, exists bool) {
	if m.ticket != nil {
		return *m.ticket, true
	}
	return
}

// TicketIDs returns the "ticket" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TicketID instead. It exists only for internal usage by the builders.
func (m *PassengerMutation) TicketIDs() (ids []uuid.UUID) {
	if id := m.ticket; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTicket resets all changes to the "ticket" edge.
func (m *PassengerMutation) ResetTicket() {
	m.ticket = nil
	m.clearedticket = false
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by ids.
func (m *PassengerMutation) AddBookingIDs(ids ...uuid.UUID) {
	if m.bookings == nil {
		m.bookings = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.bookings[ids[i]] = struct{}{}
	}
}

// ClearBookings clears the "bookings" edge to the Booking entity.
func (m *PassengerMutation) ClearBookings() {
	m.clearedbookings = true
}

// BookingsCleared reports if the "bookings" edge to the Booking entity was cleared.
func (m *PassengerMutation) BookingsCleared() bool {
	return m.clearedbookings
}

// RemoveBookingIDs removes the "bookings" edge to the Booking entity by IDs.
func (m *PassengerMutation) RemoveBookingIDs(ids ...uuid.UUID) {
	if m.removedbookings == nil {
		m.removedbookings = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.bookings, ids[i])
		m.removedbookings[ids[i]] = struct{}{}
	}
}

// RemovedBookings returns the removed IDs of the "bookings" edge to the Booking entity.
func (m *PassengerMutation) RemovedBookingsIDs() (ids []uuid.UUID) {
	for id := range m.removedbookings {
		ids = append(ids, id)
	}
	return
}

// BookingsIDs returns the "bookings" edge IDs in the mutation.
func (m *PassengerMutation) BookingsIDs() (ids []uuid.UUID) {
	for id := range m.bookings {
		ids = append(ids, id)
	}
	return
}

// ResetBookings resets all changes to the "bookings" edge.
func (m *PassengerMutation) ResetBookings() {
	m.bookings = nil
	m.clearedbookings = false
	m.removedbookings = nil
}

// Where appends a list predicates to the PassengerMutation builder.
func (m *PassengerMutation) Where(ps ...predicate.Passenger) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PassengerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Passenger).
func (m *PassengerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PassengerMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.name != nil {
		fields = append(fields, passenger.FieldName)
	}
	if m.citizen_id != nil {
		fields = append(fields, passenger.FieldCitizenID)
	}
	if m.email != nil {
		fields = append(fields, passenger.FieldEmail)
	}
	if m.phone != nil {
		fields = append(fields, passenger.FieldPhone)
	}
	if m.address != nil {
		fields = append(fields, passenger.FieldAddress)
	}
	if m.gender != nil {
		fields = append(fields, passenger.FieldGender)
	}
	if m.date_of_birth != nil {
		fields = append(fields, passenger.FieldDateOfBirth)
	}
	if m.created_at != nil {
		fields = append(fields, passenger.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, passenger.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PassengerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case passenger.FieldName:
		return m.Name()
	case passenger.FieldCitizenID:
		return m.CitizenID()
	case passenger.FieldEmail:
		return m.Email()
	case passenger.FieldPhone:
		return m.Phone()
	case passenger.FieldAddress:
		return m.Address()
	case passenger.FieldGender:
		return m.Gender()
	case passenger.FieldDateOfBirth:
		return m.DateOfBirth()
	case passenger.FieldCreatedAt:
		return m.CreatedAt()
	case passenger.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PassengerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case passenger.FieldName:
		return m.OldName(ctx)
	case passenger.FieldCitizenID:
		return m.OldCitizenID(ctx)
	case passenger.FieldEmail:
		return m.OldEmail(ctx)
	case passenger.FieldPhone:
		return m.OldPhone(ctx)
	case passenger.FieldAddress:
		return m.OldAddress(ctx)
	case passenger.FieldGender:
		return m.OldGender(ctx)
	case passenger.FieldDateOfBirth:
		return m.OldDateOfBirth(ctx)
	case passenger.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case passenger.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Passenger field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PassengerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case passenger.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case passenger.FieldCitizenID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCitizenID(v)
		return nil
	case passenger.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case passenger.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case passenger.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case passenger.FieldGender:
		v, ok := value.(passenger.Gender)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case passenger.FieldDateOfBirth:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateOfBirth(v)
		return nil
	case passenger.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case passenger.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Passenger field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PassengerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PassengerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PassengerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Passenger numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PassengerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PassengerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PassengerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Passenger nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PassengerMutation) ResetField(name string) error {
	switch name {
	case passenger.FieldName:
		m.ResetName()
		return nil
	case passenger.FieldCitizenID:
		m.ResetCitizenID()
		return nil
	case passenger.FieldEmail:
		m.ResetEmail()
		return nil
	case passenger.FieldPhone:
		m.ResetPhone()
		return nil
	case passenger.FieldAddress:
		m.ResetAddress()
		return nil
	case passenger.FieldGender:
		m.ResetGender()
		return nil
	case passenger.FieldDateOfBirth:
		m.ResetDateOfBirth()
		return nil
	case passenger.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case passenger.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Passenger field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PassengerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.ticket != nil {
		edges = append(edges, passenger.EdgeTicket)
	}
	if m.bookings != nil {
		edges = append(edges, passenger.EdgeBookings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PassengerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case passenger.EdgeTicket:
		if id := m.ticket; id != nil {
			return []ent.Value{*id}
		}
	case passenger.EdgeBookings:
		ids := make([]ent.Value, 0, len(m.bookings))
		for id := range m.bookings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PassengerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedbookings != nil {
		edges = append(edges, passenger.EdgeBookings)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PassengerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case passenger.EdgeBookings:
		ids := make([]ent.Value, 0, len(m.removedbookings))
		for id := range m.removedbookings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PassengerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedticket {
		edges = append(edges, passenger.EdgeTicket)
	}
	if m.clearedbookings {
		edges = append(edges, passenger.EdgeBookings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PassengerMutation) EdgeCleared(name string) bool {
	switch name {
	case passenger.EdgeTicket:
		return m.clearedticket
	case passenger.EdgeBookings:
		return m.clearedbookings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PassengerMutation) ClearEdge(name string) error {
	switch name {
	case passenger.EdgeTicket:
		m.ClearTicket()
		return nil
	}
	return fmt.Errorf("unknown Passenger unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PassengerMutation) ResetEdge(name string) error {
	switch name {
	case passenger.EdgeTicket:
		m.ResetTicket()
		return nil
	case passenger.EdgeBookings:
		m.ResetBookings()
		return nil
	}
	return fmt.Errorf("unknown Passenger edge %s", name)
}

// TicketMutation represents an operation that mutates the Ticket nodes in the graph.
type TicketMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	class                *ticket.Class
	status               *ticket.Status
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	flight_owner         *uuid.UUID
	clearedflight_owner  bool
	booking_owner        *uuid.UUID
	clearedbooking_owner bool
	ticket_owner         *uuid.UUID
	clearedticket_owner  bool
	done                 bool
	oldValue             func(context.Context) (*Ticket, error)
	predicates           []predicate.Ticket
}

var _ ent.Mutation = (*TicketMutation)(nil)

// ticketOption allows management of the mutation configuration using functional options.
type ticketOption func(*TicketMutation)

// newTicketMutation creates new mutation for the Ticket entity.
func newTicketMutation(c config, op Op, opts ...ticketOption) *TicketMutation {
	m := &TicketMutation{
		config:        c,
		op:            op,
		typ:           TypeTicket,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTicketID sets the ID field of the mutation.
func withTicketID(id uuid.UUID) ticketOption {
	return func(m *TicketMutation) {
		var (
			err   error
			once  sync.Once
			value *Ticket
		)
		m.oldValue = func(ctx context.Context) (*Ticket, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Ticket.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTicket sets the old Ticket of the mutation.
func withTicket(node *Ticket) ticketOption {
	return func(m *TicketMutation) {
		m.oldValue = func(context.Context) (*Ticket, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TicketMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TicketMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Ticket entities.
func (m *TicketMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TicketMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TicketMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Ticket.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetClass sets the "class" field.
func (m *TicketMutation) SetClass(t ticket.Class) {
	m.class = &t
}

// Class returns the value of the "class" field in the mutation.
func (m *TicketMutation) Class() (r ticket.Class, exists bool) {
	v := m.class
	if v == nil {
		return
	}
	return *v, true
}

// OldClass returns the old "class" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldClass(ctx context.Context) (v ticket.Class, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClass is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClass requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClass: %w", err)
	}
	return oldValue.Class, nil
}

// ResetClass resets all changes to the "class" field.
func (m *TicketMutation) ResetClass() {
	m.class = nil
}

// SetStatus sets the "status" field.
func (m *TicketMutation) SetStatus(t ticket.Status) {
	m.status = &t
}

// Status returns the value of the "status" field in the mutation.
func (m *TicketMutation) Status() (r ticket.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldStatus(ctx context.Context) (v ticket.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TicketMutation) ResetStatus() {
	m.status = nil
}

// SetFlightID sets the "flight_id" field.
func (m *TicketMutation) SetFlightID(u uuid.UUID) {
	m.flight_owner = &u
}

// FlightID returns the value of the "flight_id" field in the mutation.
func (m *TicketMutation) FlightID() (r uuid.UUID, exists bool) {
	v := m.flight_owner
	if v == nil {
		return
	}
	return *v, true
}

// OldFlightID returns the old "flight_id" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldFlightID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFlightID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFlightID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFlightID: %w", err)
	}
	return oldValue.FlightID, nil
}

// ResetFlightID resets all changes to the "flight_id" field.
func (m *TicketMutation) ResetFlightID() {
	m.flight_owner = nil
}

// SetBookingID sets the "booking_id" field.
func (m *TicketMutation) SetBookingID(u uuid.UUID) {
	m.booking_owner = &u
}

// BookingID returns the value of the "booking_id" field in the mutation.
func (m *TicketMutation) BookingID() (r uuid.UUID, exists bool) {
	v := m.booking_owner
	if v == nil {
		return
	}
	return *v, true
}

// OldBookingID returns the old "booking_id" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldBookingID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBookingID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBookingID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBookingID: %w", err)
	}
	return oldValue.BookingID, nil
}

// ResetBookingID resets all changes to the "booking_id" field.
func (m *TicketMutation) ResetBookingID() {
	m.booking_owner = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TicketMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TicketMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TicketMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TicketMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TicketMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TicketMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetFlightOwnerID sets the "flight_owner" edge to the Flight entity by id.
func (m *TicketMutation) SetFlightOwnerID(id uuid.UUID) {
	m.flight_owner = &id
}

// ClearFlightOwner clears the "flight_owner" edge to the Flight entity.
func (m *TicketMutation) ClearFlightOwner() {
	m.clearedflight_owner = true
}

// FlightOwnerCleared reports if the "flight_owner" edge to the Flight entity was cleared.
func (m *TicketMutation) FlightOwnerCleared() bool {
	return m.clearedflight_owner
}

// FlightOwnerID returns the "flight_owner" edge ID in the mutation.
func (m *TicketMutation) FlightOwnerID() (id uuid.UUID, exists bool) {
	if m.flight_owner != nil {
		return *m.flight_owner, true
	}
	return
}

// FlightOwnerIDs returns the "flight_owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FlightOwnerID instead. It exists only for internal usage by the builders.
func (m *TicketMutation) FlightOwnerIDs() (ids []uuid.UUID) {
	if id := m.flight_owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFlightOwner resets all changes to the "flight_owner" edge.
func (m *TicketMutation) ResetFlightOwner() {
	m.flight_owner = nil
	m.clearedflight_owner = false
}

// SetBookingOwnerID sets the "booking_owner" edge to the Booking entity by id.
func (m *TicketMutation) SetBookingOwnerID(id uuid.UUID) {
	m.booking_owner = &id
}

// ClearBookingOwner clears the "booking_owner" edge to the Booking entity.
func (m *TicketMutation) ClearBookingOwner() {
	m.clearedbooking_owner = true
}

// BookingOwnerCleared reports if the "booking_owner" edge to the Booking entity was cleared.
func (m *TicketMutation) BookingOwnerCleared() bool {
	return m.clearedbooking_owner
}

// BookingOwnerID returns the "booking_owner" edge ID in the mutation.
func (m *TicketMutation) BookingOwnerID() (id uuid.UUID, exists bool) {
	if m.booking_owner != nil {
		return *m.booking_owner, true
	}
	return
}

// BookingOwnerIDs returns the "booking_owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BookingOwnerID instead. It exists only for internal usage by the builders.
func (m *TicketMutation) BookingOwnerIDs() (ids []uuid.UUID) {
	if id := m.booking_owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBookingOwner resets all changes to the "booking_owner" edge.
func (m *TicketMutation) ResetBookingOwner() {
	m.booking_owner = nil
	m.clearedbooking_owner = false
}

// SetTicketOwnerID sets the "ticket_owner" edge to the TicketOwner entity by id.
func (m *TicketMutation) SetTicketOwnerID(id uuid.UUID) {
	m.ticket_owner = &id
}

// ClearTicketOwner clears the "ticket_owner" edge to the TicketOwner entity.
func (m *TicketMutation) ClearTicketOwner() {
	m.clearedticket_owner = true
}

// TicketOwnerCleared reports if the "ticket_owner" edge to the TicketOwner entity was cleared.
func (m *TicketMutation) TicketOwnerCleared() bool {
	return m.clearedticket_owner
}

// TicketOwnerID returns the "ticket_owner" edge ID in the mutation.
func (m *TicketMutation) TicketOwnerID() (id uuid.UUID, exists bool) {
	if m.ticket_owner != nil {
		return *m.ticket_owner, true
	}
	return
}

// TicketOwnerIDs returns the "ticket_owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TicketOwnerID instead. It exists only for internal usage by the builders.
func (m *TicketMutation) TicketOwnerIDs() (ids []uuid.UUID) {
	if id := m.ticket_owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTicketOwner resets all changes to the "ticket_owner" edge.
func (m *TicketMutation) ResetTicketOwner() {
	m.ticket_owner = nil
	m.clearedticket_owner = false
}

// Where appends a list predicates to the TicketMutation builder.
func (m *TicketMutation) Where(ps ...predicate.Ticket) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TicketMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Ticket).
func (m *TicketMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TicketMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.class != nil {
		fields = append(fields, ticket.FieldClass)
	}
	if m.status != nil {
		fields = append(fields, ticket.FieldStatus)
	}
	if m.flight_owner != nil {
		fields = append(fields, ticket.FieldFlightID)
	}
	if m.booking_owner != nil {
		fields = append(fields, ticket.FieldBookingID)
	}
	if m.created_at != nil {
		fields = append(fields, ticket.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, ticket.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TicketMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ticket.FieldClass:
		return m.Class()
	case ticket.FieldStatus:
		return m.Status()
	case ticket.FieldFlightID:
		return m.FlightID()
	case ticket.FieldBookingID:
		return m.BookingID()
	case ticket.FieldCreatedAt:
		return m.CreatedAt()
	case ticket.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TicketMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ticket.FieldClass:
		return m.OldClass(ctx)
	case ticket.FieldStatus:
		return m.OldStatus(ctx)
	case ticket.FieldFlightID:
		return m.OldFlightID(ctx)
	case ticket.FieldBookingID:
		return m.OldBookingID(ctx)
	case ticket.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case ticket.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Ticket field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TicketMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ticket.FieldClass:
		v, ok := value.(ticket.Class)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClass(v)
		return nil
	case ticket.FieldStatus:
		v, ok := value.(ticket.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case ticket.FieldFlightID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFlightID(v)
		return nil
	case ticket.FieldBookingID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBookingID(v)
		return nil
	case ticket.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case ticket.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Ticket field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TicketMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TicketMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TicketMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Ticket numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TicketMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TicketMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TicketMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Ticket nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TicketMutation) ResetField(name string) error {
	switch name {
	case ticket.FieldClass:
		m.ResetClass()
		return nil
	case ticket.FieldStatus:
		m.ResetStatus()
		return nil
	case ticket.FieldFlightID:
		m.ResetFlightID()
		return nil
	case ticket.FieldBookingID:
		m.ResetBookingID()
		return nil
	case ticket.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case ticket.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Ticket field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TicketMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.flight_owner != nil {
		edges = append(edges, ticket.EdgeFlightOwner)
	}
	if m.booking_owner != nil {
		edges = append(edges, ticket.EdgeBookingOwner)
	}
	if m.ticket_owner != nil {
		edges = append(edges, ticket.EdgeTicketOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TicketMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ticket.EdgeFlightOwner:
		if id := m.flight_owner; id != nil {
			return []ent.Value{*id}
		}
	case ticket.EdgeBookingOwner:
		if id := m.booking_owner; id != nil {
			return []ent.Value{*id}
		}
	case ticket.EdgeTicketOwner:
		if id := m.ticket_owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TicketMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TicketMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TicketMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedflight_owner {
		edges = append(edges, ticket.EdgeFlightOwner)
	}
	if m.clearedbooking_owner {
		edges = append(edges, ticket.EdgeBookingOwner)
	}
	if m.clearedticket_owner {
		edges = append(edges, ticket.EdgeTicketOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TicketMutation) EdgeCleared(name string) bool {
	switch name {
	case ticket.EdgeFlightOwner:
		return m.clearedflight_owner
	case ticket.EdgeBookingOwner:
		return m.clearedbooking_owner
	case ticket.EdgeTicketOwner:
		return m.clearedticket_owner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TicketMutation) ClearEdge(name string) error {
	switch name {
	case ticket.EdgeFlightOwner:
		m.ClearFlightOwner()
		return nil
	case ticket.EdgeBookingOwner:
		m.ClearBookingOwner()
		return nil
	case ticket.EdgeTicketOwner:
		m.ClearTicketOwner()
		return nil
	}
	return fmt.Errorf("unknown Ticket unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TicketMutation) ResetEdge(name string) error {
	switch name {
	case ticket.EdgeFlightOwner:
		m.ResetFlightOwner()
		return nil
	case ticket.EdgeBookingOwner:
		m.ResetBookingOwner()
		return nil
	case ticket.EdgeTicketOwner:
		m.ResetTicketOwner()
		return nil
	}
	return fmt.Errorf("unknown Ticket edge %s", name)
}

// TicketOwnerMutation represents an operation that mutates the TicketOwner nodes in the graph.
type TicketOwnerMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	created_at             *time.Time
	updated_at             *time.Time
	clearedFields          map[string]struct{}
	ticket                 *uuid.UUID
	clearedticket          bool
	customer_owner         *uuid.UUID
	clearedcustomer_owner  bool
	passenger_owner        *uuid.UUID
	clearedpassenger_owner bool
	done                   bool
	oldValue               func(context.Context) (*TicketOwner, error)
	predicates             []predicate.TicketOwner
}

var _ ent.Mutation = (*TicketOwnerMutation)(nil)

// ticketownerOption allows management of the mutation configuration using functional options.
type ticketownerOption func(*TicketOwnerMutation)

// newTicketOwnerMutation creates new mutation for the TicketOwner entity.
func newTicketOwnerMutation(c config, op Op, opts ...ticketownerOption) *TicketOwnerMutation {
	m := &TicketOwnerMutation{
		config:        c,
		op:            op,
		typ:           TypeTicketOwner,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTicketOwnerID sets the ID field of the mutation.
func withTicketOwnerID(id uuid.UUID) ticketownerOption {
	return func(m *TicketOwnerMutation) {
		var (
			err   error
			once  sync.Once
			value *TicketOwner
		)
		m.oldValue = func(ctx context.Context) (*TicketOwner, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TicketOwner.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTicketOwner sets the old TicketOwner of the mutation.
func withTicketOwner(node *TicketOwner) ticketownerOption {
	return func(m *TicketOwnerMutation) {
		m.oldValue = func(context.Context) (*TicketOwner, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TicketOwnerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TicketOwnerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TicketOwner entities.
func (m *TicketOwnerMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TicketOwnerMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TicketOwnerMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TicketOwner.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TicketOwnerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TicketOwnerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TicketOwner entity.
// If the TicketOwner object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketOwnerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TicketOwnerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TicketOwnerMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TicketOwnerMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TicketOwner entity.
// If the TicketOwner object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketOwnerMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TicketOwnerMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTicketID sets the "ticket" edge to the Ticket entity by id.
func (m *TicketOwnerMutation) SetTicketID(id uuid.UUID) {
	m.ticket = &id
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (m *TicketOwnerMutation) ClearTicket() {
	m.clearedticket = true
}

// TicketCleared reports if the "ticket" edge to the Ticket entity was cleared.
func (m *TicketOwnerMutation) TicketCleared() bool {
	return m.clearedticket
}

// TicketID returns the "ticket" edge ID in the mutation.
func (m *TicketOwnerMutation) TicketID() (id uuid.UUID, exists bool) {
	if m.ticket != nil {
		return *m.ticket, true
	}
	return
}

// TicketIDs returns the "ticket" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TicketID instead. It exists only for internal usage by the builders.
func (m *TicketOwnerMutation) TicketIDs() (ids []uuid.UUID) {
	if id := m.ticket; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTicket resets all changes to the "ticket" edge.
func (m *TicketOwnerMutation) ResetTicket() {
	m.ticket = nil
	m.clearedticket = false
}

// SetCustomerOwnerID sets the "customer_owner" edge to the Customer entity by id.
func (m *TicketOwnerMutation) SetCustomerOwnerID(id uuid.UUID) {
	m.customer_owner = &id
}

// ClearCustomerOwner clears the "customer_owner" edge to the Customer entity.
func (m *TicketOwnerMutation) ClearCustomerOwner() {
	m.clearedcustomer_owner = true
}

// CustomerOwnerCleared reports if the "customer_owner" edge to the Customer entity was cleared.
func (m *TicketOwnerMutation) CustomerOwnerCleared() bool {
	return m.clearedcustomer_owner
}

// CustomerOwnerID returns the "customer_owner" edge ID in the mutation.
func (m *TicketOwnerMutation) CustomerOwnerID() (id uuid.UUID, exists bool) {
	if m.customer_owner != nil {
		return *m.customer_owner, true
	}
	return
}

// CustomerOwnerIDs returns the "customer_owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CustomerOwnerID instead. It exists only for internal usage by the builders.
func (m *TicketOwnerMutation) CustomerOwnerIDs() (ids []uuid.UUID) {
	if id := m.customer_owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCustomerOwner resets all changes to the "customer_owner" edge.
func (m *TicketOwnerMutation) ResetCustomerOwner() {
	m.customer_owner = nil
	m.clearedcustomer_owner = false
}

// SetPassengerOwnerID sets the "passenger_owner" edge to the Passenger entity by id.
func (m *TicketOwnerMutation) SetPassengerOwnerID(id uuid.UUID) {
	m.passenger_owner = &id
}

// ClearPassengerOwner clears the "passenger_owner" edge to the Passenger entity.
func (m *TicketOwnerMutation) ClearPassengerOwner() {
	m.clearedpassenger_owner = true
}

// PassengerOwnerCleared reports if the "passenger_owner" edge to the Passenger entity was cleared.
func (m *TicketOwnerMutation) PassengerOwnerCleared() bool {
	return m.clearedpassenger_owner
}

// PassengerOwnerID returns the "passenger_owner" edge ID in the mutation.
func (m *TicketOwnerMutation) PassengerOwnerID() (id uuid.UUID, exists bool) {
	if m.passenger_owner != nil {
		return *m.passenger_owner, true
	}
	return
}

// PassengerOwnerIDs returns the "passenger_owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PassengerOwnerID instead. It exists only for internal usage by the builders.
func (m *TicketOwnerMutation) PassengerOwnerIDs() (ids []uuid.UUID) {
	if id := m.passenger_owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPassengerOwner resets all changes to the "passenger_owner" edge.
func (m *TicketOwnerMutation) ResetPassengerOwner() {
	m.passenger_owner = nil
	m.clearedpassenger_owner = false
}

// Where appends a list predicates to the TicketOwnerMutation builder.
func (m *TicketOwnerMutation) Where(ps ...predicate.TicketOwner) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TicketOwnerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TicketOwner).
func (m *TicketOwnerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TicketOwnerMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.created_at != nil {
		fields = append(fields, ticketowner.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, ticketowner.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TicketOwnerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ticketowner.FieldCreatedAt:
		return m.CreatedAt()
	case ticketowner.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TicketOwnerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ticketowner.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case ticketowner.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TicketOwner field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TicketOwnerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ticketowner.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case ticketowner.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TicketOwner field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TicketOwnerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TicketOwnerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TicketOwnerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TicketOwner numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TicketOwnerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TicketOwnerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TicketOwnerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TicketOwner nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TicketOwnerMutation) ResetField(name string) error {
	switch name {
	case ticketowner.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case ticketowner.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TicketOwner field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TicketOwnerMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.ticket != nil {
		edges = append(edges, ticketowner.EdgeTicket)
	}
	if m.customer_owner != nil {
		edges = append(edges, ticketowner.EdgeCustomerOwner)
	}
	if m.passenger_owner != nil {
		edges = append(edges, ticketowner.EdgePassengerOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TicketOwnerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ticketowner.EdgeTicket:
		if id := m.ticket; id != nil {
			return []ent.Value{*id}
		}
	case ticketowner.EdgeCustomerOwner:
		if id := m.customer_owner; id != nil {
			return []ent.Value{*id}
		}
	case ticketowner.EdgePassengerOwner:
		if id := m.passenger_owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TicketOwnerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TicketOwnerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TicketOwnerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedticket {
		edges = append(edges, ticketowner.EdgeTicket)
	}
	if m.clearedcustomer_owner {
		edges = append(edges, ticketowner.EdgeCustomerOwner)
	}
	if m.clearedpassenger_owner {
		edges = append(edges, ticketowner.EdgePassengerOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TicketOwnerMutation) EdgeCleared(name string) bool {
	switch name {
	case ticketowner.EdgeTicket:
		return m.clearedticket
	case ticketowner.EdgeCustomerOwner:
		return m.clearedcustomer_owner
	case ticketowner.EdgePassengerOwner:
		return m.clearedpassenger_owner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TicketOwnerMutation) ClearEdge(name string) error {
	switch name {
	case ticketowner.EdgeTicket:
		m.ClearTicket()
		return nil
	case ticketowner.EdgeCustomerOwner:
		m.ClearCustomerOwner()
		return nil
	case ticketowner.EdgePassengerOwner:
		m.ClearPassengerOwner()
		return nil
	}
	return fmt.Errorf("unknown TicketOwner unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TicketOwnerMutation) ResetEdge(name string) error {
	switch name {
	case ticketowner.EdgeTicket:
		m.ResetTicket()
		return nil
	case ticketowner.EdgeCustomerOwner:
		m.ResetCustomerOwner()
		return nil
	case ticketowner.EdgePassengerOwner:
		m.ResetPassengerOwner()
		return nil
	}
	return fmt.Errorf("unknown TicketOwner edge %s", name)
}
