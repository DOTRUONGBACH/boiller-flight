// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Account) AccOwner(ctx context.Context) (*Customer, error) {
	result, err := a.Edges.AccOwnerOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryAccOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (b *Booking) BookingFlight(ctx context.Context) (*Flight, error) {
	result, err := b.Edges.BookingFlightOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryBookingFlight().Only(ctx)
	}
	return result, err
}

func (b *Booking) CustomerBookingTickets(ctx context.Context) (*Customer, error) {
	result, err := b.Edges.CustomerBookingTicketsOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryCustomerBookingTickets().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (b *Booking) PassengerBookingTickets(ctx context.Context) (*Passenger, error) {
	result, err := b.Edges.PassengerBookingTicketsOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryPassengerBookingTickets().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (b *Booking) BookingTickets(ctx context.Context) (result []*Ticket, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedBookingTickets(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.BookingTicketsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryBookingTickets().All(ctx)
	}
	return result, err
}

func (c *Customer) Accounts(ctx context.Context) (result []*Account, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedAccounts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.AccountsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryAccounts().All(ctx)
	}
	return result, err
}

func (c *Customer) Bookings(ctx context.Context) (result []*Booking, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedBookings(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.BookingsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryBookings().All(ctx)
	}
	return result, err
}

func (c *Customer) Ticket(ctx context.Context) (*TicketOwner, error) {
	result, err := c.Edges.TicketOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryTicket().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (f *Flight) BelongsTo(ctx context.Context) (result []*Booking, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedBelongsTo(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.BelongsToOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryBelongsTo().All(ctx)
	}
	return result, err
}

func (f *Flight) FlightTickets(ctx context.Context) (result []*Ticket, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedFlightTickets(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.FlightTicketsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryFlightTickets().All(ctx)
	}
	return result, err
}

func (pa *Passenger) Ticket(ctx context.Context) (*TicketOwner, error) {
	result, err := pa.Edges.TicketOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryTicket().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pa *Passenger) Bookings(ctx context.Context) (result []*Booking, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedBookings(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.BookingsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryBookings().All(ctx)
	}
	return result, err
}

func (t *Ticket) FlightOwner(ctx context.Context) (*Flight, error) {
	result, err := t.Edges.FlightOwnerOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryFlightOwner().Only(ctx)
	}
	return result, err
}

func (t *Ticket) BookingOwner(ctx context.Context) (*Booking, error) {
	result, err := t.Edges.BookingOwnerOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryBookingOwner().Only(ctx)
	}
	return result, err
}

func (t *Ticket) TicketOwner(ctx context.Context) (*TicketOwner, error) {
	result, err := t.Edges.TicketOwnerOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryTicketOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (to *TicketOwner) Ticket(ctx context.Context) (*Ticket, error) {
	result, err := to.Edges.TicketOrErr()
	if IsNotLoaded(err) {
		result, err = to.QueryTicket().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (to *TicketOwner) CustomerOwner(ctx context.Context) (*Customer, error) {
	result, err := to.Edges.CustomerOwnerOrErr()
	if IsNotLoaded(err) {
		result, err = to.QueryCustomerOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (to *TicketOwner) PassengerOwner(ctx context.Context) (*Passenger, error) {
	result, err := to.Edges.PassengerOwnerOrErr()
	if IsNotLoaded(err) {
		result, err = to.QueryPassengerOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}
