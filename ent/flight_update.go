// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mock_project/ent/booking"
	"mock_project/ent/flight"
	"mock_project/ent/predicate"
	"mock_project/ent/ticket"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FlightUpdate is the builder for updating Flight entities.
type FlightUpdate struct {
	config
	hooks    []Hook
	mutation *FlightMutation
}

// Where appends a list predicates to the FlightUpdate builder.
func (fu *FlightUpdate) Where(ps ...predicate.Flight) *FlightUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetFlightCode sets the "flight_code" field.
func (fu *FlightUpdate) SetFlightCode(s string) *FlightUpdate {
	fu.mutation.SetFlightCode(s)
	return fu
}

// SetFrom sets the "from" field.
func (fu *FlightUpdate) SetFrom(s string) *FlightUpdate {
	fu.mutation.SetFrom(s)
	return fu
}

// SetTo sets the "to" field.
func (fu *FlightUpdate) SetTo(s string) *FlightUpdate {
	fu.mutation.SetTo(s)
	return fu
}

// SetDepartureDate sets the "departure_date" field.
func (fu *FlightUpdate) SetDepartureDate(t time.Time) *FlightUpdate {
	fu.mutation.SetDepartureDate(t)
	return fu
}

// SetDepartureTime sets the "departure_time" field.
func (fu *FlightUpdate) SetDepartureTime(t time.Time) *FlightUpdate {
	fu.mutation.SetDepartureTime(t)
	return fu
}

// SetDuration sets the "duration" field.
func (fu *FlightUpdate) SetDuration(i int) *FlightUpdate {
	fu.mutation.ResetDuration()
	fu.mutation.SetDuration(i)
	return fu
}

// AddDuration adds i to the "duration" field.
func (fu *FlightUpdate) AddDuration(i int) *FlightUpdate {
	fu.mutation.AddDuration(i)
	return fu
}

// SetCapacity sets the "capacity" field.
func (fu *FlightUpdate) SetCapacity(i int) *FlightUpdate {
	fu.mutation.ResetCapacity()
	fu.mutation.SetCapacity(i)
	return fu
}

// AddCapacity adds i to the "capacity" field.
func (fu *FlightUpdate) AddCapacity(i int) *FlightUpdate {
	fu.mutation.AddCapacity(i)
	return fu
}

// SetEconomyAvailableSeat sets the "economy_available_seat" field.
func (fu *FlightUpdate) SetEconomyAvailableSeat(i int) *FlightUpdate {
	fu.mutation.ResetEconomyAvailableSeat()
	fu.mutation.SetEconomyAvailableSeat(i)
	return fu
}

// AddEconomyAvailableSeat adds i to the "economy_available_seat" field.
func (fu *FlightUpdate) AddEconomyAvailableSeat(i int) *FlightUpdate {
	fu.mutation.AddEconomyAvailableSeat(i)
	return fu
}

// SetBusinessAvailableSeat sets the "business_available_seat" field.
func (fu *FlightUpdate) SetBusinessAvailableSeat(i int) *FlightUpdate {
	fu.mutation.ResetBusinessAvailableSeat()
	fu.mutation.SetBusinessAvailableSeat(i)
	return fu
}

// AddBusinessAvailableSeat adds i to the "business_available_seat" field.
func (fu *FlightUpdate) AddBusinessAvailableSeat(i int) *FlightUpdate {
	fu.mutation.AddBusinessAvailableSeat(i)
	return fu
}

// SetStatus sets the "status" field.
func (fu *FlightUpdate) SetStatus(f flight.Status) *FlightUpdate {
	fu.mutation.SetStatus(f)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FlightUpdate) SetUpdatedAt(t time.Time) *FlightUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// AddBelongsToIDs adds the "belongs_to" edge to the Booking entity by IDs.
func (fu *FlightUpdate) AddBelongsToIDs(ids ...uuid.UUID) *FlightUpdate {
	fu.mutation.AddBelongsToIDs(ids...)
	return fu
}

// AddBelongsTo adds the "belongs_to" edges to the Booking entity.
func (fu *FlightUpdate) AddBelongsTo(b ...*Booking) *FlightUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return fu.AddBelongsToIDs(ids...)
}

// AddFlightTicketIDs adds the "flight_tickets" edge to the Ticket entity by IDs.
func (fu *FlightUpdate) AddFlightTicketIDs(ids ...uuid.UUID) *FlightUpdate {
	fu.mutation.AddFlightTicketIDs(ids...)
	return fu
}

// AddFlightTickets adds the "flight_tickets" edges to the Ticket entity.
func (fu *FlightUpdate) AddFlightTickets(t ...*Ticket) *FlightUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fu.AddFlightTicketIDs(ids...)
}

// Mutation returns the FlightMutation object of the builder.
func (fu *FlightUpdate) Mutation() *FlightMutation {
	return fu.mutation
}

// ClearBelongsTo clears all "belongs_to" edges to the Booking entity.
func (fu *FlightUpdate) ClearBelongsTo() *FlightUpdate {
	fu.mutation.ClearBelongsTo()
	return fu
}

// RemoveBelongsToIDs removes the "belongs_to" edge to Booking entities by IDs.
func (fu *FlightUpdate) RemoveBelongsToIDs(ids ...uuid.UUID) *FlightUpdate {
	fu.mutation.RemoveBelongsToIDs(ids...)
	return fu
}

// RemoveBelongsTo removes "belongs_to" edges to Booking entities.
func (fu *FlightUpdate) RemoveBelongsTo(b ...*Booking) *FlightUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return fu.RemoveBelongsToIDs(ids...)
}

// ClearFlightTickets clears all "flight_tickets" edges to the Ticket entity.
func (fu *FlightUpdate) ClearFlightTickets() *FlightUpdate {
	fu.mutation.ClearFlightTickets()
	return fu
}

// RemoveFlightTicketIDs removes the "flight_tickets" edge to Ticket entities by IDs.
func (fu *FlightUpdate) RemoveFlightTicketIDs(ids ...uuid.UUID) *FlightUpdate {
	fu.mutation.RemoveFlightTicketIDs(ids...)
	return fu
}

// RemoveFlightTickets removes "flight_tickets" edges to Ticket entities.
func (fu *FlightUpdate) RemoveFlightTickets(t ...*Ticket) *FlightUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fu.RemoveFlightTicketIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FlightUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fu.defaults()
	if len(fu.hooks) == 0 {
		if err = fu.check(); err != nil {
			return 0, err
		}
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlightMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fu.check(); err != nil {
				return 0, err
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FlightUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FlightUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FlightUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FlightUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := flight.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FlightUpdate) check() error {
	if v, ok := fu.mutation.FlightCode(); ok {
		if err := flight.FlightCodeValidator(v); err != nil {
			return &ValidationError{Name: "flight_code", err: fmt.Errorf(`ent: validator failed for field "Flight.flight_code": %w`, err)}
		}
	}
	if v, ok := fu.mutation.From(); ok {
		if err := flight.FromValidator(v); err != nil {
			return &ValidationError{Name: "from", err: fmt.Errorf(`ent: validator failed for field "Flight.from": %w`, err)}
		}
	}
	if v, ok := fu.mutation.To(); ok {
		if err := flight.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`ent: validator failed for field "Flight.to": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Duration(); ok {
		if err := flight.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`ent: validator failed for field "Flight.duration": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Capacity(); ok {
		if err := flight.CapacityValidator(v); err != nil {
			return &ValidationError{Name: "capacity", err: fmt.Errorf(`ent: validator failed for field "Flight.capacity": %w`, err)}
		}
	}
	if v, ok := fu.mutation.EconomyAvailableSeat(); ok {
		if err := flight.EconomyAvailableSeatValidator(v); err != nil {
			return &ValidationError{Name: "economy_available_seat", err: fmt.Errorf(`ent: validator failed for field "Flight.economy_available_seat": %w`, err)}
		}
	}
	if v, ok := fu.mutation.BusinessAvailableSeat(); ok {
		if err := flight.BusinessAvailableSeatValidator(v); err != nil {
			return &ValidationError{Name: "business_available_seat", err: fmt.Errorf(`ent: validator failed for field "Flight.business_available_seat": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Status(); ok {
		if err := flight.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Flight.status": %w`, err)}
		}
	}
	return nil
}

func (fu *FlightUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flight.Table,
			Columns: flight.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flight.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.FlightCode(); ok {
		_spec.SetField(flight.FieldFlightCode, field.TypeString, value)
	}
	if value, ok := fu.mutation.From(); ok {
		_spec.SetField(flight.FieldFrom, field.TypeString, value)
	}
	if value, ok := fu.mutation.To(); ok {
		_spec.SetField(flight.FieldTo, field.TypeString, value)
	}
	if value, ok := fu.mutation.DepartureDate(); ok {
		_spec.SetField(flight.FieldDepartureDate, field.TypeTime, value)
	}
	if value, ok := fu.mutation.DepartureTime(); ok {
		_spec.SetField(flight.FieldDepartureTime, field.TypeTime, value)
	}
	if value, ok := fu.mutation.Duration(); ok {
		_spec.SetField(flight.FieldDuration, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedDuration(); ok {
		_spec.AddField(flight.FieldDuration, field.TypeInt, value)
	}
	if value, ok := fu.mutation.Capacity(); ok {
		_spec.SetField(flight.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedCapacity(); ok {
		_spec.AddField(flight.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := fu.mutation.EconomyAvailableSeat(); ok {
		_spec.SetField(flight.FieldEconomyAvailableSeat, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedEconomyAvailableSeat(); ok {
		_spec.AddField(flight.FieldEconomyAvailableSeat, field.TypeInt, value)
	}
	if value, ok := fu.mutation.BusinessAvailableSeat(); ok {
		_spec.SetField(flight.FieldBusinessAvailableSeat, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedBusinessAvailableSeat(); ok {
		_spec.AddField(flight.FieldBusinessAvailableSeat, field.TypeInt, value)
	}
	if value, ok := fu.mutation.Status(); ok {
		_spec.SetField(flight.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(flight.FieldUpdatedAt, field.TypeTime, value)
	}
	if fu.mutation.BelongsToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.BelongsToTable,
			Columns: []string{flight.BelongsToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: booking.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedBelongsToIDs(); len(nodes) > 0 && !fu.mutation.BelongsToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.BelongsToTable,
			Columns: []string{flight.BelongsToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.BelongsToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.BelongsToTable,
			Columns: []string{flight.BelongsToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FlightTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.FlightTicketsTable,
			Columns: []string{flight.FlightTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedFlightTicketsIDs(); len(nodes) > 0 && !fu.mutation.FlightTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.FlightTicketsTable,
			Columns: []string{flight.FlightTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FlightTicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.FlightTicketsTable,
			Columns: []string{flight.FlightTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FlightUpdateOne is the builder for updating a single Flight entity.
type FlightUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FlightMutation
}

// SetFlightCode sets the "flight_code" field.
func (fuo *FlightUpdateOne) SetFlightCode(s string) *FlightUpdateOne {
	fuo.mutation.SetFlightCode(s)
	return fuo
}

// SetFrom sets the "from" field.
func (fuo *FlightUpdateOne) SetFrom(s string) *FlightUpdateOne {
	fuo.mutation.SetFrom(s)
	return fuo
}

// SetTo sets the "to" field.
func (fuo *FlightUpdateOne) SetTo(s string) *FlightUpdateOne {
	fuo.mutation.SetTo(s)
	return fuo
}

// SetDepartureDate sets the "departure_date" field.
func (fuo *FlightUpdateOne) SetDepartureDate(t time.Time) *FlightUpdateOne {
	fuo.mutation.SetDepartureDate(t)
	return fuo
}

// SetDepartureTime sets the "departure_time" field.
func (fuo *FlightUpdateOne) SetDepartureTime(t time.Time) *FlightUpdateOne {
	fuo.mutation.SetDepartureTime(t)
	return fuo
}

// SetDuration sets the "duration" field.
func (fuo *FlightUpdateOne) SetDuration(i int) *FlightUpdateOne {
	fuo.mutation.ResetDuration()
	fuo.mutation.SetDuration(i)
	return fuo
}

// AddDuration adds i to the "duration" field.
func (fuo *FlightUpdateOne) AddDuration(i int) *FlightUpdateOne {
	fuo.mutation.AddDuration(i)
	return fuo
}

// SetCapacity sets the "capacity" field.
func (fuo *FlightUpdateOne) SetCapacity(i int) *FlightUpdateOne {
	fuo.mutation.ResetCapacity()
	fuo.mutation.SetCapacity(i)
	return fuo
}

// AddCapacity adds i to the "capacity" field.
func (fuo *FlightUpdateOne) AddCapacity(i int) *FlightUpdateOne {
	fuo.mutation.AddCapacity(i)
	return fuo
}

// SetEconomyAvailableSeat sets the "economy_available_seat" field.
func (fuo *FlightUpdateOne) SetEconomyAvailableSeat(i int) *FlightUpdateOne {
	fuo.mutation.ResetEconomyAvailableSeat()
	fuo.mutation.SetEconomyAvailableSeat(i)
	return fuo
}

// AddEconomyAvailableSeat adds i to the "economy_available_seat" field.
func (fuo *FlightUpdateOne) AddEconomyAvailableSeat(i int) *FlightUpdateOne {
	fuo.mutation.AddEconomyAvailableSeat(i)
	return fuo
}

// SetBusinessAvailableSeat sets the "business_available_seat" field.
func (fuo *FlightUpdateOne) SetBusinessAvailableSeat(i int) *FlightUpdateOne {
	fuo.mutation.ResetBusinessAvailableSeat()
	fuo.mutation.SetBusinessAvailableSeat(i)
	return fuo
}

// AddBusinessAvailableSeat adds i to the "business_available_seat" field.
func (fuo *FlightUpdateOne) AddBusinessAvailableSeat(i int) *FlightUpdateOne {
	fuo.mutation.AddBusinessAvailableSeat(i)
	return fuo
}

// SetStatus sets the "status" field.
func (fuo *FlightUpdateOne) SetStatus(f flight.Status) *FlightUpdateOne {
	fuo.mutation.SetStatus(f)
	return fuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FlightUpdateOne) SetUpdatedAt(t time.Time) *FlightUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// AddBelongsToIDs adds the "belongs_to" edge to the Booking entity by IDs.
func (fuo *FlightUpdateOne) AddBelongsToIDs(ids ...uuid.UUID) *FlightUpdateOne {
	fuo.mutation.AddBelongsToIDs(ids...)
	return fuo
}

// AddBelongsTo adds the "belongs_to" edges to the Booking entity.
func (fuo *FlightUpdateOne) AddBelongsTo(b ...*Booking) *FlightUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return fuo.AddBelongsToIDs(ids...)
}

// AddFlightTicketIDs adds the "flight_tickets" edge to the Ticket entity by IDs.
func (fuo *FlightUpdateOne) AddFlightTicketIDs(ids ...uuid.UUID) *FlightUpdateOne {
	fuo.mutation.AddFlightTicketIDs(ids...)
	return fuo
}

// AddFlightTickets adds the "flight_tickets" edges to the Ticket entity.
func (fuo *FlightUpdateOne) AddFlightTickets(t ...*Ticket) *FlightUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fuo.AddFlightTicketIDs(ids...)
}

// Mutation returns the FlightMutation object of the builder.
func (fuo *FlightUpdateOne) Mutation() *FlightMutation {
	return fuo.mutation
}

// ClearBelongsTo clears all "belongs_to" edges to the Booking entity.
func (fuo *FlightUpdateOne) ClearBelongsTo() *FlightUpdateOne {
	fuo.mutation.ClearBelongsTo()
	return fuo
}

// RemoveBelongsToIDs removes the "belongs_to" edge to Booking entities by IDs.
func (fuo *FlightUpdateOne) RemoveBelongsToIDs(ids ...uuid.UUID) *FlightUpdateOne {
	fuo.mutation.RemoveBelongsToIDs(ids...)
	return fuo
}

// RemoveBelongsTo removes "belongs_to" edges to Booking entities.
func (fuo *FlightUpdateOne) RemoveBelongsTo(b ...*Booking) *FlightUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return fuo.RemoveBelongsToIDs(ids...)
}

// ClearFlightTickets clears all "flight_tickets" edges to the Ticket entity.
func (fuo *FlightUpdateOne) ClearFlightTickets() *FlightUpdateOne {
	fuo.mutation.ClearFlightTickets()
	return fuo
}

// RemoveFlightTicketIDs removes the "flight_tickets" edge to Ticket entities by IDs.
func (fuo *FlightUpdateOne) RemoveFlightTicketIDs(ids ...uuid.UUID) *FlightUpdateOne {
	fuo.mutation.RemoveFlightTicketIDs(ids...)
	return fuo
}

// RemoveFlightTickets removes "flight_tickets" edges to Ticket entities.
func (fuo *FlightUpdateOne) RemoveFlightTickets(t ...*Ticket) *FlightUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fuo.RemoveFlightTicketIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FlightUpdateOne) Select(field string, fields ...string) *FlightUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Flight entity.
func (fuo *FlightUpdateOne) Save(ctx context.Context) (*Flight, error) {
	var (
		err  error
		node *Flight
	)
	fuo.defaults()
	if len(fuo.hooks) == 0 {
		if err = fuo.check(); err != nil {
			return nil, err
		}
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlightMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fuo.check(); err != nil {
				return nil, err
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Flight)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FlightMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FlightUpdateOne) SaveX(ctx context.Context) *Flight {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FlightUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FlightUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FlightUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := flight.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FlightUpdateOne) check() error {
	if v, ok := fuo.mutation.FlightCode(); ok {
		if err := flight.FlightCodeValidator(v); err != nil {
			return &ValidationError{Name: "flight_code", err: fmt.Errorf(`ent: validator failed for field "Flight.flight_code": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.From(); ok {
		if err := flight.FromValidator(v); err != nil {
			return &ValidationError{Name: "from", err: fmt.Errorf(`ent: validator failed for field "Flight.from": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.To(); ok {
		if err := flight.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`ent: validator failed for field "Flight.to": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Duration(); ok {
		if err := flight.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`ent: validator failed for field "Flight.duration": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Capacity(); ok {
		if err := flight.CapacityValidator(v); err != nil {
			return &ValidationError{Name: "capacity", err: fmt.Errorf(`ent: validator failed for field "Flight.capacity": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.EconomyAvailableSeat(); ok {
		if err := flight.EconomyAvailableSeatValidator(v); err != nil {
			return &ValidationError{Name: "economy_available_seat", err: fmt.Errorf(`ent: validator failed for field "Flight.economy_available_seat": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.BusinessAvailableSeat(); ok {
		if err := flight.BusinessAvailableSeatValidator(v); err != nil {
			return &ValidationError{Name: "business_available_seat", err: fmt.Errorf(`ent: validator failed for field "Flight.business_available_seat": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Status(); ok {
		if err := flight.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Flight.status": %w`, err)}
		}
	}
	return nil
}

func (fuo *FlightUpdateOne) sqlSave(ctx context.Context) (_node *Flight, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flight.Table,
			Columns: flight.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flight.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Flight.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, flight.FieldID)
		for _, f := range fields {
			if !flight.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != flight.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.FlightCode(); ok {
		_spec.SetField(flight.FieldFlightCode, field.TypeString, value)
	}
	if value, ok := fuo.mutation.From(); ok {
		_spec.SetField(flight.FieldFrom, field.TypeString, value)
	}
	if value, ok := fuo.mutation.To(); ok {
		_spec.SetField(flight.FieldTo, field.TypeString, value)
	}
	if value, ok := fuo.mutation.DepartureDate(); ok {
		_spec.SetField(flight.FieldDepartureDate, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.DepartureTime(); ok {
		_spec.SetField(flight.FieldDepartureTime, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.Duration(); ok {
		_spec.SetField(flight.FieldDuration, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedDuration(); ok {
		_spec.AddField(flight.FieldDuration, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.Capacity(); ok {
		_spec.SetField(flight.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedCapacity(); ok {
		_spec.AddField(flight.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.EconomyAvailableSeat(); ok {
		_spec.SetField(flight.FieldEconomyAvailableSeat, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedEconomyAvailableSeat(); ok {
		_spec.AddField(flight.FieldEconomyAvailableSeat, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.BusinessAvailableSeat(); ok {
		_spec.SetField(flight.FieldBusinessAvailableSeat, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedBusinessAvailableSeat(); ok {
		_spec.AddField(flight.FieldBusinessAvailableSeat, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.Status(); ok {
		_spec.SetField(flight.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(flight.FieldUpdatedAt, field.TypeTime, value)
	}
	if fuo.mutation.BelongsToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.BelongsToTable,
			Columns: []string{flight.BelongsToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: booking.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedBelongsToIDs(); len(nodes) > 0 && !fuo.mutation.BelongsToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.BelongsToTable,
			Columns: []string{flight.BelongsToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.BelongsToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.BelongsToTable,
			Columns: []string{flight.BelongsToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FlightTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.FlightTicketsTable,
			Columns: []string{flight.FlightTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedFlightTicketsIDs(); len(nodes) > 0 && !fuo.mutation.FlightTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.FlightTicketsTable,
			Columns: []string{flight.FlightTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FlightTicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.FlightTicketsTable,
			Columns: []string{flight.FlightTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Flight{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
